//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class OplockOnShareWithoutForceLevel2OrSOFSTestCase : PtfTestClassBase {
        
        public OplockOnShareWithoutForceLevel2OrSOFSTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c);
        
        public delegate void RequestOplockAndOperateFileRequestDelegate1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c);
        
        public delegate void OplockBreakNotificationDelegate1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel);
        
        public delegate void OplockBreakResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen);
        
        public delegate void OplockBreakAcknowledgementRequestDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.IOplockAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig).MakeByRefType());
        
        static System.Reflection.MethodBase RequestOplockAndOperateFileRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.IOplockAdapter), "RequestOplockAndOperateFileRequest", typeof(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation), typeof(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values).MakeByRefType(), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig).MakeByRefType());
        
        static System.Reflection.EventInfo OplockBreakNotificationInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.IOplockAdapter), "OplockBreakNotification");
        
        static System.Reflection.EventInfo OplockBreakResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.IOplockAdapter), "OplockBreakResponse");
        
        static System.Reflection.MethodBase OplockBreakAcknowledgementRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.IOplockAdapter), "OplockBreakAcknowledgementRequest", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion), typeof(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values));
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.IOplockAdapter IOplockAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig> c1;
        
        private IVariable<int> grantedOplockLevel;
        
        private IVariable<int> oplockLevel1;
        
        private IVariable<int> oplockLevelOnOpen;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig> v2;
        
        private IVariable<int> v3;
        
        private IVariable<int> v4;
        
        private IVariable<int> v5;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IOplockAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.IOplockAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.IOplockAdapter))));
            this.Manager.Subscribe(OplockBreakNotificationInfo, this.IOplockAdapterInstance);
            this.Manager.Subscribe(OplockBreakResponseInfo, this.IOplockAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>("c1");
            this.grantedOplockLevel = this.Manager.CreateVariable<int>("grantedOplockLevel");
            this.oplockLevel1 = this.Manager.CreateVariable<int>("oplockLevel1");
            this.oplockLevelOnOpen = this.Manager.CreateVariable<int>("oplockLevelOnOpen");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>("v2");
            this.v3 = this.Manager.CreateVariable<int>("v3");
            this.v4 = this.Manager.CreateVariable<int>("v4");
            this.v5 = this.Manager.CreateVariable<int>("v5");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0ReadConfigChecker3)));
            if ((temp34 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S4\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp1;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp2;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,WriteF" +
                        "romAnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp1, out temp2);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp1, temp2);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS5();
                goto label25;
            }
            if ((temp34 == 1)) {
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S28\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp9;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp10;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp9, out temp10);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp9, temp10);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS29();
                goto label25;
            }
            if ((temp34 == 2)) {
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S52\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp18;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp19;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp18, out temp19);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp18, temp19);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS53();
                goto label25;
            }
            if ((temp34 == 3)) {
                this.Manager.Comment("reaching state \'S70\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S72\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp26;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp27;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp26, out temp27);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp26, temp27);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS73();
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS5() {
            this.Manager.Comment("reaching state \'S5\'");
            int temp8 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker1)));
            if ((temp8 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS15();
                goto label5;
            }
            if ((temp8 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS6();
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS15() {
            this.Manager.Comment("reaching state \'S15\'");
            int temp4 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker1)));
            if ((temp4 == 0)) {
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S18\'");
                int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker1)));
                if ((temp3 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19();
                    goto label0;
                }
                if ((temp3 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19();
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker1)));
            label0:
;
                goto label1;
            }
            if ((temp4 == 1)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S24\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker2))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS25();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker2)));
                }
                goto label1;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S21\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker3))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker3)));
            }
        label1:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S15");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19() {
            this.Manager.Comment("reaching state \'S19\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S18");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S15");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S24");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S24");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S24");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S21");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S21");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S21");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS6() {
            this.Manager.Comment("reaching state \'S6\'");
            int temp7 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker3)));
            if ((temp7 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS7();
                goto label4;
            }
            if ((temp7 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS7();
                goto label4;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S12\'");
            int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker9)));
            if ((temp6 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS13();
                goto label3;
            }
            if ((temp6 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS14();
                goto label3;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker9)));
        label3:
;
        label4:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS7() {
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S9\'");
            int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker7)));
            if ((temp5 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label2;
            }
            if ((temp5 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label2;
            }
            if ((temp5 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label2;
            }
            if ((temp5 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label2;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker7)));
        label2:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S9");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S9");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S9");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10() {
            this.Manager.Comment("reaching state \'S10\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S9");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S9");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S9");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S9");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S9");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S9");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S9");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S9");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S9");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S12");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S12");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S12");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS13() {
            this.Manager.Comment("reaching state \'S13\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S12");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S12");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S12");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS14() {
            this.Manager.Comment("reaching state \'S14\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS29() {
            this.Manager.Comment("reaching state \'S29\'");
            int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker3)));
            if ((temp17 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS30();
                goto label12;
            }
            if ((temp17 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS41();
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S29");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S29");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS30() {
            this.Manager.Comment("reaching state \'S30\'");
            int temp13 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker5)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S33\'");
                int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker11)));
                if ((temp11 == 0)) {
                    this.Manager.Comment("reaching state \'S34\'");
                    goto label6;
                }
                if ((temp11 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35();
                    goto label6;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker11)));
            label6:
;
                goto label8;
            }
            if ((temp13 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS38();
                goto label8;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S37\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker14))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker14)));
            }
        label8:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S30");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S33");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S33");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S33");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S33");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S33");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S33");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35() {
            this.Manager.Comment("reaching state \'S35\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S30");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS38() {
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S40\'");
            int temp12 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker12)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker13)));
            if ((temp12 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35();
                goto label7;
            }
            if ((temp12 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35();
                goto label7;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker12)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker13)));
        label7:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S40");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S37");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S37");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S29");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S29");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS41() {
            this.Manager.Comment("reaching state \'S41\'");
            int temp16 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker7)));
            if ((temp16 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS42();
                goto label11;
            }
            if ((temp16 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS42();
                goto label11;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S47\'");
            int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker19)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker20)));
            if ((temp15 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS48();
                goto label10;
            }
            if ((temp15 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS49();
                goto label10;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker19)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker20)));
        label10:
;
        label11:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S41");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS42() {
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S44\'");
            int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker15)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker16)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker17)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker18)));
            if ((temp14 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label9;
            }
            if ((temp14 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label9;
            }
            if ((temp14 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label9;
            }
            if ((temp14 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label9;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker15)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker16)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker17)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker18)));
        label9:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S44");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S44");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S44");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45() {
            this.Manager.Comment("reaching state \'S45\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S44");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S44");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S44");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S44");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S44");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S44");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S44");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S44");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S44");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S41");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S47");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S47");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S47");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS48() {
            this.Manager.Comment("reaching state \'S48\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S47");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S47");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S47");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS49() {
            this.Manager.Comment("reaching state \'S49\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS53() {
            this.Manager.Comment("reaching state \'S53\'");
            int temp25 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker4)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker5)));
            if ((temp25 == 0)) {
                this.Manager.Comment("reaching state \'S54\'");
                int temp21 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker9)));
                if ((temp21 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS55();
                    goto label14;
                }
                if ((temp21 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS55();
                    goto label14;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S60\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker23))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker23)));
                }
            label14:
;
                goto label18;
            }
            if ((temp25 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS61();
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S53");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S53");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker8(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S54");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS55() {
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S57\'");
            int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker21)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker22)));
            if ((temp20 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58();
                goto label13;
            }
            if ((temp20 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58();
                goto label13;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker21)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker22)));
        label13:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58() {
            this.Manager.Comment("reaching state \'S58\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S57");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker9(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S54");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S60");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S53");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S53");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS61() {
            this.Manager.Comment("reaching state \'S61\'");
            int temp24 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker11)));
            if ((temp24 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS62();
                goto label17;
            }
            if ((temp24 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS62();
                goto label17;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S67\'");
            int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker28)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker29)));
            if ((temp23 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS68();
                goto label16;
            }
            if ((temp23 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS69();
                goto label16;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker28)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker29)));
        label16:
;
        label17:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker10(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS62() {
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S64\'");
            int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker24)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker25)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker26)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker27)));
            if ((temp22 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label15;
            }
            if ((temp22 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label15;
            }
            if ((temp22 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label15;
            }
            if ((temp22 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label15;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker24)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker25)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker26)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker27)));
        label15:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65() {
            this.Manager.Comment("reaching state \'S65\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S64");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S64");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker11(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker28(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S67");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS68() {
            this.Manager.Comment("reaching state \'S68\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker29(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S67");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS69() {
            this.Manager.Comment("reaching state \'S69\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS73() {
            this.Manager.Comment("reaching state \'S73\'");
            int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker6)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker7)));
            if ((temp33 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS74();
                goto label24;
            }
            if ((temp33 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS83();
                goto label24;
            }
            throw new InvalidOperationException("never reached");
        label24:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S73");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS74() {
            this.Manager.Comment("reaching state \'S74\'");
            int temp30 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker12)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker13)));
            if ((temp30 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS75();
                goto label21;
            }
            if ((temp30 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS75();
                goto label21;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S80\'");
            int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker34)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker35)));
            if ((temp29 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS81();
                goto label20;
            }
            if ((temp29 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS82();
                goto label20;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker34)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker35)));
        label20:
;
        label21:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker12(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S74");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS75() {
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S77\'");
            int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker30)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker31)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker32)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker33)));
            if ((temp28 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label19;
            }
            if ((temp28 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label19;
            }
            if ((temp28 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label19;
            }
            if ((temp28 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label19;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker30)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker31)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker32)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker33)));
        label19:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker30(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S77");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S77");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S77");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78() {
            this.Manager.Comment("reaching state \'S78\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker31(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S77");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S77");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S77");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker32(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S77");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S77");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S77");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker33(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S77");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S77");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S77");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker13(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S74");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker34(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S80");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS81() {
            this.Manager.Comment("reaching state \'S81\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker35(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S80");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S80");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS82() {
            this.Manager.Comment("reaching state \'S82\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0RequestOplockAndOperateFileRequestChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S73");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS83() {
            this.Manager.Comment("reaching state \'S83\'");
            int temp32 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker14)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker15)));
            if ((temp32 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS84();
                goto label23;
            }
            if ((temp32 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS84();
                goto label23;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S89\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker38))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker38)));
            }
        label23:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker14(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS84() {
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S86\'");
            int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker36)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker37)));
            if ((temp31 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87();
                goto label22;
            }
            if ((temp31 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87();
                goto label22;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker36)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker37)));
        label22:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker36(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87() {
            this.Manager.Comment("reaching state \'S87\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker37(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S86");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakNotificationChecker15(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS0OplockBreakResponseChecker38(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S89");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S1033
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033");
            this.Manager.Comment("reaching state \'S1033\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp35;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp35);
            this.Manager.AddReturn(ReadConfigInfo, null, temp35);
            this.Manager.Comment("reaching state \'S1034\'");
            int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033ReadConfigChecker3)));
            if ((temp58 == 0)) {
                this.Manager.Comment("reaching state \'S1035\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOC" +
                        "K,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1036\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1037\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp36;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp37;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp36, out temp37);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp36, temp37);
                this.Manager.Comment("reaching state \'S1038\'");
                int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker1)));
                if ((temp40 == 0)) {
                    this.Manager.Comment("reaching state \'S1039\'");
                    int temp38 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker1)));
                    if ((temp38 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1040();
                        goto label26;
                    }
                    if ((temp38 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1040();
                        goto label26;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S1043\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1044\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1011();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker1)));
                    }
                label26:
;
                    goto label28;
                }
                if ((temp40 == 1)) {
                    this.Manager.Comment("reaching state \'S1045\'");
                    int temp39 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker3)));
                    if ((temp39 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1046();
                        goto label27;
                    }
                    if ((temp39 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1046();
                        goto label27;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S1050\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1051\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker3))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker3)));
                    }
                label27:
;
                    goto label28;
                }
                throw new InvalidOperationException("never reached");
            label28:
;
                goto label40;
            }
            if ((temp58 == 1)) {
                this.Manager.Comment("reaching state \'S1052\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1053\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1054\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp41;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp42;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp41, out temp42);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp41, temp42);
                this.Manager.Comment("reaching state \'S1055\'");
                int temp47 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker3)));
                if ((temp47 == 0)) {
                    this.Manager.Comment("reaching state \'S1056\'");
                    int temp45 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker5)));
                    if ((temp45 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1057();
                        goto label31;
                    }
                    if ((temp45 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1057();
                        goto label31;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S1061\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1062\'");
                    int temp44 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker8)));
                    if ((temp44 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS709();
                        goto label30;
                    }
                    if ((temp44 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS710();
                        goto label30;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker8)));
                label30:
;
                label31:
;
                    goto label33;
                }
                if ((temp47 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS476();
                    goto label33;
                }
                throw new InvalidOperationException("never reached");
            label33:
;
                goto label40;
            }
            if ((temp58 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label40;
            }
            if ((temp58 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label40;
            }
            throw new InvalidOperationException("never reached");
        label40:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1034");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1038");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1038");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1039");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1040() {
            this.Manager.Comment("reaching state \'S1040\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1041\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1042\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1008();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1042");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1042");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1042");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1008() {
            this.Manager.Comment("reaching state \'S1008\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1039");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1044");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1044");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1044");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1011() {
            this.Manager.Comment("reaching state \'S1011\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1038");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1038");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1045");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1046() {
            this.Manager.Comment("reaching state \'S1046\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1047\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1048\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker2))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1049();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker2)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1048");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1048");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1048");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1049() {
            this.Manager.Comment("reaching state \'S1049\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1045");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1051");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1051");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1051");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016() {
            this.Manager.Comment("reaching state \'S1016\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1034");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1055");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1055");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1056");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1057() {
            this.Manager.Comment("reaching state \'S1057\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S1058\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1059\'");
            int temp43 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker6)));
            if ((temp43 == 0)) {
                this.Manager.Comment("reaching state \'S1060\'");
                goto label29;
            }
            if ((temp43 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label29;
            }
            if ((temp43 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label29;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker6)));
        label29:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1059");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1059");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1059");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1059");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1059");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1059");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642() {
            this.Manager.Comment("reaching state \'S642\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1059");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1059");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1059");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1056");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1062");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1062");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1062");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS709() {
            this.Manager.Comment("reaching state \'S709\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1062");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1062");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1062");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS710() {
            this.Manager.Comment("reaching state \'S710\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1055");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1055");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS476() {
            this.Manager.Comment("reaching state \'S476\'");
            int temp46 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker7)));
            if ((temp46 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS477();
                goto label32;
            }
            if ((temp46 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS477();
                goto label32;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S481\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S482\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker10))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker10)));
            }
        label32:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS477() {
            this.Manager.Comment("reaching state \'S477\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S478\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S479\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker9))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS480();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker9)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S479");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S479");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS480() {
            this.Manager.Comment("reaching state \'S480\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S482");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S482");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S482");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483() {
            this.Manager.Comment("reaching state \'S483\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1034");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112() {
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                    "CK,NO_STYPE_CLUSTER_SOFS)\'");
            this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S114\'");
            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp48;
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp49;
            this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                    "therOpen,out _,out _)\'");
            this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp48, out temp49);
            this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp48, temp49);
            this.Manager.Comment("reaching state \'S115\'");
            int temp52 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker4)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker5)));
            if ((temp52 == 0)) {
                this.Manager.Comment("reaching state \'S116\'");
                int temp50 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker9)));
                if ((temp50 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS117();
                    goto label34;
                }
                if ((temp50 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS117();
                    goto label34;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                        "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S122\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker12))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker12)));
                }
            label34:
;
                goto label36;
            }
            if ((temp52 == 1)) {
                this.Manager.Comment("reaching state \'S123\'");
                int temp51 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker11)));
                if ((temp51 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS124();
                    goto label35;
                }
                if ((temp51 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS124();
                    goto label35;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                        "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S129\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker14))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS130();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker14)));
                }
            label35:
;
                goto label36;
            }
            throw new InvalidOperationException("never reached");
        label36:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker8(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS117() {
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S119\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker11))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS120();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker11)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S119");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S119");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S119");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS120() {
            this.Manager.Comment("reaching state \'S120\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker9(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S122");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S122");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S122");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S115");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker10(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS124() {
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S126\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker13))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS127();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker13)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S126");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S126");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S126");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS127() {
            this.Manager.Comment("reaching state \'S127\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker11(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S129");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S129");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS130() {
            this.Manager.Comment("reaching state \'S130\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1034");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131() {
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                    "CK,NO_STYPE_CLUSTER_SOFS)\'");
            this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S133\'");
            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp53;
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp54;
            this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                    "therOpen,out _,out _)\'");
            this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp53, out temp54);
            this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp53, temp54);
            this.Manager.Comment("reaching state \'S134\'");
            int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker6)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker7)));
            if ((temp57 == 0)) {
                this.Manager.Comment("reaching state \'S135\'");
                int temp55 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker12)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker13)));
                if ((temp55 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS136();
                    goto label37;
                }
                if ((temp55 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS136();
                    goto label37;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                        "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S141\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker16))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker16)));
                }
            label37:
;
                goto label39;
            }
            if ((temp57 == 1)) {
                this.Manager.Comment("reaching state \'S142\'");
                int temp56 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker14)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker15)));
                if ((temp56 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS143();
                    goto label38;
                }
                if ((temp56 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS143();
                    goto label38;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                        "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S147\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S148\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker18))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS149();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker18)));
                }
            label38:
;
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S134");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker12(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS136() {
            this.Manager.Comment("reaching state \'S136\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S138\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker15))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS139();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker15)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS139() {
            this.Manager.Comment("reaching state \'S139\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker13(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S141");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S141");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033RequestOplockAndOperateFileRequestChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S134");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker14(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS143() {
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S145\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker17))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS146();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker17)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S145");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S145");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS146() {
            this.Manager.Comment("reaching state \'S146\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakNotificationChecker15(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1033OplockBreakResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S148");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S148");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS149() {
            this.Manager.Comment("reaching state \'S149\'");
        }
        #endregion
        
        #region Test Starting in S1063
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063");
            this.Manager.Comment("reaching state \'S1063\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp59;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp59);
            this.Manager.AddReturn(ReadConfigInfo, null, temp59);
            this.Manager.Comment("reaching state \'S1064\'");
            int temp74 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063ReadConfigChecker3)));
            if ((temp74 == 0)) {
                this.Manager.Comment("reaching state \'S1065\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOC" +
                        "K,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1066\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1067\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp60;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp61;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp60, out temp61);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp60, temp61);
                this.Manager.Comment("reaching state \'S1068\'");
                int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063RequestOplockAndOperateFileRequestChecker1)));
                if ((temp66 == 0)) {
                    this.Manager.Comment("reaching state \'S1069\'");
                    int temp64 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker1)));
                    if ((temp64 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1070();
                        goto label43;
                    }
                    if ((temp64 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1070();
                        goto label43;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S1074\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1075\'");
                    int temp63 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker3)));
                    if ((temp63 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1076();
                        goto label42;
                    }
                    if ((temp63 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1077();
                        goto label42;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker3)));
                label42:
;
                label43:
;
                    goto label45;
                }
                if ((temp66 == 1)) {
                    this.Manager.Comment("reaching state \'S1078\'");
                    int temp65 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker3)));
                    if ((temp65 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1079();
                        goto label44;
                    }
                    if ((temp65 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1079();
                        goto label44;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S1082\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1083\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker5)));
                    }
                label44:
;
                    goto label45;
                }
                throw new InvalidOperationException("never reached");
            label45:
;
                goto label51;
            }
            if ((temp74 == 1)) {
                this.Manager.Comment("reaching state \'S1084\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1085\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1086\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp67;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp68;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,Create" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp67, out temp68);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp67, temp68);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1087();
                goto label51;
            }
            if ((temp74 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label51;
            }
            if ((temp74 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1064");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1068");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1068");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1069");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1070() {
            this.Manager.Comment("reaching state \'S1070\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S1071\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1072\'");
            int temp62 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker1)));
            if ((temp62 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                goto label41;
            }
            if ((temp62 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                goto label41;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker1)));
        label41:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1072");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1072");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1072");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073() {
            this.Manager.Comment("reaching state \'S1073\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1072");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1072");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1072");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1069");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1075");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1075");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1075");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1076() {
            this.Manager.Comment("reaching state \'S1076\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1075");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1075");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1075");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1077() {
            this.Manager.Comment("reaching state \'S1077\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1068");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1068");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1078");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1079() {
            this.Manager.Comment("reaching state \'S1079\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1080\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1081\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker4))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1049();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker4)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1081");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1081");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1081");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1078");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1083");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1083");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1083");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1064");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1087() {
            this.Manager.Comment("reaching state \'S1087\'");
            int temp73 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063RequestOplockAndOperateFileRequestChecker3)));
            if ((temp73 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1088();
                goto label50;
            }
            if ((temp73 == 1)) {
                this.Manager.Comment("reaching state \'S1094\'");
                int temp72 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker7)));
                if ((temp72 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS477();
                    goto label49;
                }
                if ((temp72 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS477();
                    goto label49;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                this.Manager.Comment("reaching state \'S1095\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S1096\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker12))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker12)));
                }
            label49:
;
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1087");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1087");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1088() {
            this.Manager.Comment("reaching state \'S1088\'");
            int temp71 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker5)));
            if ((temp71 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1089();
                goto label48;
            }
            if ((temp71 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1089();
                goto label48;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1092\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1093\'");
            int temp70 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker11)));
            if ((temp70 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS709();
                goto label47;
            }
            if ((temp70 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS710();
                goto label47;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker11)));
        label47:
;
        label48:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1088");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1089() {
            this.Manager.Comment("reaching state \'S1089\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1090\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1091\'");
            int temp69 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker9)));
            if ((temp69 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label46;
            }
            if ((temp69 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label46;
            }
            if ((temp69 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label46;
            }
            if ((temp69 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label46;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker9)));
        label46:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1091");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1091");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1091");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1091");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1091");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1091");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1091");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1091");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1091");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1091");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1091");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1091");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1088");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1093");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1093");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1093");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1093");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1093");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1093");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1087");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1087");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1094");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1094");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063OplockBreakResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1096");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1096");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1096");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1064");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1063ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1064");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1097
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097");
            this.Manager.Comment("reaching state \'S1097\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp75;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp75);
            this.Manager.AddReturn(ReadConfigInfo, null, temp75);
            this.Manager.Comment("reaching state \'S1098\'");
            int temp88 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097ReadConfigChecker3)));
            if ((temp88 == 0)) {
                this.Manager.Comment("reaching state \'S1099\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOC" +
                        "K,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1100\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1101\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp76;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp77;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp76, out temp77);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp76, temp77);
                this.Manager.Comment("reaching state \'S1102\'");
                int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097RequestOplockAndOperateFileRequestChecker1)));
                if ((temp82 == 0)) {
                    this.Manager.Comment("reaching state \'S1103\'");
                    int temp80 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker1)));
                    if ((temp80 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1104();
                        goto label54;
                    }
                    if ((temp80 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1104();
                        goto label54;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S1108\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1109\'");
                    int temp79 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker4)));
                    if ((temp79 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1076();
                        goto label53;
                    }
                    if ((temp79 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1077();
                        goto label53;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker4)));
                label53:
;
                label54:
;
                    goto label56;
                }
                if ((temp82 == 1)) {
                    this.Manager.Comment("reaching state \'S1110\'");
                    int temp81 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker3)));
                    if ((temp81 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1111();
                        goto label55;
                    }
                    if ((temp81 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1111();
                        goto label55;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S1114\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1115\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker6))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker6)));
                    }
                label55:
;
                    goto label56;
                }
                throw new InvalidOperationException("never reached");
            label56:
;
                goto label60;
            }
            if ((temp88 == 1)) {
                this.Manager.Comment("reaching state \'S1116\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1117\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1118\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp83;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp84;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,WriteFrom" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp83, out temp84);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp83, temp84);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1119();
                goto label60;
            }
            if ((temp88 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label60;
            }
            if ((temp88 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label60;
            }
            throw new InvalidOperationException("never reached");
        label60:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1098");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1102");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1102");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1104() {
            this.Manager.Comment("reaching state \'S1104\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S1105\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1106\'");
            int temp78 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker2)));
            if ((temp78 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                goto label52;
            }
            if ((temp78 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                goto label52;
            }
            if ((temp78 == 2)) {
                this.Manager.Comment("reaching state \'S1107\'");
                goto label52;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker2)));
        label52:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1106");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1106");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1106");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1106");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1106");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1106");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1106");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1106");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1106");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1109");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1109");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1109");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1109");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1109");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1109");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1102");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1102");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1111() {
            this.Manager.Comment("reaching state \'S1111\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S1112\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1113\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker5))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1049();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker5)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1113");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1115");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1115");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1098");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1119() {
            this.Manager.Comment("reaching state \'S1119\'");
            int temp87 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097RequestOplockAndOperateFileRequestChecker3)));
            if ((temp87 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1088();
                goto label59;
            }
            if ((temp87 == 1)) {
                this.Manager.Comment("reaching state \'S1120\'");
                int temp86 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker5)));
                if ((temp86 == 0)) {
                    this.Manager.Comment("reaching state \'S1121\'");
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S1122\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1123\'");
                    int temp85 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker8)));
                    if ((temp85 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483();
                        goto label57;
                    }
                    if ((temp85 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483();
                        goto label57;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker8)));
                label57:
;
                    goto label58;
                }
                if ((temp86 == 1)) {
                    this.Manager.Comment("reaching state \'S1126\'");
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S1127\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1128\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker9))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker9)));
                    }
                    goto label58;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S1124\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S1125\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker10))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker10)));
                }
            label58:
;
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1119");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1119");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1119");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1119");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1128");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1128");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1125");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1125");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1098");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1097ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1098");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1129
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129");
            this.Manager.Comment("reaching state \'S1129\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp89;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp89);
            this.Manager.AddReturn(ReadConfigInfo, null, temp89);
            this.Manager.Comment("reaching state \'S1130\'");
            int temp99 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129ReadConfigChecker3)));
            if ((temp99 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label66;
            }
            if ((temp99 == 1)) {
                this.Manager.Comment("reaching state \'S1131\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOC" +
                        "K,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1132\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1133\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp90;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp91;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp90, out temp91);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp90, temp91);
                this.Manager.Comment("reaching state \'S1134\'");
                int temp96 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129RequestOplockAndOperateFileRequestChecker1)));
                if ((temp96 == 0)) {
                    this.Manager.Comment("reaching state \'S1135\'");
                    int temp94 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakNotificationChecker1)));
                    if ((temp94 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1136();
                        goto label63;
                    }
                    if ((temp94 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1136();
                        goto label63;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S1139\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1140\'");
                    int temp93 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker3)));
                    if ((temp93 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1076();
                        goto label62;
                    }
                    if ((temp93 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1077();
                        goto label62;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker3)));
                label62:
;
                label63:
;
                    goto label65;
                }
                if ((temp96 == 1)) {
                    this.Manager.Comment("reaching state \'S1141\'");
                    int temp95 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakNotificationChecker3)));
                    if ((temp95 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1142();
                        goto label64;
                    }
                    if ((temp95 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1142();
                        goto label64;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S1145\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1146\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker5)));
                    }
                label64:
;
                    goto label65;
                }
                throw new InvalidOperationException("never reached");
            label65:
;
                goto label66;
            }
            if ((temp99 == 2)) {
                this.Manager.Comment("reaching state \'S1147\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1148\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1149\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp97;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp98;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,WriteF" +
                        "romAnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp97, out temp98);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp97, temp98);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1087();
                goto label66;
            }
            if ((temp99 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label66;
            }
            throw new InvalidOperationException("never reached");
        label66:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1130");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1130");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1134");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1136() {
            this.Manager.Comment("reaching state \'S1136\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S1137\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1138\'");
            int temp92 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker1)));
            if ((temp92 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                goto label61;
            }
            if ((temp92 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                goto label61;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker1)));
        label61:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1140");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1140");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1134");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1142() {
            this.Manager.Comment("reaching state \'S1142\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S1143\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1144\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker4))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1049();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker4)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S1146");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1130");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1129ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1130");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1150
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150");
            this.Manager.Comment("reaching state \'S1150\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp100;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp100);
            this.Manager.AddReturn(ReadConfigInfo, null, temp100);
            this.Manager.Comment("reaching state \'S1151\'");
            int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150ReadConfigChecker3)));
            if ((temp113 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label75;
            }
            if ((temp113 == 1)) {
                this.Manager.Comment("reaching state \'S1152\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOC" +
                        "K,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1153\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1154\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp101;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp102;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp101, out temp102);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp101, temp102);
                this.Manager.Comment("reaching state \'S1155\'");
                int temp108 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150RequestOplockAndOperateFileRequestChecker1)));
                if ((temp108 == 0)) {
                    this.Manager.Comment("reaching state \'S1156\'");
                    int temp105 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker1)));
                    if ((temp105 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1157();
                        goto label69;
                    }
                    if ((temp105 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1157();
                        goto label69;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S1160\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1161\'");
                    int temp104 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker3)));
                    if ((temp104 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1076();
                        goto label68;
                    }
                    if ((temp104 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1077();
                        goto label68;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker3)));
                label68:
;
                label69:
;
                    goto label72;
                }
                if ((temp108 == 1)) {
                    this.Manager.Comment("reaching state \'S1162\'");
                    int temp107 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker3)));
                    if ((temp107 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1163();
                        goto label71;
                    }
                    if ((temp107 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1163();
                        goto label71;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S1167\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1168\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker6))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker6)));
                    }
                label71:
;
                    goto label72;
                }
                throw new InvalidOperationException("never reached");
            label72:
;
                goto label75;
            }
            if ((temp113 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label75;
            }
            if ((temp113 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1151");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1151");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1155");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1155");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1156");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1157() {
            this.Manager.Comment("reaching state \'S1157\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S1158\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1159\'");
            int temp103 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker1)));
            if ((temp103 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                goto label67;
            }
            if ((temp103 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                goto label67;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker1)));
        label67:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1159");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1156");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S1161");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S1161");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1155");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1155");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1163() {
            this.Manager.Comment("reaching state \'S1163\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S1164\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1165\'");
            int temp106 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker5)));
            if ((temp106 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016();
                goto label70;
            }
            if ((temp106 == 1)) {
                this.Manager.Comment("reaching state \'S1166\'");
                goto label70;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker5)));
        label70:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1165");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1165");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1165");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1165");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1168");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1151");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1151");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472() {
            this.Manager.Comment("reaching state \'S472\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                    "CK,NO_STYPE_CLUSTER_SOFS)\'");
            this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
            this.Manager.Comment("reaching state \'S473\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S474\'");
            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp109;
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp110;
            this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                    "therOpen,out _,out _)\'");
            this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp109, out temp110);
            this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp109, temp110);
            this.Manager.Comment("reaching state \'S475\'");
            int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150RequestOplockAndOperateFileRequestChecker3)));
            if ((temp112 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS476();
                goto label74;
            }
            if ((temp112 == 1)) {
                this.Manager.Comment("reaching state \'S484\'");
                int temp111 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker5)));
                if ((temp111 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS485();
                    goto label73;
                }
                if ((temp111 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS485();
                    goto label73;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                        "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.AddReturn(OplockBreakAcknowledgementRequestInfo, null);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS489();
            label73:
;
                goto label74;
            }
            throw new InvalidOperationException("never reached");
        label74:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S475");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S475");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S475");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S475");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S484");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS485() {
            this.Manager.Comment("reaching state \'S485\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S486\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S487\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker7))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS488();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker7)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S487");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S487");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S487");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS488() {
            this.Manager.Comment("reaching state \'S488\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S484");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS489() {
            this.Manager.Comment("reaching state \'S489\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakAcknowledgementRequestInfo, null, new OplockBreakAcknowledgementRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakAcknowledgementRequestChecker)));
            this.Manager.Comment("reaching state \'S490\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker8))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS491();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker8)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakAcknowledgementRequestChecker() {
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1150OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S490");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S490");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S490");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS491() {
            this.Manager.Comment("reaching state \'S491\'");
        }
        #endregion
        
        #region Test Starting in S1169
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169");
            this.Manager.Comment("reaching state \'S1169\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp114;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp114);
            this.Manager.AddReturn(ReadConfigInfo, null, temp114);
            this.Manager.Comment("reaching state \'S1170\'");
            int temp129 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169ReadConfigChecker3)));
            if ((temp129 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label86;
            }
            if ((temp129 == 1)) {
                this.Manager.Comment("reaching state \'S1171\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOC" +
                        "K,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1172\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1173\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp115;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp116;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,Create" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp115, out temp116);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp115, temp116);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1174();
                goto label86;
            }
            if ((temp129 == 2)) {
                this.Manager.Comment("reaching state \'S1187\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1188\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1189\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp123;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp124;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp123, out temp124);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp123, temp124);
                this.Manager.Comment("reaching state \'S1190\'");
                int temp128 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169RequestOplockAndOperateFileRequestChecker3)));
                if ((temp128 == 0)) {
                    this.Manager.Comment("reaching state \'S1191\'");
                    int temp126 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker5)));
                    if ((temp126 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1192();
                        goto label83;
                    }
                    if ((temp126 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1192();
                        goto label83;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S1195\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1196\'");
                    int temp125 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker11)));
                    if ((temp125 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS48();
                        goto label82;
                    }
                    if ((temp125 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS49();
                        goto label82;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker11)));
                label82:
;
                label83:
;
                    goto label85;
                }
                if ((temp128 == 1)) {
                    this.Manager.Comment("reaching state \'S1197\'");
                    int temp127 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker7)));
                    if ((temp127 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1198();
                        goto label84;
                    }
                    if ((temp127 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1198();
                        goto label84;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S1201\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1202\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker13))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker13)));
                    }
                label84:
;
                    goto label85;
                }
                throw new InvalidOperationException("never reached");
            label85:
;
                goto label86;
            }
            if ((temp129 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label86;
            }
            throw new InvalidOperationException("never reached");
        label86:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1170");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1170");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1174() {
            this.Manager.Comment("reaching state \'S1174\'");
            int temp122 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169RequestOplockAndOperateFileRequestChecker1)));
            if ((temp122 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1175();
                goto label81;
            }
            if ((temp122 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1181();
                goto label81;
            }
            throw new InvalidOperationException("never reached");
        label81:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1174");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1175() {
            this.Manager.Comment("reaching state \'S1175\'");
            int temp118 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker1)));
            if ((temp118 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1176();
                goto label77;
            }
            if ((temp118 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1176();
                goto label77;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1179\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1180\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker2))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker2)));
            }
        label77:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1176() {
            this.Manager.Comment("reaching state \'S1176\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1177\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1178\'");
            int temp117 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker1)));
            if ((temp117 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016();
                goto label76;
            }
            if ((temp117 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016();
                goto label76;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker1)));
        label76:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1178");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1180");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1180");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1174");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1181() {
            this.Manager.Comment("reaching state \'S1181\'");
            int temp121 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker3)));
            if ((temp121 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1070();
                goto label80;
            }
            if ((temp121 == 1)) {
                this.Manager.Comment("reaching state \'S1182\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S1183\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S1184\'");
                int temp119 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker6)));
                if ((temp119 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                    goto label78;
                }
                if ((temp119 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                    goto label78;
                }
                if ((temp119 == 2)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                    goto label78;
                }
                if ((temp119 == 3)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1073();
                    goto label78;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker6)));
            label78:
;
                goto label80;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S1185\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1186\'");
            int temp120 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker8)));
            if ((temp120 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1076();
                goto label79;
            }
            if ((temp120 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1077();
                goto label79;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker8)));
        label79:
;
        label80:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1184");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1184");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1186");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1186");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1186");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1186");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1186");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1170");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1190");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1190");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1192() {
            this.Manager.Comment("reaching state \'S1192\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1193\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1194\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker9))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS146();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker9)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1194");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1194");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1196");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1196");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1196");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1196");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1190");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1190");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1198() {
            this.Manager.Comment("reaching state \'S1198\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1199\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1200\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker12))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS139();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker12)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169OplockBreakResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1202");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1202");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1169ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1170");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1203
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203");
            this.Manager.Comment("reaching state \'S1203\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp130;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp130);
            this.Manager.AddReturn(ReadConfigInfo, null, temp130);
            this.Manager.Comment("reaching state \'S1204\'");
            int temp140 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203ReadConfigChecker3)));
            if ((temp140 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label92;
            }
            if ((temp140 == 1)) {
                this.Manager.Comment("reaching state \'S1205\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOC" +
                        "K,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1206\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1207\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp131;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp132;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,WriteFrom" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp131, out temp132);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp131, temp132);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1208();
                goto label92;
            }
            if ((temp140 == 2)) {
                this.Manager.Comment("reaching state \'S1209\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1210\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1211\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp134;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp135;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp134, out temp135);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp134, temp135);
                this.Manager.Comment("reaching state \'S1212\'");
                int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203RequestOplockAndOperateFileRequestChecker3)));
                if ((temp139 == 0)) {
                    this.Manager.Comment("reaching state \'S1213\'");
                    int temp137 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakNotificationChecker1)));
                    if ((temp137 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1214();
                        goto label89;
                    }
                    if ((temp137 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1214();
                        goto label89;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S1217\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1218\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker2))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS149();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker2)));
                    }
                label89:
;
                    goto label91;
                }
                if ((temp139 == 1)) {
                    this.Manager.Comment("reaching state \'S1219\'");
                    int temp138 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakNotificationChecker3)));
                    if ((temp138 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1220();
                        goto label90;
                    }
                    if ((temp138 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1220();
                        goto label90;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S1223\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1224\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker4))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker4)));
                    }
                label90:
;
                    goto label91;
                }
                throw new InvalidOperationException("never reached");
            label91:
;
                goto label92;
            }
            if ((temp140 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label92;
            }
            throw new InvalidOperationException("never reached");
        label92:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1204");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1204");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1208() {
            this.Manager.Comment("reaching state \'S1208\'");
            int temp133 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203RequestOplockAndOperateFileRequestChecker1)));
            if ((temp133 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1175();
                goto label87;
            }
            if ((temp133 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1181();
                goto label87;
            }
            throw new InvalidOperationException("never reached");
        label87:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1208");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1208");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1204");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1212");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1214() {
            this.Manager.Comment("reaching state \'S1214\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S1215\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1216\'");
            int temp136 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker1)));
            if ((temp136 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label88;
            }
            if ((temp136 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label88;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker1)));
        label88:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1216");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1216");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1216");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1218");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1218");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1218");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1212");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1219");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1220() {
            this.Manager.Comment("reaching state \'S1220\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S1221\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1222\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker3))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS139();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker3)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1222");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1219");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1224");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1224");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1203ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1204");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1225
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225");
            this.Manager.Comment("reaching state \'S1225\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp141;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp141);
            this.Manager.AddReturn(ReadConfigInfo, null, temp141);
            this.Manager.Comment("reaching state \'S1226\'");
            int temp151 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225ReadConfigChecker3)));
            if ((temp151 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label98;
            }
            if ((temp151 == 1)) {
                this.Manager.Comment("reaching state \'S1227\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOC" +
                        "K,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1228\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1229\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp142;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp143;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp142, out temp143);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp142, temp143);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1208();
                goto label98;
            }
            if ((temp151 == 2)) {
                this.Manager.Comment("reaching state \'S1230\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1231\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1232\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp144;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp145;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp144, out temp145);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp144, temp145);
                this.Manager.Comment("reaching state \'S1233\'");
                int temp150 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225RequestOplockAndOperateFileRequestChecker1)));
                if ((temp150 == 0)) {
                    this.Manager.Comment("reaching state \'S1234\'");
                    int temp148 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakNotificationChecker1)));
                    if ((temp148 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1235();
                        goto label95;
                    }
                    if ((temp148 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1235();
                        goto label95;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S1238\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1239\'");
                    int temp147 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker3)));
                    if ((temp147 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS48();
                        goto label94;
                    }
                    if ((temp147 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS49();
                        goto label94;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker3)));
                label94:
;
                label95:
;
                    goto label97;
                }
                if ((temp150 == 1)) {
                    this.Manager.Comment("reaching state \'S1240\'");
                    int temp149 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakNotificationChecker3)));
                    if ((temp149 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1241();
                        goto label96;
                    }
                    if ((temp149 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1241();
                        goto label96;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S1244\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1245\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker5)));
                    }
                label96:
;
                    goto label97;
                }
                throw new InvalidOperationException("never reached");
            label97:
;
                goto label98;
            }
            if ((temp151 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label98;
            }
            throw new InvalidOperationException("never reached");
        label98:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1234");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1235() {
            this.Manager.Comment("reaching state \'S1235\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S1236\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1237\'");
            int temp146 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker1)));
            if ((temp146 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label93;
            }
            if ((temp146 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label93;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker1)));
        label93:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1237");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1237");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1237");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1237");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1237");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1234");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1239");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1239");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1239");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1239");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1239");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1241() {
            this.Manager.Comment("reaching state \'S1241\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S1242\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1243\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker4))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS139();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker4)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1243");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1243");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1245");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1245");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1225ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1246
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246");
            this.Manager.Comment("reaching state \'S1246\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp152;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp152);
            this.Manager.AddReturn(ReadConfigInfo, null, temp152);
            this.Manager.Comment("reaching state \'S1247\'");
            int temp169 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246ReadConfigChecker3)));
            if ((temp169 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label111;
            }
            if ((temp169 == 1)) {
                this.Manager.Comment("reaching state \'S1248\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1249\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1250\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp153;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp154;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,Create" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp153, out temp154);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp153, temp154);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1251();
                goto label111;
            }
            if ((temp169 == 2)) {
                this.Manager.Comment("reaching state \'S1267\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1268\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1269\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp162;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp163;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp162, out temp163);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp162, temp163);
                this.Manager.Comment("reaching state \'S1270\'");
                int temp168 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246RequestOplockAndOperateFileRequestChecker3)));
                if ((temp168 == 0)) {
                    this.Manager.Comment("reaching state \'S1271\'");
                    int temp166 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker5)));
                    if ((temp166 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1272();
                        goto label108;
                    }
                    if ((temp166 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1272();
                        goto label108;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S1275\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1276\'");
                    int temp165 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker12)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker13)));
                    if ((temp165 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS48();
                        goto label107;
                    }
                    if ((temp165 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS49();
                        goto label107;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker12)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker13)));
                label107:
;
                label108:
;
                    goto label110;
                }
                if ((temp168 == 1)) {
                    this.Manager.Comment("reaching state \'S1277\'");
                    int temp167 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker7)));
                    if ((temp167 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1278();
                        goto label109;
                    }
                    if ((temp167 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1278();
                        goto label109;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S1281\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1282\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker15))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker15)));
                    }
                label109:
;
                    goto label110;
                }
                throw new InvalidOperationException("never reached");
            label110:
;
                goto label111;
            }
            if ((temp169 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label111;
            }
            throw new InvalidOperationException("never reached");
        label111:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1247");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1247");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1251() {
            this.Manager.Comment("reaching state \'S1251\'");
            int temp161 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246RequestOplockAndOperateFileRequestChecker1)));
            if ((temp161 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1252();
                goto label105;
            }
            if ((temp161 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1261();
                goto label105;
            }
            throw new InvalidOperationException("never reached");
        label105:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1251");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1252() {
            this.Manager.Comment("reaching state \'S1252\'");
            int temp157 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker1)));
            if ((temp157 == 0)) {
                this.Manager.Comment("reaching state \'S1253\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                this.Manager.Comment("reaching state \'S1254\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S1255\'");
                int temp155 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker1)));
                if ((temp155 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                    goto label99;
                }
                if ((temp155 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                    goto label99;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker1)));
            label99:
;
                goto label101;
            }
            if ((temp157 == 1)) {
                this.Manager.Comment("reaching state \'S1258\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S1259\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S1260\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker2))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS166();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker2)));
                }
                goto label101;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1256\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1257\'");
            int temp156 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker4)));
            if ((temp156 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS632();
                goto label100;
            }
            if ((temp156 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS633();
                goto label100;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker4)));
        label100:
;
        label101:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1255");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594() {
            this.Manager.Comment("reaching state \'S594\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1255");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1260");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1260");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS166() {
            this.Manager.Comment("reaching state \'S166\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1257");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS632() {
            this.Manager.Comment("reaching state \'S632\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1257");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS633() {
            this.Manager.Comment("reaching state \'S633\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1251");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1261() {
            this.Manager.Comment("reaching state \'S1261\'");
            int temp160 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker3)));
            if ((temp160 == 0)) {
                this.Manager.Comment("reaching state \'S1262\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S1263\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S1264\'");
                int temp158 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker6)));
                if ((temp158 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161();
                    goto label102;
                }
                if ((temp158 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161();
                    goto label102;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker6)));
            label102:
;
                goto label104;
            }
            if ((temp160 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS718();
                goto label104;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1265\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1266\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker9))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker9)));
            }
        label104:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161() {
            this.Manager.Comment("reaching state \'S161\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1264");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS718() {
            this.Manager.Comment("reaching state \'S718\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S719\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S720\'");
            int temp159 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker8)));
            if ((temp159 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161();
                goto label103;
            }
            if ((temp159 == 1)) {
                this.Manager.Comment("reaching state \'S721\'");
                goto label103;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker8)));
        label103:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S720");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S720");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S720");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S720");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S720");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S720");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1266");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1266");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1266");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1247");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1270");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1271");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1272() {
            this.Manager.Comment("reaching state \'S1272\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S1273\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1274\'");
            int temp164 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker11)));
            if ((temp164 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label106;
            }
            if ((temp164 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label106;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker11)));
        label106:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1274");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1274");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1271");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S1276");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1276");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S1276");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1276");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1276");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1270");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1277");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1278() {
            this.Manager.Comment("reaching state \'S1278\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S1279\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1280\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker14))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker14)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1280");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1277");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246OplockBreakResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S1282");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1282");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1282");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1246ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1247");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1283
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283");
            this.Manager.Comment("reaching state \'S1283\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp170;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp170);
            this.Manager.AddReturn(ReadConfigInfo, null, temp170);
            this.Manager.Comment("reaching state \'S1284\'");
            int temp181 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283ReadConfigChecker3)));
            if ((temp181 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label118;
            }
            if ((temp181 == 1)) {
                this.Manager.Comment("reaching state \'S1285\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1286\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1287\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp171;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp172;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,WriteFrom" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp171, out temp172);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp171, temp172);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1288();
                goto label118;
            }
            if ((temp181 == 2)) {
                this.Manager.Comment("reaching state \'S1289\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1290\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1291\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp174;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp175;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp174, out temp175);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp174, temp175);
                this.Manager.Comment("reaching state \'S1292\'");
                int temp180 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283RequestOplockAndOperateFileRequestChecker3)));
                if ((temp180 == 0)) {
                    this.Manager.Comment("reaching state \'S1293\'");
                    int temp178 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakNotificationChecker1)));
                    if ((temp178 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1294();
                        goto label115;
                    }
                    if ((temp178 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1294();
                        goto label115;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S1298\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1299\'");
                    int temp177 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker4)));
                    if ((temp177 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS48();
                        goto label114;
                    }
                    if ((temp177 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS49();
                        goto label114;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker4)));
                label114:
;
                label115:
;
                    goto label117;
                }
                if ((temp180 == 1)) {
                    this.Manager.Comment("reaching state \'S1300\'");
                    int temp179 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakNotificationChecker3)));
                    if ((temp179 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS136();
                        goto label116;
                    }
                    if ((temp179 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS38();
                        goto label116;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S1301\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1302\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS35();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker5)));
                    }
                label116:
;
                    goto label117;
                }
                throw new InvalidOperationException("never reached");
            label117:
;
                goto label118;
            }
            if ((temp181 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label118;
            }
            throw new InvalidOperationException("never reached");
        label118:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1284");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1284");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1288() {
            this.Manager.Comment("reaching state \'S1288\'");
            int temp173 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283RequestOplockAndOperateFileRequestChecker1)));
            if ((temp173 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1252();
                goto label112;
            }
            if ((temp173 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1261();
                goto label112;
            }
            throw new InvalidOperationException("never reached");
        label112:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1288");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1288");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1284");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1292");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1292");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1294() {
            this.Manager.Comment("reaching state \'S1294\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S1295\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1296\'");
            int temp176 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker2)));
            if ((temp176 == 0)) {
                this.Manager.Comment("reaching state \'S1297\'");
                goto label113;
            }
            if ((temp176 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label113;
            }
            if ((temp176 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS45();
                goto label113;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker2)));
        label113:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1296");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1296");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1296");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1296");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1296");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1296");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1296");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1296");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1296");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1299");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1299");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1299");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1299");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1299");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1299");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1292");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1292");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1300");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1300");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1302");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1302");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1302");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1283ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1284");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1303
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303");
            this.Manager.Comment("reaching state \'S1303\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp182;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp182);
            this.Manager.AddReturn(ReadConfigInfo, null, temp182);
            this.Manager.Comment("reaching state \'S1304\'");
            int temp192 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303ReadConfigChecker3)));
            if ((temp192 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label124;
            }
            if ((temp192 == 1)) {
                this.Manager.Comment("reaching state \'S1305\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1306\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1307\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp183;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp184;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,WriteF" +
                        "romAnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp183, out temp184);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp183, temp184);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1251();
                goto label124;
            }
            if ((temp192 == 2)) {
                this.Manager.Comment("reaching state \'S1308\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1309\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1310\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp185;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp186;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp185, out temp186);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp185, temp186);
                this.Manager.Comment("reaching state \'S1311\'");
                int temp191 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303RequestOplockAndOperateFileRequestChecker1)));
                if ((temp191 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1312();
                    goto label123;
                }
                if ((temp191 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS464();
                    goto label123;
                }
                throw new InvalidOperationException("never reached");
            label123:
;
                goto label124;
            }
            if ((temp192 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label124;
            }
            throw new InvalidOperationException("never reached");
        label124:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1304");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1304");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1304");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1311");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1311");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1312() {
            this.Manager.Comment("reaching state \'S1312\'");
            int temp189 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakNotificationChecker1)));
            if ((temp189 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1313();
                goto label121;
            }
            if ((temp189 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1313();
                goto label121;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S1316\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1317\'");
            int temp188 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker3)));
            if ((temp188 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS462();
                goto label120;
            }
            if ((temp188 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS463();
                goto label120;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker3)));
        label120:
;
        label121:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1312");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1313() {
            this.Manager.Comment("reaching state \'S1313\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S1314\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1315\'");
            int temp187 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker1)));
            if ((temp187 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label119;
            }
            if ((temp187 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label119;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker1)));
        label119:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1315");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1315");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1315");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458() {
            this.Manager.Comment("reaching state \'S458\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1315");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1315");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1315");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1312");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1317");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1317");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1317");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS462() {
            this.Manager.Comment("reaching state \'S462\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1317");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1317");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1317");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS463() {
            this.Manager.Comment("reaching state \'S463\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1311");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1311");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS464() {
            this.Manager.Comment("reaching state \'S464\'");
            int temp190 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakNotificationChecker3)));
            if ((temp190 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS468();
                goto label122;
            }
            if ((temp190 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS468();
                goto label122;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S465\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S466\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker5))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker5)));
            }
        label122:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS468() {
            this.Manager.Comment("reaching state \'S468\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S469\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S470\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker4))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS471();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker4)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S470");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S470");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS471() {
            this.Manager.Comment("reaching state \'S471\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S466");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S466");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S466");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467() {
            this.Manager.Comment("reaching state \'S467\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1303ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1304");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1318
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318");
            this.Manager.Comment("reaching state \'S1318\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp193;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp193);
            this.Manager.AddReturn(ReadConfigInfo, null, temp193);
            this.Manager.Comment("reaching state \'S1319\'");
            int temp203 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318ReadConfigChecker3)));
            if ((temp203 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label130;
            }
            if ((temp203 == 1)) {
                this.Manager.Comment("reaching state \'S1320\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1321\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1322\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp194;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp195;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,Create" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp194, out temp195);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp194, temp195);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1323();
                goto label130;
            }
            if ((temp203 == 2)) {
                this.Manager.Comment("reaching state \'S1324\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1325\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1326\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp199;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp200;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,Create" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp199, out temp200);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp199, temp200);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1327();
                goto label130;
            }
            if ((temp203 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label130;
            }
            throw new InvalidOperationException("never reached");
        label130:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1323() {
            this.Manager.Comment("reaching state \'S1323\'");
            int temp198 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318RequestOplockAndOperateFileRequestChecker1)));
            if ((temp198 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS61();
                goto label127;
            }
            if ((temp198 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS816();
                goto label127;
            }
            throw new InvalidOperationException("never reached");
        label127:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1323");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1323");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS816() {
            this.Manager.Comment("reaching state \'S816\'");
            int temp197 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakNotificationChecker1)));
            if ((temp197 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS817();
                goto label126;
            }
            if ((temp197 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS817();
                goto label126;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S821\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S822\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker2))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker2)));
            }
        label126:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S816");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS817() {
            this.Manager.Comment("reaching state \'S817\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S818\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S819\'");
            int temp196 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker1)));
            if ((temp196 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58();
                goto label125;
            }
            if ((temp196 == 1)) {
                this.Manager.Comment("reaching state \'S820\'");
                goto label125;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker1)));
        label125:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S819");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S819");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S819");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S819");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S819");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S819");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S816");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S822");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S822");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S822");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1327() {
            this.Manager.Comment("reaching state \'S1327\'");
            int temp202 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318RequestOplockAndOperateFileRequestChecker3)));
            if ((temp202 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1312();
                goto label129;
            }
            if ((temp202 == 1)) {
                this.Manager.Comment("reaching state \'S1328\'");
                int temp201 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakNotificationChecker3)));
                if ((temp201 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS468();
                    goto label128;
                }
                if ((temp201 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS468();
                    goto label128;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                this.Manager.Comment("reaching state \'S1329\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S1330\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker3))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker3)));
                }
            label128:
;
                goto label129;
            }
            throw new InvalidOperationException("never reached");
        label129:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1327");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1327");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1327");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1327");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1330");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1318ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1331
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331");
            this.Manager.Comment("reaching state \'S1331\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp204;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp204);
            this.Manager.AddReturn(ReadConfigInfo, null, temp204);
            this.Manager.Comment("reaching state \'S1332\'");
            int temp215 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331ReadConfigChecker3)));
            if ((temp215 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label137;
            }
            if ((temp215 == 1)) {
                this.Manager.Comment("reaching state \'S1333\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1334\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1335\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp205;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp206;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,WriteFrom" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp205, out temp206);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp205, temp206);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS53();
                goto label137;
            }
            if ((temp215 == 2)) {
                this.Manager.Comment("reaching state \'S1336\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1337\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1338\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp207;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp208;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,WriteFrom" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp207, out temp208);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp207, temp208);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1339();
                goto label137;
            }
            if ((temp215 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label137;
            }
            throw new InvalidOperationException("never reached");
        label137:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1332");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1332");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1332");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1339() {
            this.Manager.Comment("reaching state \'S1339\'");
            int temp214 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331RequestOplockAndOperateFileRequestChecker1)));
            if ((temp214 == 0)) {
                this.Manager.Comment("reaching state \'S1340\'");
                int temp211 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakNotificationChecker1)));
                if ((temp211 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1341();
                    goto label133;
                }
                if ((temp211 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1341();
                    goto label133;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S1344\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S1345\'");
                int temp210 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker5)));
                if ((temp210 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS462();
                    goto label132;
                }
                if ((temp210 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS463();
                    goto label132;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker5)));
            label132:
;
            label133:
;
                goto label136;
            }
            if ((temp214 == 1)) {
                this.Manager.Comment("reaching state \'S1346\'");
                int temp213 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakNotificationChecker3)));
                if ((temp213 == 0)) {
                    this.Manager.Comment("reaching state \'S1347\'");
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S1348\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1349\'");
                    int temp212 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker7)));
                    if ((temp212 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467();
                        goto label134;
                    }
                    if ((temp212 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467();
                        goto label134;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker7)));
                label134:
;
                    goto label135;
                }
                if ((temp213 == 1)) {
                    this.Manager.Comment("reaching state \'S1352\'");
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S1353\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1354\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker8))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS471();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker8)));
                    }
                    goto label135;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S1350\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S1351\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker9))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker9)));
                }
            label135:
;
                goto label136;
            }
            throw new InvalidOperationException("never reached");
        label136:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1339");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1339");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1341() {
            this.Manager.Comment("reaching state \'S1341\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1342\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1343\'");
            int temp209 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker3)));
            if ((temp209 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label131;
            }
            if ((temp209 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label131;
            }
            if ((temp209 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label131;
            }
            if ((temp209 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label131;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker3)));
        label131:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1343");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1343");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1343");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1343");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1343");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1343");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1345");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1345");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1345");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1345");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1345");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1345");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1339");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1339");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1346");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1349");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1349");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1349");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1346");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1354");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1354");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1354");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1351");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1331ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1332");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1355
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1355() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1355");
            this.Manager.Comment("reaching state \'S1355\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp216;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp216);
            this.Manager.AddReturn(ReadConfigInfo, null, temp216);
            this.Manager.Comment("reaching state \'S1356\'");
            int temp221 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1355ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1355ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1355ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1355ReadConfigChecker3)));
            if ((temp221 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label138;
            }
            if ((temp221 == 1)) {
                this.Manager.Comment("reaching state \'S1357\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1358\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1359\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp217;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp218;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,WriteF" +
                        "romAnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp217, out temp218);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp217, temp218);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1323();
                goto label138;
            }
            if ((temp221 == 2)) {
                this.Manager.Comment("reaching state \'S1360\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1361\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1362\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp219;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp220;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,WriteF" +
                        "romAnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp219, out temp220);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp219, temp220);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1327();
                goto label138;
            }
            if ((temp221 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label138;
            }
            throw new InvalidOperationException("never reached");
        label138:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1355ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1356");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1355ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1356");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1355ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1356");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1355ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1356");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1363
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363");
            this.Manager.Comment("reaching state \'S1363\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp222;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp222);
            this.Manager.AddReturn(ReadConfigInfo, null, temp222);
            this.Manager.Comment("reaching state \'S1364\'");
            int temp234 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363ReadConfigChecker3)));
            if ((temp234 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label146;
            }
            if ((temp234 == 1)) {
                this.Manager.Comment("reaching state \'S1365\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1366\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1367\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp223;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp224;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp223, out temp224);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp223, temp224);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS960();
                goto label146;
            }
            if ((temp234 == 2)) {
                this.Manager.Comment("reaching state \'S1368\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1369\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1370\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp231;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp232;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,Create" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp231, out temp232);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp231, temp232);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1371();
                goto label146;
            }
            if ((temp234 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label146;
            }
            throw new InvalidOperationException("never reached");
        label146:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1364");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1364");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS960() {
            this.Manager.Comment("reaching state \'S960\'");
            int temp230 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363RequestOplockAndOperateFileRequestChecker1)));
            if ((temp230 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS924();
                goto label144;
            }
            if ((temp230 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS933();
                goto label144;
            }
            throw new InvalidOperationException("never reached");
        label144:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S960");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS924() {
            this.Manager.Comment("reaching state \'S924\'");
            int temp227 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakNotificationChecker1)));
            if ((temp227 == 0)) {
                this.Manager.Comment("reaching state \'S925\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S926\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S927\'");
                int temp225 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker3)));
                if ((temp225 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                    goto label139;
                }
                if ((temp225 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                    goto label139;
                }
                if ((temp225 == 2)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                    goto label139;
                }
                if ((temp225 == 3)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                    goto label139;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker3)));
            label139:
;
                goto label141;
            }
            if ((temp227 == 1)) {
                this.Manager.Comment("reaching state \'S930\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S931\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S932\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker4))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS357();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker4)));
                }
                goto label141;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S928\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S929\'");
            int temp226 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker6)));
            if ((temp226 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS421();
                goto label140;
            }
            if ((temp226 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS422();
                goto label140;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker6)));
        label140:
;
        label141:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S924");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S927");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S927");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S927");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395() {
            this.Manager.Comment("reaching state \'S395\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S927");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S927");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S927");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S927");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S927");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S927");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S927");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S927");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S927");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S924");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S932");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S932");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S932");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS357() {
            this.Manager.Comment("reaching state \'S357\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S929");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S929");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S929");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS421() {
            this.Manager.Comment("reaching state \'S421\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S929");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S929");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S929");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS422() {
            this.Manager.Comment("reaching state \'S422\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S960");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S960");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS933() {
            this.Manager.Comment("reaching state \'S933\'");
            int temp229 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakNotificationChecker3)));
            if ((temp229 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS541();
                goto label143;
            }
            if ((temp229 == 1)) {
                this.Manager.Comment("reaching state \'S934\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S935\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S936\'");
                int temp228 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker9)));
                if ((temp228 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362();
                    goto label142;
                }
                if ((temp228 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362();
                    goto label142;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker9)));
            label142:
;
                goto label143;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S937\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S938\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker10))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker10)));
            }
        label143:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S933");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS541() {
            this.Manager.Comment("reaching state \'S541\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S542\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S543\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker7))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS402();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker7)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS402() {
            this.Manager.Comment("reaching state \'S402\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S933");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S936");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S936");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362() {
            this.Manager.Comment("reaching state \'S362\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S936");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S936");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S938");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S938");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S938");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1364");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1371() {
            this.Manager.Comment("reaching state \'S1371\'");
            int temp233 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363RequestOplockAndOperateFileRequestChecker3)));
            if ((temp233 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS30();
                goto label145;
            }
            if ((temp233 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS41();
                goto label145;
            }
            throw new InvalidOperationException("never reached");
        label145:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1371");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1371");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1363ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1364");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1372
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1372() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1372");
            this.Manager.Comment("reaching state \'S1372\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp235;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp235);
            this.Manager.AddReturn(ReadConfigInfo, null, temp235);
            this.Manager.Comment("reaching state \'S1373\'");
            int temp240 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1372ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1372ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1372ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1372ReadConfigChecker3)));
            if ((temp240 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label147;
            }
            if ((temp240 == 1)) {
                this.Manager.Comment("reaching state \'S1374\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOC" +
                        "K,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1375\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1376\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp236;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp237;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,WriteF" +
                        "romAnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp236, out temp237);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp236, temp237);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1174();
                goto label147;
            }
            if ((temp240 == 2)) {
                this.Manager.Comment("reaching state \'S1377\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1378\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1379\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp238;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp239;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,WriteFrom" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp238, out temp239);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp238, temp239);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS29();
                goto label147;
            }
            if ((temp240 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label147;
            }
            throw new InvalidOperationException("never reached");
        label147:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1372ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1373");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1372ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1373");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1372ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1373");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1372ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1373");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1380
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1380() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1380");
            this.Manager.Comment("reaching state \'S1380\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp241;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp241);
            this.Manager.AddReturn(ReadConfigInfo, null, temp241);
            this.Manager.Comment("reaching state \'S1381\'");
            int temp246 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1380ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1380ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1380ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1380ReadConfigChecker3)));
            if ((temp246 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label148;
            }
            if ((temp246 == 1)) {
                this.Manager.Comment("reaching state \'S1382\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1383\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1384\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp242;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp243;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp242, out temp243);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp242, temp243);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1288();
                goto label148;
            }
            if ((temp246 == 2)) {
                this.Manager.Comment("reaching state \'S1385\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1386\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1387\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp244;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp245;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,WriteF" +
                        "romAnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp244, out temp245);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp244, temp245);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1371();
                goto label148;
            }
            if ((temp246 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label148;
            }
            throw new InvalidOperationException("never reached");
        label148:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1380ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1381");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1380ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1381");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1380ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1381");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1380ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1381");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1388
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388");
            this.Manager.Comment("reaching state \'S1388\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp247;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp247);
            this.Manager.AddReturn(ReadConfigInfo, null, temp247);
            this.Manager.Comment("reaching state \'S1389\'");
            int temp257 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388ReadConfigChecker3)));
            if ((temp257 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label152;
            }
            if ((temp257 == 1)) {
                this.Manager.Comment("reaching state \'S1390\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1391\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1392\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp248;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp249;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp248, out temp249);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp248, temp249);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1339();
                goto label152;
            }
            if ((temp257 == 2)) {
                this.Manager.Comment("reaching state \'S1393\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1394\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1395\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp250;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp251;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,Create" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp250, out temp251);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp250, temp251);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS5();
                goto label152;
            }
            if ((temp257 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label152;
            }
            throw new InvalidOperationException("never reached");
        label152:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1389");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1389");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1389");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1389");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150() {
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                    "CK,NO_STYPE_CLUSTER_SOFS)\'");
            this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S152\'");
            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp252;
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp253;
            this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                    "therOpen,out _,out _)\'");
            this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp252, out temp253);
            this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp252, temp253);
            this.Manager.Comment("reaching state \'S153\'");
            int temp256 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388RequestOplockAndOperateFileRequestChecker1)));
            if ((temp256 == 0)) {
                this.Manager.Comment("reaching state \'S154\'");
                int temp254 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakNotificationChecker1)));
                if ((temp254 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS155();
                    goto label149;
                }
                if ((temp254 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS155();
                    goto label149;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                        "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S160\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker1))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker1)));
                }
            label149:
;
                goto label151;
            }
            if ((temp256 == 1)) {
                this.Manager.Comment("reaching state \'S162\'");
                int temp255 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakNotificationChecker3)));
                if ((temp255 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS163();
                    goto label150;
                }
                if ((temp255 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS163();
                    goto label150;
                }
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                        "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S168\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker3))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS169();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker3)));
                }
            label150:
;
                goto label151;
            }
            throw new InvalidOperationException("never reached");
        label151:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S153");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS155() {
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S157\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS158();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S157");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S157");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS158() {
            this.Manager.Comment("reaching state \'S158\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S153");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS163() {
            this.Manager.Comment("reaching state \'S163\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S164\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S165\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker2))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS166();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker2)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S165");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S165");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S165");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1388OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S168");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S168");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS169() {
            this.Manager.Comment("reaching state \'S169\'");
        }
        #endregion
        
        #region Test Starting in S1396
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396");
            this.Manager.Comment("reaching state \'S1396\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp258;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp258);
            this.Manager.AddReturn(ReadConfigInfo, null, temp258);
            this.Manager.Comment("reaching state \'S1397\'");
            int temp262 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396ReadConfigChecker3)));
            if ((temp262 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label154;
            }
            if ((temp262 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label154;
            }
            if ((temp262 == 2)) {
                this.Manager.Comment("reaching state \'S1398\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1399\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1400\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp259;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp260;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,WriteFrom" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp259, out temp260);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp259, temp260);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1401();
                goto label154;
            }
            if ((temp262 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label154;
            }
            throw new InvalidOperationException("never reached");
        label154:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1397");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1397");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1397");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1401() {
            this.Manager.Comment("reaching state \'S1401\'");
            int temp261 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396RequestOplockAndOperateFileRequestChecker1)));
            if ((temp261 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS15();
                goto label153;
            }
            if ((temp261 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS6();
                goto label153;
            }
            throw new InvalidOperationException("never reached");
        label153:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1401");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1401");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1401");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1401");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1396ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1397");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S1402
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1402() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1402");
            this.Manager.Comment("reaching state \'S1402\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp263;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp263);
            this.Manager.AddReturn(ReadConfigInfo, null, temp263);
            this.Manager.Comment("reaching state \'S1403\'");
            int temp266 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1402ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1402ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1402ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1402ReadConfigChecker3)));
            if ((temp266 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label155;
            }
            if ((temp266 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label155;
            }
            if ((temp266 == 2)) {
                this.Manager.Comment("reaching state \'S1404\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1405\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1406\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp264;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp265;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp264, out temp265);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp264, temp265);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1401();
                goto label155;
            }
            if ((temp266 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label155;
            }
            throw new InvalidOperationException("never reached");
        label155:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1402ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1403");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1402ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1403");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1402ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1403");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1402ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1403");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S1407
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407");
            this.Manager.Comment("reaching state \'S1407\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp267;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp267);
            this.Manager.AddReturn(ReadConfigInfo, null, temp267);
            this.Manager.Comment("reaching state \'S1408\'");
            int temp277 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407ReadConfigChecker3)));
            if ((temp277 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label163;
            }
            if ((temp277 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label163;
            }
            if ((temp277 == 2)) {
                this.Manager.Comment("reaching state \'S1409\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1410\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1411\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp268;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp269;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp268, out temp269);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp268, temp269);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS408();
                goto label163;
            }
            if ((temp277 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label163;
            }
            throw new InvalidOperationException("never reached");
        label163:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1408");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1408");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1408");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS408() {
            this.Manager.Comment("reaching state \'S408\'");
            int temp276 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407RequestOplockAndOperateFileRequestChecker1)));
            if ((temp276 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS370();
                goto label162;
            }
            if ((temp276 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS376();
                goto label162;
            }
            throw new InvalidOperationException("never reached");
        label162:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S408");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S408");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS370() {
            this.Manager.Comment("reaching state \'S370\'");
            int temp273 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakNotificationChecker1)));
            if ((temp273 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS321();
                goto label159;
            }
            if ((temp273 == 1)) {
                this.Manager.Comment("reaching state \'S371\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                this.Manager.Comment("reaching state \'S372\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S373\'");
                int temp271 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker5)));
                if ((temp271 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                    goto label157;
                }
                if ((temp271 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                    goto label157;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker5)));
            label157:
;
                goto label159;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S374\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S375\'");
            int temp272 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker7)));
            if ((temp272 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS224();
                goto label158;
            }
            if ((temp272 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS225();
                goto label158;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker7)));
        label158:
;
        label159:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS321() {
            this.Manager.Comment("reaching state \'S321\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S322\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S323\'");
            int temp270 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker3)));
            if ((temp270 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                goto label156;
            }
            if ((temp270 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                goto label156;
            }
            if ((temp270 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                goto label156;
            }
            if ((temp270 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                goto label156;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker3)));
        label156:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108() {
            this.Manager.Comment("reaching state \'S108\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S323");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S323");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S373");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S373");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S373");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S373");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S375");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S375");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S375");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS224() {
            this.Manager.Comment("reaching state \'S224\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S375");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S375");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S375");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS225() {
            this.Manager.Comment("reaching state \'S225\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S408");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S408");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS376() {
            this.Manager.Comment("reaching state \'S376\'");
            int temp275 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakNotificationChecker3)));
            if ((temp275 == 0)) {
                this.Manager.Comment("reaching state \'S377\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S378\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S379\'");
                int temp274 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker9)));
                if ((temp274 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100();
                    goto label160;
                }
                if ((temp274 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100();
                    goto label160;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker9)));
            label160:
;
                goto label161;
            }
            if ((temp275 == 1)) {
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                        "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                this.Manager.Comment("reaching state \'S384\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker10))) != -1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS182();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker10)));
                }
                goto label161;
            }
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S380\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S381\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker11))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker11)));
            }
        label161:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S376");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S379");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S379");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100() {
            this.Manager.Comment("reaching state \'S100\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S379");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S379");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S376");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S384");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S384");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S384");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS182() {
            this.Manager.Comment("reaching state \'S182\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S381");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S381");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S381");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1407ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1408");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S1412
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1412() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1412");
            this.Manager.Comment("reaching state \'S1412\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp278;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp278);
            this.Manager.AddReturn(ReadConfigInfo, null, temp278);
            this.Manager.Comment("reaching state \'S1413\'");
            int temp281 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1412ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1412ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1412ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1412ReadConfigChecker3)));
            if ((temp281 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label164;
            }
            if ((temp281 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label164;
            }
            if ((temp281 == 2)) {
                this.Manager.Comment("reaching state \'S1414\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1415\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1416\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp279;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp280;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp279, out temp280);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp279, temp280);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1119();
                goto label164;
            }
            if ((temp281 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label164;
            }
            throw new InvalidOperationException("never reached");
        label164:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1412ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1413");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1412ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1413");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1412ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1413");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1412ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1413");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S170
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170");
            this.Manager.Comment("reaching state \'S170\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp282;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp282);
            this.Manager.AddReturn(ReadConfigInfo, null, temp282);
            this.Manager.Comment("reaching state \'S171\'");
            int temp293 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170ReadConfigChecker3)));
            if ((temp293 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label171;
            }
            if ((temp293 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label171;
            }
            if ((temp293 == 2)) {
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S174\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp283;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp284;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp283, out temp284);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp283, temp284);
                this.Manager.Comment("reaching state \'S175\'");
                int temp287 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170RequestOplockAndOperateFileRequestChecker1)));
                if ((temp287 == 0)) {
                    this.Manager.Comment("reaching state \'S176\'");
                    int temp285 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker1)));
                    if ((temp285 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS179();
                        goto label165;
                    }
                    if ((temp285 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS179();
                        goto label165;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S177\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S178\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker1)));
                    }
                label165:
;
                    goto label167;
                }
                if ((temp287 == 1)) {
                    this.Manager.Comment("reaching state \'S183\'");
                    int temp286 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker3)));
                    if ((temp286 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS184();
                        goto label166;
                    }
                    if ((temp286 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS184();
                        goto label166;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S188\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S189\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker3))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS111();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker3)));
                    }
                label166:
;
                    goto label167;
                }
                throw new InvalidOperationException("never reached");
            label167:
;
                goto label171;
            }
            if ((temp293 == 3)) {
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S191\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S192\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp288;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp289;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp288, out temp289);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp288, temp289);
                this.Manager.Comment("reaching state \'S193\'");
                int temp292 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170RequestOplockAndOperateFileRequestChecker3)));
                if ((temp292 == 0)) {
                    this.Manager.Comment("reaching state \'S194\'");
                    int temp290 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker5)));
                    if ((temp290 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS195();
                        goto label168;
                    }
                    if ((temp290 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS195();
                        goto label168;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S198\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S199\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker5)));
                    }
                label168:
;
                    goto label170;
                }
                if ((temp292 == 1)) {
                    this.Manager.Comment("reaching state \'S200\'");
                    int temp291 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker7)));
                    if ((temp291 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS201();
                        goto label169;
                    }
                    if ((temp291 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS201();
                        goto label169;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S204\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S205\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker7))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS130();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker7)));
                    }
                label169:
;
                    goto label170;
                }
                throw new InvalidOperationException("never reached");
            label170:
;
                goto label171;
            }
            throw new InvalidOperationException("never reached");
        label171:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S171");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S171");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S171");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S175");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS179() {
            this.Manager.Comment("reaching state \'S179\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S180\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S181\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS182();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S181");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S181");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S178");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S178");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S175");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S183");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS184() {
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S186\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker2))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS187();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker2)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S186");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S186");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S186");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS187() {
            this.Manager.Comment("reaching state \'S187\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S183");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S189");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S189");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS111() {
            this.Manager.Comment("reaching state \'S111\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S171");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S193");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S193");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS195() {
            this.Manager.Comment("reaching state \'S195\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S196\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S197\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker4))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS120();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker4)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S197");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S197");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S199");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S199");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S199");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S193");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S193");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS201() {
            this.Manager.Comment("reaching state \'S201\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S202\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S203\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker6))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS127();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker6)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S203");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S203");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS170OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S205");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S205");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S205");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S206
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206");
            this.Manager.Comment("reaching state \'S206\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp294;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp294);
            this.Manager.AddReturn(ReadConfigInfo, null, temp294);
            this.Manager.Comment("reaching state \'S207\'");
            int temp308 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206ReadConfigChecker3)));
            if ((temp308 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label181;
            }
            if ((temp308 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label181;
            }
            if ((temp308 == 2)) {
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S210\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp295;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp296;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp295, out temp296);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp295, temp296);
                this.Manager.Comment("reaching state \'S211\'");
                int temp300 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206RequestOplockAndOperateFileRequestChecker1)));
                if ((temp300 == 0)) {
                    this.Manager.Comment("reaching state \'S212\'");
                    int temp297 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker1)));
                    if ((temp297 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS213();
                        goto label172;
                    }
                    if ((temp297 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS213();
                        goto label172;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S216\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S217\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker1)));
                    }
                label172:
;
                    goto label175;
                }
                if ((temp300 == 1)) {
                    this.Manager.Comment("reaching state \'S218\'");
                    int temp299 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker3)));
                    if ((temp299 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS219();
                        goto label174;
                    }
                    if ((temp299 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS219();
                        goto label174;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S222\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S223\'");
                    int temp298 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker4)));
                    if ((temp298 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS224();
                        goto label173;
                    }
                    if ((temp298 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS225();
                        goto label173;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker4)));
                label173:
;
                label174:
;
                    goto label175;
                }
                throw new InvalidOperationException("never reached");
            label175:
;
                goto label181;
            }
            if ((temp308 == 3)) {
                this.Manager.Comment("reaching state \'S226\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S228\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp301;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp302;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp301, out temp302);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp301, temp302);
                this.Manager.Comment("reaching state \'S229\'");
                int temp307 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206RequestOplockAndOperateFileRequestChecker3)));
                if ((temp307 == 0)) {
                    this.Manager.Comment("reaching state \'S230\'");
                    int temp303 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker5)));
                    if ((temp303 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS231();
                        goto label176;
                    }
                    if ((temp303 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS231();
                        goto label176;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S234\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S235\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker6))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker6)));
                    }
                label176:
;
                    goto label180;
                }
                if ((temp307 == 1)) {
                    this.Manager.Comment("reaching state \'S236\'");
                    int temp306 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker7)));
                    if ((temp306 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS237();
                        goto label179;
                    }
                    if ((temp306 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS237();
                        goto label179;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S240\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S241\'");
                    int temp305 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker9)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker10)));
                    if ((temp305 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS81();
                        goto label178;
                    }
                    if ((temp305 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS82();
                        goto label178;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker9)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker10)));
                label178:
;
                label179:
;
                    goto label180;
                }
                throw new InvalidOperationException("never reached");
            label180:
;
                goto label181;
            }
            throw new InvalidOperationException("never reached");
        label181:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S207");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S207");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S207");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S211");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S211");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS213() {
            this.Manager.Comment("reaching state \'S213\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S214\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S215\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS182();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S215");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S217");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S217");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S217");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S211");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S211");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S218");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS219() {
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S220\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S221\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker2))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS187();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker2)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S221");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S221");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S218");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S223");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S223");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S223");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S223");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S223");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S223");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S207");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S229");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S230");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS231() {
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S232\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S233\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker5))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS120();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker5)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S233");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S233");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S230");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S235");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S235");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S235");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S229");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S236");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS237() {
            this.Manager.Comment("reaching state \'S237\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S238\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S239\'");
            int temp304 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker8)));
            if ((temp304 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label177;
            }
            if ((temp304 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label177;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker8)));
        label177:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S239");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S239");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S239");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S239");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S239");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S239");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S236");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S241");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S241");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S241");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS206OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S241");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S241");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S241");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S242
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242");
            this.Manager.Comment("reaching state \'S242\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp309;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp309);
            this.Manager.AddReturn(ReadConfigInfo, null, temp309);
            this.Manager.Comment("reaching state \'S243\'");
            int temp324 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242ReadConfigChecker3)));
            if ((temp324 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label192;
            }
            if ((temp324 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label192;
            }
            if ((temp324 == 2)) {
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S246\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp310;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp311;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp310, out temp311);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp310, temp311);
                this.Manager.Comment("reaching state \'S247\'");
                int temp316 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242RequestOplockAndOperateFileRequestChecker1)));
                if ((temp316 == 0)) {
                    this.Manager.Comment("reaching state \'S248\'");
                    int temp312 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker1)));
                    if ((temp312 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS249();
                        goto label182;
                    }
                    if ((temp312 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS249();
                        goto label182;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S252\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S253\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker1)));
                    }
                label182:
;
                    goto label186;
                }
                if ((temp316 == 1)) {
                    this.Manager.Comment("reaching state \'S254\'");
                    int temp315 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker3)));
                    if ((temp315 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS255();
                        goto label185;
                    }
                    if ((temp315 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS255();
                        goto label185;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S258\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S259\'");
                    int temp314 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker5)));
                    if ((temp314 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS224();
                        goto label184;
                    }
                    if ((temp314 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS225();
                        goto label184;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker5)));
                label184:
;
                label185:
;
                    goto label186;
                }
                throw new InvalidOperationException("never reached");
            label186:
;
                goto label192;
            }
            if ((temp324 == 3)) {
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S262\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp317;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp318;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp317, out temp318);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp317, temp318);
                this.Manager.Comment("reaching state \'S263\'");
                int temp323 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242RequestOplockAndOperateFileRequestChecker3)));
                if ((temp323 == 0)) {
                    this.Manager.Comment("reaching state \'S264\'");
                    int temp319 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker5)));
                    if ((temp319 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS265();
                        goto label187;
                    }
                    if ((temp319 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS265();
                        goto label187;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S268\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S269\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker7))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker7)));
                    }
                label187:
;
                    goto label191;
                }
                if ((temp323 == 1)) {
                    this.Manager.Comment("reaching state \'S270\'");
                    int temp322 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker7)));
                    if ((temp322 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS271();
                        goto label190;
                    }
                    if ((temp322 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS271();
                        goto label190;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S274\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S275\'");
                    int temp321 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker11)));
                    if ((temp321 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS81();
                        goto label189;
                    }
                    if ((temp321 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS82();
                        goto label189;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker11)));
                label189:
;
                label190:
;
                    goto label191;
                }
                throw new InvalidOperationException("never reached");
            label191:
;
                goto label192;
            }
            throw new InvalidOperationException("never reached");
        label192:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S243");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S243");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S243");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S247");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS249() {
            this.Manager.Comment("reaching state \'S249\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S250\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S251\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS182();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S247");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S254");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS255() {
            this.Manager.Comment("reaching state \'S255\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S256\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S257\'");
            int temp313 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker3)));
            if ((temp313 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                goto label183;
            }
            if ((temp313 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                goto label183;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker3)));
        label183:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S257");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S257");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S254");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S259");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S259");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S259");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S259");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S243");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S263");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S263");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS265() {
            this.Manager.Comment("reaching state \'S265\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S266\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S267\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker6))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS120();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker6)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S269");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S269");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S269");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S263");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S263");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS271() {
            this.Manager.Comment("reaching state \'S271\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S272\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S273\'");
            int temp320 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker9)));
            if ((temp320 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label188;
            }
            if ((temp320 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label188;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker9)));
        label188:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S273");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S273");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S273");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S273");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S273");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S273");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S275");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S275");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S275");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS242OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S275");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S275");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S275");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S276
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276");
            this.Manager.Comment("reaching state \'S276\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp325;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp325);
            this.Manager.AddReturn(ReadConfigInfo, null, temp325);
            this.Manager.Comment("reaching state \'S277\'");
            int temp340 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276ReadConfigChecker3)));
            if ((temp340 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label203;
            }
            if ((temp340 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label203;
            }
            if ((temp340 == 2)) {
                this.Manager.Comment("reaching state \'S278\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S279\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S280\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp326;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp327;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp326, out temp327);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp326, temp327);
                this.Manager.Comment("reaching state \'S281\'");
                int temp332 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276RequestOplockAndOperateFileRequestChecker1)));
                if ((temp332 == 0)) {
                    this.Manager.Comment("reaching state \'S282\'");
                    int temp328 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker1)));
                    if ((temp328 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS283();
                        goto label193;
                    }
                    if ((temp328 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS283();
                        goto label193;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S286\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S287\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker1)));
                    }
                label193:
;
                    goto label197;
                }
                if ((temp332 == 1)) {
                    this.Manager.Comment("reaching state \'S288\'");
                    int temp331 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker3)));
                    if ((temp331 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS289();
                        goto label196;
                    }
                    if ((temp331 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS289();
                        goto label196;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S293\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S294\'");
                    int temp330 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker6)));
                    if ((temp330 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS224();
                        goto label195;
                    }
                    if ((temp330 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS225();
                        goto label195;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker6)));
                label195:
;
                label196:
;
                    goto label197;
                }
                throw new InvalidOperationException("never reached");
            label197:
;
                goto label203;
            }
            if ((temp340 == 3)) {
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S297\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp333;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp334;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp333, out temp334);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp333, temp334);
                this.Manager.Comment("reaching state \'S298\'");
                int temp339 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276RequestOplockAndOperateFileRequestChecker3)));
                if ((temp339 == 0)) {
                    this.Manager.Comment("reaching state \'S299\'");
                    int temp335 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker5)));
                    if ((temp335 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS300();
                        goto label198;
                    }
                    if ((temp335 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS300();
                        goto label198;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S303\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S304\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker8))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker8)));
                    }
                label198:
;
                    goto label202;
                }
                if ((temp339 == 1)) {
                    this.Manager.Comment("reaching state \'S305\'");
                    int temp338 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker7)));
                    if ((temp338 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS306();
                        goto label201;
                    }
                    if ((temp338 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS306();
                        goto label201;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S309\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S310\'");
                    int temp337 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker11)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker12)));
                    if ((temp337 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS81();
                        goto label200;
                    }
                    if ((temp337 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS82();
                        goto label200;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker11)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker12)));
                label200:
;
                label201:
;
                    goto label202;
                }
                throw new InvalidOperationException("never reached");
            label202:
;
                goto label203;
            }
            throw new InvalidOperationException("never reached");
        label203:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S277");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S277");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S277");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S281");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S282");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS283() {
            this.Manager.Comment("reaching state \'S283\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S284\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S285\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S285");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S285");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S282");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S287");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S287");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S287");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S281");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS289() {
            this.Manager.Comment("reaching state \'S289\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S290\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S291\'");
            int temp329 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker4)));
            if ((temp329 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                goto label194;
            }
            if ((temp329 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                goto label194;
            }
            if ((temp329 == 2)) {
                this.Manager.Comment("reaching state \'S292\'");
                goto label194;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker4)));
        label194:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S291");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S291");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S291");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S291");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S291");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S291");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S291");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S291");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S291");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S294");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S294");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S294");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S294");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S294");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S294");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S277");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S298");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S298");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S299");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS300() {
            this.Manager.Comment("reaching state \'S300\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S301\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S302\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker7))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker7)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S302");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S302");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S302");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S299");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S304");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S298");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S298");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S305");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS306() {
            this.Manager.Comment("reaching state \'S306\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S307\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S308\'");
            int temp336 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker9)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker10)));
            if ((temp336 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label199;
            }
            if ((temp336 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label199;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker9)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker10)));
        label199:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S308");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S308");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S308");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S308");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S308");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S308");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S305");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S310");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S310");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S310");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS276OplockBreakResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S310");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S310");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S310");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S311
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311");
            this.Manager.Comment("reaching state \'S311\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp341;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp341);
            this.Manager.AddReturn(ReadConfigInfo, null, temp341);
            this.Manager.Comment("reaching state \'S312\'");
            int temp356 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311ReadConfigChecker3)));
            if ((temp356 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label214;
            }
            if ((temp356 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label214;
            }
            if ((temp356 == 2)) {
                this.Manager.Comment("reaching state \'S313\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S314\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S315\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp342;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp343;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp342, out temp343);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp342, temp343);
                this.Manager.Comment("reaching state \'S316\'");
                int temp347 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311RequestOplockAndOperateFileRequestChecker1)));
                if ((temp347 == 0)) {
                    this.Manager.Comment("reaching state \'S317\'");
                    int temp344 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker1)));
                    if ((temp344 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS179();
                        goto label204;
                    }
                    if ((temp344 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS179();
                        goto label204;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S318\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S319\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker)));
                    }
                label204:
;
                    goto label207;
                }
                if ((temp347 == 1)) {
                    this.Manager.Comment("reaching state \'S320\'");
                    int temp346 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker3)));
                    if ((temp346 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS321();
                        goto label206;
                    }
                    if ((temp346 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS321();
                        goto label206;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S324\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S325\'");
                    int temp345 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker2)));
                    if ((temp345 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS224();
                        goto label205;
                    }
                    if ((temp345 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS225();
                        goto label205;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker2)));
                label205:
;
                label206:
;
                    goto label207;
                }
                throw new InvalidOperationException("never reached");
            label207:
;
                goto label214;
            }
            if ((temp356 == 3)) {
                this.Manager.Comment("reaching state \'S326\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S327\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S328\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp348;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp349;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp348, out temp349);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp348, temp349);
                this.Manager.Comment("reaching state \'S329\'");
                int temp355 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311RequestOplockAndOperateFileRequestChecker3)));
                if ((temp355 == 0)) {
                    this.Manager.Comment("reaching state \'S330\'");
                    int temp351 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker5)));
                    if ((temp351 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS331();
                        goto label209;
                    }
                    if ((temp351 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS331();
                        goto label209;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S335\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S336\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker5)));
                    }
                label209:
;
                    goto label213;
                }
                if ((temp355 == 1)) {
                    this.Manager.Comment("reaching state \'S337\'");
                    int temp354 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker7)));
                    if ((temp354 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS338();
                        goto label212;
                    }
                    if ((temp354 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS338();
                        goto label212;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S342\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S343\'");
                    int temp353 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker9)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker10)));
                    if ((temp353 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS81();
                        goto label211;
                    }
                    if ((temp353 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS82();
                        goto label211;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker9)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker10)));
                label211:
;
                label212:
;
                    goto label213;
                }
                throw new InvalidOperationException("never reached");
            label213:
;
                goto label214;
            }
            throw new InvalidOperationException("never reached");
        label214:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S312");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S312");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S312");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S316");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S316");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S317");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S317");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S319");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S319");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S319");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S316");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S316");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S320");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S320");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S325");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S325");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S325");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S325");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S325");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S325");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S312");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S329");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S329");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS331() {
            this.Manager.Comment("reaching state \'S331\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S332\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S333\'");
            int temp350 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker4)));
            if ((temp350 == 0)) {
                this.Manager.Comment("reaching state \'S334\'");
                goto label208;
            }
            if ((temp350 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS87();
                goto label208;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker4)));
        label208:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S333");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S333");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S333");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S333");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S333");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S333");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S336");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S336");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S336");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S329");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S329");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S337");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS338() {
            this.Manager.Comment("reaching state \'S338\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S339\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S340\'");
            int temp352 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker8)));
            if ((temp352 == 0)) {
                this.Manager.Comment("reaching state \'S341\'");
                goto label210;
            }
            if ((temp352 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label210;
            }
            if ((temp352 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS78();
                goto label210;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker8)));
        label210:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S340");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S340");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S337");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S343");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S343");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS311OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S343");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S343");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S344
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344");
            this.Manager.Comment("reaching state \'S344\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp357;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp357);
            this.Manager.AddReturn(ReadConfigInfo, null, temp357);
            this.Manager.Comment("reaching state \'S345\'");
            int temp367 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344ReadConfigChecker3)));
            if ((temp367 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label220;
            }
            if ((temp367 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label220;
            }
            if ((temp367 == 2)) {
                this.Manager.Comment("reaching state \'S346\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S347\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S348\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp358;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp359;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp358, out temp359);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp358, temp359);
                this.Manager.Comment("reaching state \'S349\'");
                int temp363 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344RequestOplockAndOperateFileRequestChecker1)));
                if ((temp363 == 0)) {
                    this.Manager.Comment("reaching state \'S350\'");
                    int temp360 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakNotificationChecker1)));
                    if ((temp360 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS354();
                        goto label215;
                    }
                    if ((temp360 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS354();
                        goto label215;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S351\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S352\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS353();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker1)));
                    }
                label215:
;
                    goto label218;
                }
                if ((temp363 == 1)) {
                    this.Manager.Comment("reaching state \'S358\'");
                    int temp362 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakNotificationChecker3)));
                    if ((temp362 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS359();
                        goto label217;
                    }
                    if ((temp362 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS359();
                        goto label217;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S364\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S365\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker4))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker4)));
                    }
                label217:
;
                    goto label218;
                }
                throw new InvalidOperationException("never reached");
            label218:
;
                goto label220;
            }
            if ((temp367 == 3)) {
                this.Manager.Comment("reaching state \'S366\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S367\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S368\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp364;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp365;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,Create" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp364, out temp365);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp364, temp365);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS369();
                goto label220;
            }
            throw new InvalidOperationException("never reached");
        label220:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S345");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S345");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S345");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S349");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS354() {
            this.Manager.Comment("reaching state \'S354\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S355\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S356\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS357();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S356");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S356");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S356");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S352");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S352");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S352");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS353() {
            this.Manager.Comment("reaching state \'S353\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S349");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S358");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS359() {
            this.Manager.Comment("reaching state \'S359\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S360\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S361\'");
            int temp361 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker3)));
            if ((temp361 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362();
                goto label216;
            }
            if ((temp361 == 1)) {
                this.Manager.Comment("reaching state \'S363\'");
                goto label216;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker3)));
        label216:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S361");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S361");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S361");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S361");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S358");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S365");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S365");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S365");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S345");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS369() {
            this.Manager.Comment("reaching state \'S369\'");
            int temp366 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344RequestOplockAndOperateFileRequestChecker3)));
            if ((temp366 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS370();
                goto label219;
            }
            if ((temp366 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS376();
                goto label219;
            }
            throw new InvalidOperationException("never reached");
        label219:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S369");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S369");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS344RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S369");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S369");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S385
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385");
            this.Manager.Comment("reaching state \'S385\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp368;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp368);
            this.Manager.AddReturn(ReadConfigInfo, null, temp368);
            this.Manager.Comment("reaching state \'S386\'");
            int temp377 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385ReadConfigChecker3)));
            if ((temp377 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label225;
            }
            if ((temp377 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label225;
            }
            if ((temp377 == 2)) {
                this.Manager.Comment("reaching state \'S387\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S388\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S389\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp369;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp370;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp369, out temp370);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp369, temp370);
                this.Manager.Comment("reaching state \'S390\'");
                int temp374 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385RequestOplockAndOperateFileRequestChecker1)));
                if ((temp374 == 0)) {
                    this.Manager.Comment("reaching state \'S391\'");
                    int temp372 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakNotificationChecker1)));
                    if ((temp372 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS392();
                        goto label222;
                    }
                    if ((temp372 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS392();
                        goto label222;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S396\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S397\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker2))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS353();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker2)));
                    }
                label222:
;
                    goto label224;
                }
                if ((temp374 == 1)) {
                    this.Manager.Comment("reaching state \'S398\'");
                    int temp373 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakNotificationChecker3)));
                    if ((temp373 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS399();
                        goto label223;
                    }
                    if ((temp373 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS399();
                        goto label223;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S403\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S404\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker4))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker4)));
                    }
                label223:
;
                    goto label224;
                }
                throw new InvalidOperationException("never reached");
            label224:
;
                goto label225;
            }
            if ((temp377 == 3)) {
                this.Manager.Comment("reaching state \'S405\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S406\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S407\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp375;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp376;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,WriteFrom" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp375, out temp376);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp375, temp376);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS408();
                goto label225;
            }
            throw new InvalidOperationException("never reached");
        label225:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S386");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S386");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S386");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S390");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S390");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS392() {
            this.Manager.Comment("reaching state \'S392\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S393\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S394\'");
            int temp371 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker1)));
            if ((temp371 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                goto label221;
            }
            if ((temp371 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                goto label221;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker1)));
        label221:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S394");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S394");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S390");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S390");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S398");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS399() {
            this.Manager.Comment("reaching state \'S399\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S400\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S401\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker3))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS402();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker3)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S401");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S401");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S401");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S398");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S404");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S404");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S404");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS385ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S386");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S409
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409");
            this.Manager.Comment("reaching state \'S409\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp378;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp378);
            this.Manager.AddReturn(ReadConfigInfo, null, temp378);
            this.Manager.Comment("reaching state \'S410\'");
            int temp388 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409ReadConfigChecker3)));
            if ((temp388 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label231;
            }
            if ((temp388 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label231;
            }
            if ((temp388 == 2)) {
                this.Manager.Comment("reaching state \'S411\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S412\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S413\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp379;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp380;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp379, out temp380);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp379, temp380);
                this.Manager.Comment("reaching state \'S414\'");
                int temp385 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409RequestOplockAndOperateFileRequestChecker1)));
                if ((temp385 == 0)) {
                    this.Manager.Comment("reaching state \'S415\'");
                    int temp383 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakNotificationChecker1)));
                    if ((temp383 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS416();
                        goto label228;
                    }
                    if ((temp383 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS416();
                        goto label228;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S419\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S420\'");
                    int temp382 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker3)));
                    if ((temp382 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS421();
                        goto label227;
                    }
                    if ((temp382 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS422();
                        goto label227;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker3)));
                label227:
;
                label228:
;
                    goto label230;
                }
                if ((temp385 == 1)) {
                    this.Manager.Comment("reaching state \'S423\'");
                    int temp384 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakNotificationChecker3)));
                    if ((temp384 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS424();
                        goto label229;
                    }
                    if ((temp384 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS424();
                        goto label229;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S427\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S428\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker5)));
                    }
                label229:
;
                    goto label230;
                }
                throw new InvalidOperationException("never reached");
            label230:
;
                goto label231;
            }
            if ((temp388 == 3)) {
                this.Manager.Comment("reaching state \'S429\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S430\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S431\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp386;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp387;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,WriteF" +
                        "romAnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp386, out temp387);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp386, temp387);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS369();
                goto label231;
            }
            throw new InvalidOperationException("never reached");
        label231:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S410");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S410");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S410");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S414");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S414");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S415");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS416() {
            this.Manager.Comment("reaching state \'S416\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S417\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S418\'");
            int temp381 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker1)));
            if ((temp381 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                goto label226;
            }
            if ((temp381 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                goto label226;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker1)));
        label226:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S418");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S418");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S418");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S418");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S418");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S418");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S415");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S420");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S420");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S414");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S414");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S423");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS424() {
            this.Manager.Comment("reaching state \'S424\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S425\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S426\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker4))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS402();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker4)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S426");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S423");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S428");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S428");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S428");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS409ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S410");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S432
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432");
            this.Manager.Comment("reaching state \'S432\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp389;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp389);
            this.Manager.AddReturn(ReadConfigInfo, null, temp389);
            this.Manager.Comment("reaching state \'S433\'");
            int temp403 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432ReadConfigChecker3)));
            if ((temp403 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label241;
            }
            if ((temp403 == 1)) {
                this.Manager.Comment("reaching state \'S434\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S435\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S436\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp390;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp391;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp390, out temp391);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp390, temp391);
                this.Manager.Comment("reaching state \'S437\'");
                int temp396 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432RequestOplockAndOperateFileRequestChecker1)));
                if ((temp396 == 0)) {
                    this.Manager.Comment("reaching state \'S438\'");
                    int temp394 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker1)));
                    if ((temp394 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS439();
                        goto label234;
                    }
                    if ((temp394 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS439();
                        goto label234;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S442\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S443\'");
                    int temp393 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker3)));
                    if ((temp393 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS421();
                        goto label233;
                    }
                    if ((temp393 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS422();
                        goto label233;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker3)));
                label233:
;
                label234:
;
                    goto label236;
                }
                if ((temp396 == 1)) {
                    this.Manager.Comment("reaching state \'S444\'");
                    int temp395 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker3)));
                    if ((temp395 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS445();
                        goto label235;
                    }
                    if ((temp395 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS445();
                        goto label235;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S448\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S449\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker5)));
                    }
                label235:
;
                    goto label236;
                }
                throw new InvalidOperationException("never reached");
            label236:
;
                goto label241;
            }
            if ((temp403 == 2)) {
                this.Manager.Comment("reaching state \'S450\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S451\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S452\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp397;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp398;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp397, out temp398);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp397, temp398);
                this.Manager.Comment("reaching state \'S453\'");
                int temp402 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432RequestOplockAndOperateFileRequestChecker3)));
                if ((temp402 == 0)) {
                    this.Manager.Comment("reaching state \'S454\'");
                    int temp401 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker5)));
                    if ((temp401 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS455();
                        goto label239;
                    }
                    if ((temp401 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS455();
                        goto label239;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S460\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S461\'");
                    int temp400 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker9)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker10)));
                    if ((temp400 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS462();
                        goto label238;
                    }
                    if ((temp400 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS463();
                        goto label238;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker9)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker10)));
                label238:
;
                label239:
;
                    goto label240;
                }
                if ((temp402 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS464();
                    goto label240;
                }
                throw new InvalidOperationException("never reached");
            label240:
;
                goto label241;
            }
            if ((temp403 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label241;
            }
            throw new InvalidOperationException("never reached");
        label241:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S433");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S433");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S437");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S437");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S438");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS439() {
            this.Manager.Comment("reaching state \'S439\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S440\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S441\'");
            int temp392 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker1)));
            if ((temp392 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                goto label232;
            }
            if ((temp392 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                goto label232;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker1)));
        label232:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S441");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S441");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S441");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S441");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S441");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S441");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S438");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S443");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S443");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S443");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S443");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S443");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S443");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S437");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S437");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S444");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS445() {
            this.Manager.Comment("reaching state \'S445\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S446\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S447\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker4))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS402();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker4)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S447");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S447");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S447");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S444");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S449");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S449");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S449");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S433");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S453");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S453");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S454");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS455() {
            this.Manager.Comment("reaching state \'S455\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S456\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S457\'");
            int temp399 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker8)));
            if ((temp399 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label237;
            }
            if ((temp399 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label237;
            }
            if ((temp399 == 2)) {
                this.Manager.Comment("reaching state \'S459\'");
                goto label237;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker8)));
        label237:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S457");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S457");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S457");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S457");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S457");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S457");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S457");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S457");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S457");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S454");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S461");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S461");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S453");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S453");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS432ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S433");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S492
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492");
            this.Manager.Comment("reaching state \'S492\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp404;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp404);
            this.Manager.AddReturn(ReadConfigInfo, null, temp404);
            this.Manager.Comment("reaching state \'S493\'");
            int temp417 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492ReadConfigChecker3)));
            if ((temp417 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label250;
            }
            if ((temp417 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label250;
            }
            if ((temp417 == 2)) {
                this.Manager.Comment("reaching state \'S494\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S495\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S496\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp405;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp406;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp405, out temp406);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp405, temp406);
                this.Manager.Comment("reaching state \'S497\'");
                int temp411 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492RequestOplockAndOperateFileRequestChecker1)));
                if ((temp411 == 0)) {
                    this.Manager.Comment("reaching state \'S498\'");
                    int temp409 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker1)));
                    if ((temp409 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS499();
                        goto label244;
                    }
                    if ((temp409 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS499();
                        goto label244;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S503\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S504\'");
                    int temp408 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker4)));
                    if ((temp408 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS421();
                        goto label243;
                    }
                    if ((temp408 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS422();
                        goto label243;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker4)));
                label243:
;
                label244:
;
                    goto label246;
                }
                if ((temp411 == 1)) {
                    this.Manager.Comment("reaching state \'S505\'");
                    int temp410 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker3)));
                    if ((temp410 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS506();
                        goto label245;
                    }
                    if ((temp410 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS506();
                        goto label245;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S509\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S510\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker6))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker6)));
                    }
                label245:
;
                    goto label246;
                }
                throw new InvalidOperationException("never reached");
            label246:
;
                goto label250;
            }
            if ((temp417 == 3)) {
                this.Manager.Comment("reaching state \'S511\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S512\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S513\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp412;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp413;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp412, out temp413);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp412, temp413);
                this.Manager.Comment("reaching state \'S514\'");
                int temp416 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492RequestOplockAndOperateFileRequestChecker3)));
                if ((temp416 == 0)) {
                    this.Manager.Comment("reaching state \'S515\'");
                    int temp414 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker5)));
                    if ((temp414 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS516();
                        goto label247;
                    }
                    if ((temp414 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS516();
                        goto label247;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S519\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S520\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker8))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker8)));
                    }
                label247:
;
                    goto label249;
                }
                if ((temp416 == 1)) {
                    this.Manager.Comment("reaching state \'S521\'");
                    int temp415 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker7)));
                    if ((temp415 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS522();
                        goto label248;
                    }
                    if ((temp415 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS522();
                        goto label248;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S526\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S527\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker10))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS528();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker10)));
                    }
                label248:
;
                    goto label249;
                }
                throw new InvalidOperationException("never reached");
            label249:
;
                goto label250;
            }
            throw new InvalidOperationException("never reached");
        label250:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S493");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S493");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S493");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S497");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S497");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S498");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS499() {
            this.Manager.Comment("reaching state \'S499\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S500\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S501\'");
            int temp407 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker2)));
            if ((temp407 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                goto label242;
            }
            if ((temp407 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS395();
                goto label242;
            }
            if ((temp407 == 2)) {
                this.Manager.Comment("reaching state \'S502\'");
                goto label242;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker2)));
        label242:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S501");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S501");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S501");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S501");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S498");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S504");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S504");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S497");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S497");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S505");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS506() {
            this.Manager.Comment("reaching state \'S506\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S507\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S508\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker5))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker5)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S508");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S508");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S508");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S505");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S510");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S510");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S510");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S493");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S514");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S514");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S515");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS516() {
            this.Manager.Comment("reaching state \'S516\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S517\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S518\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker7))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS471();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker7)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S518");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S518");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S518");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S515");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S520");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S520");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S520");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S514");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S514");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S521");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS522() {
            this.Manager.Comment("reaching state \'S522\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S523\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S524\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker9))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS525();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker9)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S524");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S524");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S524");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS525() {
            this.Manager.Comment("reaching state \'S525\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S521");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS492OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S527");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S527");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S527");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS528() {
            this.Manager.Comment("reaching state \'S528\'");
        }
        #endregion
        
        #region Test Starting in S529
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529");
            this.Manager.Comment("reaching state \'S529\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp418;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp418);
            this.Manager.AddReturn(ReadConfigInfo, null, temp418);
            this.Manager.Comment("reaching state \'S530\'");
            int temp430 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529ReadConfigChecker3)));
            if ((temp430 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label258;
            }
            if ((temp430 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label258;
            }
            if ((temp430 == 2)) {
                this.Manager.Comment("reaching state \'S531\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S532\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S533\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp419;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp420;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp419, out temp420);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp419, temp420);
                this.Manager.Comment("reaching state \'S534\'");
                int temp424 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529RequestOplockAndOperateFileRequestChecker1)));
                if ((temp424 == 0)) {
                    this.Manager.Comment("reaching state \'S535\'");
                    int temp422 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker1)));
                    if ((temp422 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS354();
                        goto label252;
                    }
                    if ((temp422 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS354();
                        goto label252;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S536\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S537\'");
                    int temp421 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker1)));
                    if ((temp421 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS421();
                        goto label251;
                    }
                    if ((temp421 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS422();
                        goto label251;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker1)));
                label251:
;
                label252:
;
                    goto label254;
                }
                if ((temp424 == 1)) {
                    this.Manager.Comment("reaching state \'S538\'");
                    int temp423 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker3)));
                    if ((temp423 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS541();
                        goto label253;
                    }
                    if ((temp423 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS541();
                        goto label253;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S539\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S540\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker2))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS362();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker2)));
                    }
                label253:
;
                    goto label254;
                }
                throw new InvalidOperationException("never reached");
            label254:
;
                goto label258;
            }
            if ((temp430 == 3)) {
                this.Manager.Comment("reaching state \'S544\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S545\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S546\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp425;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp426;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp425, out temp426);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp425, temp426);
                this.Manager.Comment("reaching state \'S547\'");
                int temp429 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529RequestOplockAndOperateFileRequestChecker3)));
                if ((temp429 == 0)) {
                    this.Manager.Comment("reaching state \'S548\'");
                    int temp427 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker5)));
                    if ((temp427 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS549();
                        goto label255;
                    }
                    if ((temp427 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS549();
                        goto label255;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S552\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S553\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker4))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker4)));
                    }
                label255:
;
                    goto label257;
                }
                if ((temp429 == 1)) {
                    this.Manager.Comment("reaching state \'S554\'");
                    int temp428 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker7)));
                    if ((temp428 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS555();
                        goto label256;
                    }
                    if ((temp428 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS555();
                        goto label256;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S558\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S559\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker6))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS528();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker6)));
                    }
                label256:
;
                    goto label257;
                }
                throw new InvalidOperationException("never reached");
            label257:
;
                goto label258;
            }
            throw new InvalidOperationException("never reached");
        label258:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S530");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S530");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S530");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S534");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S534");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S535");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S535");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S537");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S537");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S537");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S537");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S537");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S537");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S534");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S534");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S538");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S538");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S540");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S540");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S540");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S530");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S547");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S547");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S548");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS549() {
            this.Manager.Comment("reaching state \'S549\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S550\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S551\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker3))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS471();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker3)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S551");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S551");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S551");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S548");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S547");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S547");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS555() {
            this.Manager.Comment("reaching state \'S555\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S556\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S557\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker5))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS525();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker5)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S557");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S557");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS529OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S559");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S559");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S559");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S560
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560");
            this.Manager.Comment("reaching state \'S560\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp431;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp431);
            this.Manager.AddReturn(ReadConfigInfo, null, temp431);
            this.Manager.Comment("reaching state \'S561\'");
            int temp439 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560ReadConfigChecker3)));
            if ((temp439 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label264;
            }
            if ((temp439 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label264;
            }
            if ((temp439 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label264;
            }
            if ((temp439 == 3)) {
                this.Manager.Comment("reaching state \'S562\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S563\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S564\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp432;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp433;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp432, out temp433);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp432, temp433);
                this.Manager.Comment("reaching state \'S565\'");
                int temp438 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560RequestOplockAndOperateFileRequestChecker1)));
                if ((temp438 == 0)) {
                    this.Manager.Comment("reaching state \'S566\'");
                    int temp434 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakNotificationChecker1)));
                    if ((temp434 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS567();
                        goto label259;
                    }
                    if ((temp434 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS567();
                        goto label259;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S570\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S571\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker1)));
                    }
                label259:
;
                    goto label263;
                }
                if ((temp438 == 1)) {
                    this.Manager.Comment("reaching state \'S572\'");
                    int temp437 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakNotificationChecker3)));
                    if ((temp437 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS573();
                        goto label262;
                    }
                    if ((temp437 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS573();
                        goto label262;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S576\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S577\'");
                    int temp436 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker5)));
                    if ((temp436 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS462();
                        goto label261;
                    }
                    if ((temp436 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS463();
                        goto label261;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker5)));
                label261:
;
                label262:
;
                    goto label263;
                }
                throw new InvalidOperationException("never reached");
            label263:
;
                goto label264;
            }
            throw new InvalidOperationException("never reached");
        label264:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S561");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S561");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S561");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S561");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S565");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S565");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS567() {
            this.Manager.Comment("reaching state \'S567\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S568\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S569\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S569");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S569");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S569");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S571");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S571");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S571");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S565");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S565");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S572");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS573() {
            this.Manager.Comment("reaching state \'S573\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S574\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S575\'");
            int temp435 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker3)));
            if ((temp435 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label260;
            }
            if ((temp435 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label260;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker3)));
        label260:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S575");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S575");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S575");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S575");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S575");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S575");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S572");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S577");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S577");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S577");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS560OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S577");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S577");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S577");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S578
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578");
            this.Manager.Comment("reaching state \'S578\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp440;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp440);
            this.Manager.AddReturn(ReadConfigInfo, null, temp440);
            this.Manager.Comment("reaching state \'S579\'");
            int temp455 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578ReadConfigChecker3)));
            if ((temp455 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label275;
            }
            if ((temp455 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label275;
            }
            if ((temp455 == 2)) {
                this.Manager.Comment("reaching state \'S580\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S581\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S582\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp441;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp442;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp441, out temp442);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp441, temp442);
                this.Manager.Comment("reaching state \'S583\'");
                int temp446 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578RequestOplockAndOperateFileRequestChecker1)));
                if ((temp446 == 0)) {
                    this.Manager.Comment("reaching state \'S584\'");
                    int temp443 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker1)));
                    if ((temp443 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS585();
                        goto label265;
                    }
                    if ((temp443 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS585();
                        goto label265;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S588\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S589\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker1)));
                    }
                label265:
;
                    goto label268;
                }
                if ((temp446 == 1)) {
                    this.Manager.Comment("reaching state \'S590\'");
                    int temp445 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker3)));
                    if ((temp445 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS591();
                        goto label267;
                    }
                    if ((temp445 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS591();
                        goto label267;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S595\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S596\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker4))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS169();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker4)));
                    }
                label267:
;
                    goto label268;
                }
                throw new InvalidOperationException("never reached");
            label268:
;
                goto label275;
            }
            if ((temp455 == 3)) {
                this.Manager.Comment("reaching state \'S597\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S598\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S599\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp447;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp448;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp447, out temp448);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp447, temp448);
                this.Manager.Comment("reaching state \'S600\'");
                int temp454 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578RequestOplockAndOperateFileRequestChecker3)));
                if ((temp454 == 0)) {
                    this.Manager.Comment("reaching state \'S601\'");
                    int temp450 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker5)));
                    if ((temp450 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS602();
                        goto label270;
                    }
                    if ((temp450 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS602();
                        goto label270;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S606\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S607\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker7))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker7)));
                    }
                label270:
;
                    goto label274;
                }
                if ((temp454 == 1)) {
                    this.Manager.Comment("reaching state \'S608\'");
                    int temp453 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker7)));
                    if ((temp453 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS609();
                        goto label273;
                    }
                    if ((temp453 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS609();
                        goto label273;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S612\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S613\'");
                    int temp452 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker11)));
                    if ((temp452 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS462();
                        goto label272;
                    }
                    if ((temp452 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS463();
                        goto label272;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker11)));
                label272:
;
                label273:
;
                    goto label274;
                }
                throw new InvalidOperationException("never reached");
            label274:
;
                goto label275;
            }
            throw new InvalidOperationException("never reached");
        label275:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S579");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S579");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S579");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S583");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S583");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S584");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS585() {
            this.Manager.Comment("reaching state \'S585\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S586\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S587\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS158();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S587");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S584");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S589");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S589");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S589");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S583");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S583");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S590");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS591() {
            this.Manager.Comment("reaching state \'S591\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S592\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S593\'");
            int temp444 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker3)));
            if ((temp444 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                goto label266;
            }
            if ((temp444 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                goto label266;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker3)));
        label266:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S593");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S593");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S593");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S593");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S593");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S593");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S590");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S596");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S596");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S596");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S579");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S600");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S601");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS602() {
            this.Manager.Comment("reaching state \'S602\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S603\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S604\'");
            int temp449 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker6)));
            if ((temp449 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS467();
                goto label269;
            }
            if ((temp449 == 1)) {
                this.Manager.Comment("reaching state \'S605\'");
                goto label269;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker6)));
        label269:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S604");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S604");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S604");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S604");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S604");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S604");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S601");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S607");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S607");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S607");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S600");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S608");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS609() {
            this.Manager.Comment("reaching state \'S609\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S610\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S611\'");
            int temp451 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker9)));
            if ((temp451 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label271;
            }
            if ((temp451 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS458();
                goto label271;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker9)));
        label271:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S611");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S611");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S611");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S611");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S611");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S611");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S608");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S613");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S613");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S613");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS578OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S613");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S613");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S613");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S614
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614");
            this.Manager.Comment("reaching state \'S614\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp456;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp456);
            this.Manager.AddReturn(ReadConfigInfo, null, temp456);
            this.Manager.Comment("reaching state \'S615\'");
            int temp469 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614ReadConfigChecker3)));
            if ((temp469 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label284;
            }
            if ((temp469 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label284;
            }
            if ((temp469 == 2)) {
                this.Manager.Comment("reaching state \'S616\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S617\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S618\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp457;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp458;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp457, out temp458);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp457, temp458);
                this.Manager.Comment("reaching state \'S619\'");
                int temp463 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614RequestOplockAndOperateFileRequestChecker1)));
                if ((temp463 == 0)) {
                    this.Manager.Comment("reaching state \'S620\'");
                    int temp459 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker1)));
                    if ((temp459 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS621();
                        goto label276;
                    }
                    if ((temp459 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS621();
                        goto label276;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S624\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S625\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker1)));
                    }
                label276:
;
                    goto label280;
                }
                if ((temp463 == 1)) {
                    this.Manager.Comment("reaching state \'S626\'");
                    int temp462 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker3)));
                    if ((temp462 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS627();
                        goto label279;
                    }
                    if ((temp462 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS627();
                        goto label279;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S630\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S631\'");
                    int temp461 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker5)));
                    if ((temp461 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS632();
                        goto label278;
                    }
                    if ((temp461 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS633();
                        goto label278;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker5)));
                label278:
;
                label279:
;
                    goto label280;
                }
                throw new InvalidOperationException("never reached");
            label280:
;
                goto label284;
            }
            if ((temp469 == 3)) {
                this.Manager.Comment("reaching state \'S634\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S635\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S636\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp464;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp465;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp464, out temp465);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp464, temp465);
                this.Manager.Comment("reaching state \'S637\'");
                int temp468 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614RequestOplockAndOperateFileRequestChecker3)));
                if ((temp468 == 0)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS476();
                    goto label283;
                }
                if ((temp468 == 1)) {
                    this.Manager.Comment("reaching state \'S638\'");
                    int temp467 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker5)));
                    if ((temp467 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS639();
                        goto label282;
                    }
                    if ((temp467 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS639();
                        goto label282;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.AddReturn(OplockBreakAcknowledgementRequestInfo, null);
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS489();
                label282:
;
                    goto label283;
                }
                throw new InvalidOperationException("never reached");
            label283:
;
                goto label284;
            }
            throw new InvalidOperationException("never reached");
        label284:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S615");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S615");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S615");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S619");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S619");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S620");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS621() {
            this.Manager.Comment("reaching state \'S621\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S622\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S623\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS158();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S623");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S623");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S623");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S620");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S625");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S625");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S625");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S619");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S619");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S626");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS627() {
            this.Manager.Comment("reaching state \'S627\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S628\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S629\'");
            int temp460 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker3)));
            if ((temp460 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                goto label277;
            }
            if ((temp460 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                goto label277;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker3)));
        label277:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S629");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S629");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S629");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S629");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S629");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S629");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S626");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S631");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S631");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S631");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S631");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S631");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S631");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S615");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S637");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S637");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S637");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S637");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S638");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS639() {
            this.Manager.Comment("reaching state \'S639\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S640\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S641\'");
            int temp466 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker7)));
            if ((temp466 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label281;
            }
            if ((temp466 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label281;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker7)));
        label281:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S641");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S641");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S641");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S641");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S641");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S641");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS614OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S638");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        #endregion
        
        #region Test Starting in S643
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643");
            this.Manager.Comment("reaching state \'S643\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp470;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp470);
            this.Manager.AddReturn(ReadConfigInfo, null, temp470);
            this.Manager.Comment("reaching state \'S644\'");
            int temp483 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643ReadConfigChecker3)));
            if ((temp483 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label293;
            }
            if ((temp483 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label293;
            }
            if ((temp483 == 2)) {
                this.Manager.Comment("reaching state \'S645\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S646\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S647\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp471;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp472;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp471, out temp472);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp471, temp472);
                this.Manager.Comment("reaching state \'S648\'");
                int temp477 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643RequestOplockAndOperateFileRequestChecker1)));
                if ((temp477 == 0)) {
                    this.Manager.Comment("reaching state \'S649\'");
                    int temp473 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker1)));
                    if ((temp473 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS650();
                        goto label285;
                    }
                    if ((temp473 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS650();
                        goto label285;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S653\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S654\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker1)));
                    }
                label285:
;
                    goto label289;
                }
                if ((temp477 == 1)) {
                    this.Manager.Comment("reaching state \'S655\'");
                    int temp476 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker3)));
                    if ((temp476 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS656();
                        goto label288;
                    }
                    if ((temp476 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS656();
                        goto label288;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S660\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S661\'");
                    int temp475 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker6)));
                    if ((temp475 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS632();
                        goto label287;
                    }
                    if ((temp475 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS633();
                        goto label287;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker6)));
                label287:
;
                label288:
;
                    goto label289;
                }
                throw new InvalidOperationException("never reached");
            label289:
;
                goto label293;
            }
            if ((temp483 == 3)) {
                this.Manager.Comment("reaching state \'S662\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S663\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S664\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp478;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp479;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp478, out temp479);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp478, temp479);
                this.Manager.Comment("reaching state \'S665\'");
                int temp482 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643RequestOplockAndOperateFileRequestChecker3)));
                if ((temp482 == 0)) {
                    this.Manager.Comment("reaching state \'S666\'");
                    int temp480 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker5)));
                    if ((temp480 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS667();
                        goto label290;
                    }
                    if ((temp480 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS667();
                        goto label290;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S670\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S671\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker8))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker8)));
                    }
                label290:
;
                    goto label292;
                }
                if ((temp482 == 1)) {
                    this.Manager.Comment("reaching state \'S672\'");
                    int temp481 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker7)));
                    if ((temp481 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS485();
                        goto label291;
                    }
                    if ((temp481 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS485();
                        goto label291;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S673\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S674\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker9))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS491();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker9)));
                    }
                label291:
;
                    goto label292;
                }
                throw new InvalidOperationException("never reached");
            label292:
;
                goto label293;
            }
            throw new InvalidOperationException("never reached");
        label293:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S644");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S644");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S644");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S648");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S648");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS650() {
            this.Manager.Comment("reaching state \'S650\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S651\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S652\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS158();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S652");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S652");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S652");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S654");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S654");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S654");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S648");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S648");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S655");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS656() {
            this.Manager.Comment("reaching state \'S656\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S657\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S658\'");
            int temp474 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker4)));
            if ((temp474 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                goto label286;
            }
            if ((temp474 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                goto label286;
            }
            if ((temp474 == 2)) {
                this.Manager.Comment("reaching state \'S659\'");
                goto label286;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker4)));
        label286:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S658");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S658");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S658");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S658");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S658");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S658");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S658");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S658");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S658");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S655");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S661");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S661");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S661");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S661");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S661");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S661");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S644");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S665");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S665");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S666");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS667() {
            this.Manager.Comment("reaching state \'S667\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S668\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S669\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker7))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS480();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker7)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S669");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S669");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S669");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S666");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S671");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S671");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S671");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S665");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S665");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S672");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S672");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS643OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S674");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S674");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S675
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675");
            this.Manager.Comment("reaching state \'S675\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp484;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp484);
            this.Manager.AddReturn(ReadConfigInfo, null, temp484);
            this.Manager.Comment("reaching state \'S676\'");
            int temp498 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675ReadConfigChecker3)));
            if ((temp498 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label303;
            }
            if ((temp498 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label303;
            }
            if ((temp498 == 2)) {
                this.Manager.Comment("reaching state \'S677\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S678\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S679\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp485;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp486;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp485, out temp486);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp485, temp486);
                this.Manager.Comment("reaching state \'S680\'");
                int temp491 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675RequestOplockAndOperateFileRequestChecker1)));
                if ((temp491 == 0)) {
                    this.Manager.Comment("reaching state \'S681\'");
                    int temp487 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker1)));
                    if ((temp487 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS682();
                        goto label294;
                    }
                    if ((temp487 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS682();
                        goto label294;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S685\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S686\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker1)));
                    }
                label294:
;
                    goto label298;
                }
                if ((temp491 == 1)) {
                    this.Manager.Comment("reaching state \'S687\'");
                    int temp490 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker3)));
                    if ((temp490 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS688();
                        goto label297;
                    }
                    if ((temp490 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS688();
                        goto label297;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S691\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S692\'");
                    int temp489 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker7)));
                    if ((temp489 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS632();
                        goto label296;
                    }
                    if ((temp489 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS633();
                        goto label296;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker7)));
                label296:
;
                label297:
;
                    goto label298;
                }
                throw new InvalidOperationException("never reached");
            label298:
;
                goto label303;
            }
            if ((temp498 == 3)) {
                this.Manager.Comment("reaching state \'S693\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S694\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S695\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp492;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp493;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp492, out temp493);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp492, temp493);
                this.Manager.Comment("reaching state \'S696\'");
                int temp497 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675RequestOplockAndOperateFileRequestChecker3)));
                if ((temp497 == 0)) {
                    this.Manager.Comment("reaching state \'S697\'");
                    int temp494 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker5)));
                    if ((temp494 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS698();
                        goto label299;
                    }
                    if ((temp494 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS698();
                        goto label299;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S701\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S702\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker9))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker9)));
                    }
                label299:
;
                    goto label302;
                }
                if ((temp497 == 1)) {
                    this.Manager.Comment("reaching state \'S703\'");
                    int temp496 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker7)));
                    if ((temp496 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS704();
                        goto label301;
                    }
                    if ((temp496 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS704();
                        goto label301;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S707\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S708\'");
                    int temp495 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker11)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker12)));
                    if ((temp495 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS709();
                        goto label300;
                    }
                    if ((temp495 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS710();
                        goto label300;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker11)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker12)));
                label300:
;
                label301:
;
                    goto label302;
                }
                throw new InvalidOperationException("never reached");
            label302:
;
                goto label303;
            }
            throw new InvalidOperationException("never reached");
        label303:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S676");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S676");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S676");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S680");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S680");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S681");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS682() {
            this.Manager.Comment("reaching state \'S682\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S683\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S684\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S684");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S684");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S684");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S681");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S686");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S686");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S686");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S680");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S680");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S687");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS688() {
            this.Manager.Comment("reaching state \'S688\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S689\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S690\'");
            int temp488 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker5)));
            if ((temp488 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                goto label295;
            }
            if ((temp488 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                goto label295;
            }
            if ((temp488 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                goto label295;
            }
            if ((temp488 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS594();
                goto label295;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker5)));
        label295:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S690");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S690");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S690");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S690");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S690");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S690");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S690");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S690");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S690");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and the Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_NONE, set Open.OplockLevel to SMB2" +
                    "_OPLOCK_LEVEL_NONE and the Open.OplockState to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S690");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S690");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S690");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S687");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S692");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S692");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S692");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S692");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S692");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S692");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S676");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S696");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S697");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS698() {
            this.Manager.Comment("reaching state \'S698\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S699\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S700\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker8))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS480();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker8)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S700");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S700");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S700");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S697");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S696");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S703");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS704() {
            this.Manager.Comment("reaching state \'S704\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S705\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S706\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker10))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS488();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker10)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S706");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S706");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S706");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S703");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S708");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S708");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S708");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS675OplockBreakResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S708");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S708");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S708");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S711
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711");
            this.Manager.Comment("reaching state \'S711\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp499;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp499);
            this.Manager.AddReturn(ReadConfigInfo, null, temp499);
            this.Manager.Comment("reaching state \'S712\'");
            int temp513 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711ReadConfigChecker3)));
            if ((temp513 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label313;
            }
            if ((temp513 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label313;
            }
            if ((temp513 == 2)) {
                this.Manager.Comment("reaching state \'S713\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S714\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S715\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp500;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp501;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp500, out temp501);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp500, temp501);
                this.Manager.Comment("reaching state \'S716\'");
                int temp505 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711RequestOplockAndOperateFileRequestChecker1)));
                if ((temp505 == 0)) {
                    this.Manager.Comment("reaching state \'S717\'");
                    int temp502 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker1)));
                    if ((temp502 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS718();
                        goto label304;
                    }
                    if ((temp502 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS718();
                        goto label304;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S722\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S723\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS161();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker)));
                    }
                label304:
;
                    goto label307;
                }
                if ((temp505 == 1)) {
                    this.Manager.Comment("reaching state \'S724\'");
                    int temp504 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker3)));
                    if ((temp504 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS163();
                        goto label306;
                    }
                    if ((temp504 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS163();
                        goto label306;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S725\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S726\'");
                    int temp503 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker2)));
                    if ((temp503 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS632();
                        goto label305;
                    }
                    if ((temp503 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS633();
                        goto label305;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker2)));
                label305:
;
                label306:
;
                    goto label307;
                }
                throw new InvalidOperationException("never reached");
            label307:
;
                goto label313;
            }
            if ((temp513 == 3)) {
                this.Manager.Comment("reaching state \'S727\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S728\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S729\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp506;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp507;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp506, out temp507);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp506, temp507);
                this.Manager.Comment("reaching state \'S730\'");
                int temp512 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711RequestOplockAndOperateFileRequestChecker3)));
                if ((temp512 == 0)) {
                    this.Manager.Comment("reaching state \'S731\'");
                    int temp508 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker5)));
                    if ((temp508 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS732();
                        goto label308;
                    }
                    if ((temp508 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS732();
                        goto label308;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S735\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S736\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker4))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker4)));
                    }
                label308:
;
                    goto label312;
                }
                if ((temp512 == 1)) {
                    this.Manager.Comment("reaching state \'S737\'");
                    int temp511 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker7)));
                    if ((temp511 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS738();
                        goto label311;
                    }
                    if ((temp511 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS738();
                        goto label311;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S741\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S742\'");
                    int temp510 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker8)));
                    if ((temp510 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS709();
                        goto label310;
                    }
                    if ((temp510 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS710();
                        goto label310;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker7)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker8)));
                label310:
;
                label311:
;
                    goto label312;
                }
                throw new InvalidOperationException("never reached");
            label312:
;
                goto label313;
            }
            throw new InvalidOperationException("never reached");
        label313:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S712");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S712");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S712");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S716");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S723");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S723");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S723");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S716");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S724");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S724");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S726");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S726");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S726");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S726");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S726");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S726");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S712");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S730");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S730");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S731");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS732() {
            this.Manager.Comment("reaching state \'S732\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S733\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S734\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker3))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS480();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker3)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S734");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S734");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S734");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S731");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S736");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S736");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S736");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S730");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S730");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S737");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS738() {
            this.Manager.Comment("reaching state \'S738\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S739\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S740\'");
            int temp509 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker6)));
            if ((temp509 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label309;
            }
            if ((temp509 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label309;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker6)));
        label309:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S740");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S740");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S740");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S740");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S740");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S740");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S737");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S742");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S742");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S742");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS711OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S742");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S742");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S742");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S743
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743");
            this.Manager.Comment("reaching state \'S743\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp514;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp514);
            this.Manager.AddReturn(ReadConfigInfo, null, temp514);
            this.Manager.Comment("reaching state \'S744\'");
            int temp529 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743ReadConfigChecker3)));
            if ((temp529 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label324;
            }
            if ((temp529 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label324;
            }
            if ((temp529 == 2)) {
                this.Manager.Comment("reaching state \'S745\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S746\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S747\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp515;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp516;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp515, out temp516);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp515, temp516);
                this.Manager.Comment("reaching state \'S748\'");
                int temp520 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743RequestOplockAndOperateFileRequestChecker1)));
                if ((temp520 == 0)) {
                    this.Manager.Comment("reaching state \'S749\'");
                    int temp518 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker1)));
                    if ((temp518 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS750();
                        goto label315;
                    }
                    if ((temp518 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS750();
                        goto label315;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S754\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S755\'");
                    int temp517 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker2)));
                    if ((temp517 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS68();
                        goto label314;
                    }
                    if ((temp517 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS69();
                        goto label314;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker2)));
                label314:
;
                label315:
;
                    goto label317;
                }
                if ((temp520 == 1)) {
                    this.Manager.Comment("reaching state \'S756\'");
                    int temp519 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker3)));
                    if ((temp519 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS757();
                        goto label316;
                    }
                    if ((temp519 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS757();
                        goto label316;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S761\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S762\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker4))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker4)));
                    }
                label316:
;
                    goto label317;
                }
                throw new InvalidOperationException("never reached");
            label317:
;
                goto label324;
            }
            if ((temp529 == 3)) {
                this.Manager.Comment("reaching state \'S763\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S764\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S765\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp521;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp522;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp521, out temp522);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp521, temp522);
                this.Manager.Comment("reaching state \'S766\'");
                int temp528 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743RequestOplockAndOperateFileRequestChecker3)));
                if ((temp528 == 0)) {
                    this.Manager.Comment("reaching state \'S767\'");
                    int temp524 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker5)));
                    if ((temp524 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS768();
                        goto label319;
                    }
                    if ((temp524 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS768();
                        goto label319;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S772\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S773\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker7))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker7)));
                    }
                label319:
;
                    goto label323;
                }
                if ((temp528 == 1)) {
                    this.Manager.Comment("reaching state \'S774\'");
                    int temp527 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker7)));
                    if ((temp527 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS775();
                        goto label322;
                    }
                    if ((temp527 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS775();
                        goto label322;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S778\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S779\'");
                    int temp526 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker11)));
                    if ((temp526 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS709();
                        goto label321;
                    }
                    if ((temp526 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS710();
                        goto label321;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker10)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker11)));
                label321:
;
                label322:
;
                    goto label323;
                }
                throw new InvalidOperationException("never reached");
            label323:
;
                goto label324;
            }
            throw new InvalidOperationException("never reached");
        label324:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S744");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S744");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S744");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S748");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S748");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S749");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS750() {
            this.Manager.Comment("reaching state \'S750\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S751\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S752\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS753();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S752");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S752");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S752");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS753() {
            this.Manager.Comment("reaching state \'S753\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S749");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S755");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S755");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S755");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S755");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S755");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S755");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S748");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S748");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S756");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS757() {
            this.Manager.Comment("reaching state \'S757\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S758\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S759\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker3))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS760();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker3)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S759");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S759");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S759");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS760() {
            this.Manager.Comment("reaching state \'S760\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S756");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S762");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S762");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S744");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S766");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S766");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S767");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS768() {
            this.Manager.Comment("reaching state \'S768\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S769\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S770\'");
            int temp523 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker6)));
            if ((temp523 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS483();
                goto label318;
            }
            if ((temp523 == 1)) {
                this.Manager.Comment("reaching state \'S771\'");
                goto label318;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker6)));
        label318:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S770");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S770");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S770");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S770");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S770");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S770");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S767");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S773");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S773");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S773");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S766");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S766");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S774");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS775() {
            this.Manager.Comment("reaching state \'S775\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S776\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S777\'");
            int temp525 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker9)));
            if ((temp525 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label320;
            }
            if ((temp525 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS642();
                goto label320;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker9)));
        label320:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S777");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S777");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S777");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S777");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S777");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S777");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S774");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S779");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S779");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S779");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS743OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S779");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S779");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S779");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S780
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780");
            this.Manager.Comment("reaching state \'S780\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp530;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp530);
            this.Manager.AddReturn(ReadConfigInfo, null, temp530);
            this.Manager.Comment("reaching state \'S781\'");
            int temp540 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780ReadConfigChecker3)));
            if ((temp540 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label330;
            }
            if ((temp540 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label330;
            }
            if ((temp540 == 2)) {
                this.Manager.Comment("reaching state \'S782\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S783\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S784\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp531;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp532;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp531, out temp532);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp531, temp532);
                this.Manager.Comment("reaching state \'S785\'");
                int temp536 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780RequestOplockAndOperateFileRequestChecker1)));
                if ((temp536 == 0)) {
                    this.Manager.Comment("reaching state \'S786\'");
                    int temp534 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakNotificationChecker1)));
                    if ((temp534 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS787();
                        goto label326;
                    }
                    if ((temp534 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS787();
                        goto label326;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S791\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S792\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker3))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS793();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker3)));
                    }
                label326:
;
                    goto label328;
                }
                if ((temp536 == 1)) {
                    this.Manager.Comment("reaching state \'S794\'");
                    int temp535 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakNotificationChecker3)));
                    if ((temp535 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS795();
                        goto label327;
                    }
                    if ((temp535 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS795();
                        goto label327;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S798\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S799\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker5)));
                    }
                label327:
;
                    goto label328;
                }
                throw new InvalidOperationException("never reached");
            label328:
;
                goto label330;
            }
            if ((temp540 == 3)) {
                this.Manager.Comment("reaching state \'S800\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S801\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S802\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp537;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp538;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,Create" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp537, out temp538);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp537, temp538);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS803();
                goto label330;
            }
            throw new InvalidOperationException("never reached");
        label330:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S781");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S781");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S781");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S785");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S785");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S786");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS787() {
            this.Manager.Comment("reaching state \'S787\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S788\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S789\'");
            int temp533 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker2)));
            if ((temp533 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label325;
            }
            if ((temp533 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label325;
            }
            if ((temp533 == 2)) {
                this.Manager.Comment("reaching state \'S790\'");
                goto label325;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker1)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker2)));
        label325:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S789");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S789");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S789");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S789");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S789");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S789");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S789");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S789");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S789");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S786");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S792");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S792");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S792");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS793() {
            this.Manager.Comment("reaching state \'S793\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S785");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S785");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S794");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS795() {
            this.Manager.Comment("reaching state \'S795\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S796\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S797\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker4))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS760();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker4)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S797");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S797");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S797");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S794");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S799");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S799");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S799");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S781");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS803() {
            this.Manager.Comment("reaching state \'S803\'");
            int temp539 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780RequestOplockAndOperateFileRequestChecker3)));
            if ((temp539 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS74();
                goto label329;
            }
            if ((temp539 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS83();
                goto label329;
            }
            throw new InvalidOperationException("never reached");
        label329:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S803");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S803");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS780RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S803");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S803");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S804
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804");
            this.Manager.Comment("reaching state \'S804\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp541;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp541);
            this.Manager.AddReturn(ReadConfigInfo, null, temp541);
            this.Manager.Comment("reaching state \'S805\'");
            int temp548 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804ReadConfigChecker3)));
            if ((temp548 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label333;
            }
            if ((temp548 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label333;
            }
            if ((temp548 == 2)) {
                this.Manager.Comment("reaching state \'S806\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S807\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S808\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp542;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp543;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp542, out temp543);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp542, temp543);
                this.Manager.Comment("reaching state \'S809\'");
                int temp545 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804RequestOplockAndOperateFileRequestChecker1)));
                if ((temp545 == 0)) {
                    this.Manager.Comment("reaching state \'S810\'");
                    int temp544 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804OplockBreakNotificationChecker1)));
                    if ((temp544 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS811();
                        goto label331;
                    }
                    if ((temp544 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS811();
                        goto label331;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S814\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S815\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS793();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804OplockBreakResponseChecker1)));
                    }
                label331:
;
                    goto label332;
                }
                if ((temp545 == 1)) {
                    OplockOnShareWithoutForceLevel2OrSOFSTestCaseS816();
                    goto label332;
                }
                throw new InvalidOperationException("never reached");
            label332:
;
                goto label333;
            }
            if ((temp548 == 3)) {
                this.Manager.Comment("reaching state \'S823\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S824\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S825\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp546;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp547;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,WriteFrom" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp546, out temp547);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp546, temp547);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS73();
                goto label333;
            }
            throw new InvalidOperationException("never reached");
        label333:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S805");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S805");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S805");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S809");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S809");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S810");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS811() {
            this.Manager.Comment("reaching state \'S811\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S812\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S813\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS753();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S813");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S813");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S813");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S810");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S815");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S815");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S815");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S809");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S809");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS804ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S805");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S826
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826");
            this.Manager.Comment("reaching state \'S826\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp549;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp549);
            this.Manager.AddReturn(ReadConfigInfo, null, temp549);
            this.Manager.Comment("reaching state \'S827\'");
            int temp559 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826ReadConfigChecker3)));
            if ((temp559 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label339;
            }
            if ((temp559 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS472();
                goto label339;
            }
            if ((temp559 == 2)) {
                this.Manager.Comment("reaching state \'S828\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S829\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S830\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp550;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp551;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp550, out temp551);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp550, temp551);
                this.Manager.Comment("reaching state \'S831\'");
                int temp556 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826RequestOplockAndOperateFileRequestChecker1)));
                if ((temp556 == 0)) {
                    this.Manager.Comment("reaching state \'S832\'");
                    int temp554 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakNotificationChecker1)));
                    if ((temp554 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS833();
                        goto label336;
                    }
                    if ((temp554 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS833();
                        goto label336;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S836\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S837\'");
                    int temp553 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker3)));
                    if ((temp553 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS68();
                        goto label335;
                    }
                    if ((temp553 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS69();
                        goto label335;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker3)));
                label335:
;
                label336:
;
                    goto label338;
                }
                if ((temp556 == 1)) {
                    this.Manager.Comment("reaching state \'S838\'");
                    int temp555 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakNotificationChecker3)));
                    if ((temp555 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS839();
                        goto label337;
                    }
                    if ((temp555 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS839();
                        goto label337;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S842\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S843\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker5)));
                    }
                label337:
;
                    goto label338;
                }
                throw new InvalidOperationException("never reached");
            label338:
;
                goto label339;
            }
            if ((temp559 == 3)) {
                this.Manager.Comment("reaching state \'S844\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLO" +
                        "CK,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S845\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S846\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp557;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp558;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,WriteF" +
                        "romAnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp557, out temp558);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp557, temp558);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS803();
                goto label339;
            }
            throw new InvalidOperationException("never reached");
        label339:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S827");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S827");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S827");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S831");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S831");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S832");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS833() {
            this.Manager.Comment("reaching state \'S833\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S834\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S835\'");
            int temp552 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker1)));
            if ((temp552 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label334;
            }
            if ((temp552 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label334;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker1)));
        label334:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S835");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S835");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S835");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S835");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S835");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S835");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S832");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S837");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S837");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S837");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S837");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S837");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S837");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S831");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S831");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S838");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS839() {
            this.Manager.Comment("reaching state \'S839\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S840\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S841\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker4))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS760();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker4)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S841");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S841");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S841");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S838");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S843");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S843");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S843");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS826ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S827");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S847
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847");
            this.Manager.Comment("reaching state \'S847\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp560;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp560);
            this.Manager.AddReturn(ReadConfigInfo, null, temp560);
            this.Manager.Comment("reaching state \'S848\'");
            int temp576 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847ReadConfigChecker3)));
            if ((temp576 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label351;
            }
            if ((temp576 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label351;
            }
            if ((temp576 == 2)) {
                this.Manager.Comment("reaching state \'S849\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S850\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S851\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp561;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp562;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp561, out temp562);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp561, temp562);
                this.Manager.Comment("reaching state \'S852\'");
                int temp567 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847RequestOplockAndOperateFileRequestChecker1)));
                if ((temp567 == 0)) {
                    this.Manager.Comment("reaching state \'S853\'");
                    int temp565 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker1)));
                    if ((temp565 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS854();
                        goto label342;
                    }
                    if ((temp565 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS854();
                        goto label342;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S857\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S858\'");
                    int temp564 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker3)));
                    if ((temp564 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS68();
                        goto label341;
                    }
                    if ((temp564 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS69();
                        goto label341;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker3)));
                label341:
;
                label342:
;
                    goto label344;
                }
                if ((temp567 == 1)) {
                    this.Manager.Comment("reaching state \'S859\'");
                    int temp566 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker3)));
                    if ((temp566 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS860();
                        goto label343;
                    }
                    if ((temp566 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS860();
                        goto label343;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S863\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S864\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker5)));
                    }
                label343:
;
                    goto label344;
                }
                throw new InvalidOperationException("never reached");
            label344:
;
                goto label351;
            }
            if ((temp576 == 3)) {
                this.Manager.Comment("reaching state \'S865\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S866\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S867\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp568;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp569;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp568, out temp569);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp568, temp569);
                this.Manager.Comment("reaching state \'S868\'");
                int temp575 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847RequestOplockAndOperateFileRequestChecker3)));
                if ((temp575 == 0)) {
                    this.Manager.Comment("reaching state \'S869\'");
                    int temp571 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker5)));
                    if ((temp571 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS870();
                        goto label346;
                    }
                    if ((temp571 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS870();
                        goto label346;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S874\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S875\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker8))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker8)));
                    }
                label346:
;
                    goto label350;
                }
                if ((temp575 == 1)) {
                    this.Manager.Comment("reaching state \'S876\'");
                    int temp574 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker7)));
                    if ((temp574 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS877();
                        goto label349;
                    }
                    if ((temp574 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS877();
                        goto label349;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S880\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S881\'");
                    int temp573 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker11)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker12)));
                    if ((temp573 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS13();
                        goto label348;
                    }
                    if ((temp573 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS14();
                        goto label348;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker11)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker12)));
                label348:
;
                label349:
;
                    goto label350;
                }
                throw new InvalidOperationException("never reached");
            label350:
;
                goto label351;
            }
            throw new InvalidOperationException("never reached");
        label351:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S848");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S848");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S848");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S852");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S852");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S853");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS854() {
            this.Manager.Comment("reaching state \'S854\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S855\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S856\'");
            int temp563 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker1)));
            if ((temp563 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label340;
            }
            if ((temp563 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label340;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker1)));
        label340:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S856");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S856");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S856");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S856");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S856");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S856");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S853");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S858");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S858");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S858");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S858");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S858");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S858");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S852");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S852");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S859");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS860() {
            this.Manager.Comment("reaching state \'S860\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S861\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S862\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker4))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS760();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker4)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S862");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S862");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S862");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S859");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S864");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S864");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S864");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S848");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S868");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S868");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S869");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS870() {
            this.Manager.Comment("reaching state \'S870\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S871\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S872\'");
            int temp570 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker7)));
            if ((temp570 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19();
                goto label345;
            }
            if ((temp570 == 1)) {
                this.Manager.Comment("reaching state \'S873\'");
                goto label345;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker7)));
        label345:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S872");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S872");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S872");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S872");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S872");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S872");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S869");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S875");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S875");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S875");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S868");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S868");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S876");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS877() {
            this.Manager.Comment("reaching state \'S877\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S878\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S879\'");
            int temp572 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker9)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker10)));
            if ((temp572 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label347;
            }
            if ((temp572 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label347;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker9)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker10)));
        label347:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S879");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S879");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S879");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S879");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S879");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S879");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S876");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S881");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S881");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S881");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS847OplockBreakResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S881");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S881");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S881");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S882
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882");
            this.Manager.Comment("reaching state \'S882\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp577;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp577);
            this.Manager.AddReturn(ReadConfigInfo, null, temp577);
            this.Manager.Comment("reaching state \'S883\'");
            int temp590 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882ReadConfigChecker3)));
            if ((temp590 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label360;
            }
            if ((temp590 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label360;
            }
            if ((temp590 == 2)) {
                this.Manager.Comment("reaching state \'S884\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S885\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S886\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp578;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp579;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp578, out temp579);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp578, temp579);
                this.Manager.Comment("reaching state \'S887\'");
                int temp584 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882RequestOplockAndOperateFileRequestChecker1)));
                if ((temp584 == 0)) {
                    this.Manager.Comment("reaching state \'S888\'");
                    int temp582 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker1)));
                    if ((temp582 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS889();
                        goto label354;
                    }
                    if ((temp582 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS889();
                        goto label354;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S892\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S893\'");
                    int temp581 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker3)));
                    if ((temp581 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS68();
                        goto label353;
                    }
                    if ((temp581 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS69();
                        goto label353;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker3)));
                label353:
;
                label354:
;
                    goto label356;
                }
                if ((temp584 == 1)) {
                    this.Manager.Comment("reaching state \'S894\'");
                    int temp583 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker3)));
                    if ((temp583 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS895();
                        goto label355;
                    }
                    if ((temp583 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS895();
                        goto label355;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S898\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S899\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker5)));
                    }
                label355:
;
                    goto label356;
                }
                throw new InvalidOperationException("never reached");
            label356:
;
                goto label360;
            }
            if ((temp590 == 3)) {
                this.Manager.Comment("reaching state \'S900\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S901\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S902\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp585;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp586;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp585, out temp586);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp585, temp586);
                this.Manager.Comment("reaching state \'S903\'");
                int temp589 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882RequestOplockAndOperateFileRequestChecker3)));
                if ((temp589 == 0)) {
                    this.Manager.Comment("reaching state \'S904\'");
                    int temp587 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker5)));
                    if ((temp587 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS907();
                        goto label357;
                    }
                    if ((temp587 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS907();
                        goto label357;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S905\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S906\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker7))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker7)));
                    }
                label357:
;
                    goto label359;
                }
                if ((temp589 == 1)) {
                    this.Manager.Comment("reaching state \'S910\'");
                    int temp588 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker7)));
                    if ((temp588 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS911();
                        goto label358;
                    }
                    if ((temp588 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS911();
                        goto label358;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S915\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S916\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker9))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS917();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker9)));
                    }
                label358:
;
                    goto label359;
                }
                throw new InvalidOperationException("never reached");
            label359:
;
                goto label360;
            }
            throw new InvalidOperationException("never reached");
        label360:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S883");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S883");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S883");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S887");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S887");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S888");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS889() {
            this.Manager.Comment("reaching state \'S889\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S890\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S891\'");
            int temp580 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker1)));
            if ((temp580 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label352;
            }
            if ((temp580 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS65();
                goto label352;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker1)));
        label352:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S891");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S891");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S891");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S891");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S891");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S891");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S888");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S893");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S893");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S893");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S893");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S893");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S893");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S887");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S887");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S894");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS895() {
            this.Manager.Comment("reaching state \'S895\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S896\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S897\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker4))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS58();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker4)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S897");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S897");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S894");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S899");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S899");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S899");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S883");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S903");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS907() {
            this.Manager.Comment("reaching state \'S907\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S908\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S909\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker6))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS25();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker6)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S909");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S909");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S906");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S906");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S903");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS911() {
            this.Manager.Comment("reaching state \'S911\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S912\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S913\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker8))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS914();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker8)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S913");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S913");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S913");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS914() {
            this.Manager.Comment("reaching state \'S914\'");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS882OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S916");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S916");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS917() {
            this.Manager.Comment("reaching state \'S917\'");
        }
        #endregion
        
        #region Test Starting in S90
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90");
            this.Manager.Comment("reaching state \'S90\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp591;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp591);
            this.Manager.AddReturn(ReadConfigInfo, null, temp591);
            this.Manager.Comment("reaching state \'S91\'");
            int temp599 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90ReadConfigChecker3)));
            if ((temp599 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label366;
            }
            if ((temp599 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label366;
            }
            if ((temp599 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS150();
                goto label366;
            }
            if ((temp599 == 3)) {
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S94\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp592;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp593;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp592, out temp593);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp592, temp593);
                this.Manager.Comment("reaching state \'S95\'");
                int temp598 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90RequestOplockAndOperateFileRequestChecker1)));
                if ((temp598 == 0)) {
                    this.Manager.Comment("reaching state \'S104\'");
                    int temp595 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakNotificationChecker1)));
                    if ((temp595 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS105();
                        goto label362;
                    }
                    if ((temp595 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS105();
                        goto label362;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S109\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S110\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker2))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS111();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker2)));
                    }
                label362:
;
                    goto label365;
                }
                if ((temp598 == 1)) {
                    this.Manager.Comment("reaching state \'S96\'");
                    int temp597 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakNotificationChecker3)));
                    if ((temp597 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS97();
                        goto label364;
                    }
                    if ((temp597 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS97();
                        goto label364;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S102\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S103\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker5))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker5)));
                    }
                label364:
;
                    goto label365;
                }
                throw new InvalidOperationException("never reached");
            label365:
;
                goto label366;
            }
            throw new InvalidOperationException("never reached");
        label366:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S91");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S91");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S91");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S91");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S104");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS105() {
            this.Manager.Comment("reaching state \'S105\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S106\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S107\'");
            int temp594 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker1)));
            if ((temp594 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                goto label361;
            }
            if ((temp594 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS108();
                goto label361;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker1)));
        label361:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S107");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S107");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S104");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S110");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S110");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS97() {
            this.Manager.Comment("reaching state \'S97\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S98\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S99\'");
            int temp596 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker4)));
            if ((temp596 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS100();
                goto label363;
            }
            if ((temp596 == 1)) {
                this.Manager.Comment("reaching state \'S101\'");
                goto label363;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker3)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker4)));
        label363:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S99");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S99");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S99");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S99");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S99");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S99");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS90OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S918
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918");
            this.Manager.Comment("reaching state \'S918\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp600;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp600);
            this.Manager.AddReturn(ReadConfigInfo, null, temp600);
            this.Manager.Comment("reaching state \'S919\'");
            int temp609 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918ReadConfigChecker3)));
            if ((temp609 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label371;
            }
            if ((temp609 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label371;
            }
            if ((temp609 == 2)) {
                this.Manager.Comment("reaching state \'S920\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S921\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S922\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp601;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp602;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,Create" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp601, out temp602);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp601, temp602);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS923();
                goto label371;
            }
            if ((temp609 == 3)) {
                this.Manager.Comment("reaching state \'S939\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S940\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S941\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp604;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp605;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp604, out temp605);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp604, temp605);
                this.Manager.Comment("reaching state \'S942\'");
                int temp608 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918RequestOplockAndOperateFileRequestChecker3)));
                if ((temp608 == 0)) {
                    this.Manager.Comment("reaching state \'S943\'");
                    int temp606 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakNotificationChecker1)));
                    if ((temp606 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS944();
                        goto label368;
                    }
                    if ((temp606 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS944();
                        goto label368;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
                    this.Manager.Comment("reaching state \'S947\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S948\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker1)));
                    }
                label368:
;
                    goto label370;
                }
                if ((temp608 == 1)) {
                    this.Manager.Comment("reaching state \'S949\'");
                    int temp607 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakNotificationChecker3)));
                    if ((temp607 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS950();
                        goto label369;
                    }
                    if ((temp607 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS950();
                        goto label369;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S953\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S954\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker3))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS917();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker3)));
                    }
                label369:
;
                    goto label370;
                }
                throw new InvalidOperationException("never reached");
            label370:
;
                goto label371;
            }
            throw new InvalidOperationException("never reached");
        label371:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S919");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S919");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S919");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS923() {
            this.Manager.Comment("reaching state \'S923\'");
            int temp603 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918RequestOplockAndOperateFileRequestChecker1)));
            if ((temp603 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS924();
                goto label367;
            }
            if ((temp603 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS933();
                goto label367;
            }
            throw new InvalidOperationException("never reached");
        label367:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S923");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S923");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S923");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S923");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S919");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S942");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS944() {
            this.Manager.Comment("reaching state \'S944\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_BATCH)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S945\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S946\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS25();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S948");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S942");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S949");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS950() {
            this.Manager.Comment("reaching state \'S950\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentNotMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(1)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S951\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S952\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker2))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS914();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker2)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S952");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S952");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S952");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S949");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS918OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S954");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S954");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S954");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.DurableFileId is not equal to FileId.Persistent.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S955
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955");
            this.Manager.Comment("reaching state \'S955\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp610;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp610);
            this.Manager.AddReturn(ReadConfigInfo, null, temp610);
            this.Manager.Comment("reaching state \'S956\'");
            int temp620 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955ReadConfigChecker3)));
            if ((temp620 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label377;
            }
            if ((temp620 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label377;
            }
            if ((temp620 == 2)) {
                this.Manager.Comment("reaching state \'S957\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S958\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S959\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp611;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp612;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,WriteFrom" +
                        "AnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp611, out temp612);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp611, temp612);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS960();
                goto label377;
            }
            if ((temp620 == 3)) {
                this.Manager.Comment("reaching state \'S961\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S962\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S963\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp613;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp614;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp613, out temp614);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp613, temp614);
                this.Manager.Comment("reaching state \'S964\'");
                int temp619 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955RequestOplockAndOperateFileRequestChecker1)));
                if ((temp619 == 0)) {
                    this.Manager.Comment("reaching state \'S965\'");
                    int temp615 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakNotificationChecker1)));
                    if ((temp615 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS966();
                        goto label372;
                    }
                    if ((temp615 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS966();
                        goto label372;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S969\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S970\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker1)));
                    }
                label372:
;
                    goto label376;
                }
                if ((temp619 == 1)) {
                    this.Manager.Comment("reaching state \'S971\'");
                    int temp618 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakNotificationChecker3)));
                    if ((temp618 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS972();
                        goto label375;
                    }
                    if ((temp618 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS972();
                        goto label375;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
                    this.Manager.Comment("reaching state \'S975\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S976\'");
                    int temp617 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker5)));
                    if ((temp617 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS13();
                        goto label374;
                    }
                    if ((temp617 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS14();
                        goto label374;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker5)));
                label374:
;
                label375:
;
                    goto label376;
                }
                throw new InvalidOperationException("never reached");
            label376:
;
                goto label377;
            }
            throw new InvalidOperationException("never reached");
        label377:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S956");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S956");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S956");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S956");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S964");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S965");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS966() {
            this.Manager.Comment("reaching state \'S966\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S967\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S968\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS25();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S968");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S968");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S968");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S965");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_NONE,OPLOCK_" +
                    "LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S970");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(0)), oplockLevel, "oplockLevel of OplockBreakResponse, state S970");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S970");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_NONE.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S964");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S971");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS972() {
            this.Manager.Comment("reaching state \'S972\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S973\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S974\'");
            int temp616 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker3)));
            if ((temp616 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label373;
            }
            if ((temp616 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label373;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker3)));
        label373:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S974");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S974");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S974");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<351> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S974");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S974");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S974");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S971");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S976");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S976");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S976");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS955OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S976");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S976");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S976");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVEL_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_EXCLUSIVE or SMB2_OPLOCK_LEVE" +
                    "L_BATCH, and if OplockLevel is not SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NON" +
                    "E, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S977
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977");
            this.Manager.Comment("reaching state \'S977\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp621;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp621);
            this.Manager.AddReturn(ReadConfigInfo, null, temp621);
            this.Manager.Comment("reaching state \'S978\'");
            int temp631 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977ReadConfigChecker3)));
            if ((temp631 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label383;
            }
            if ((temp631 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label383;
            }
            if ((temp631 == 2)) {
                this.Manager.Comment("reaching state \'S979\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S980\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S981\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp622;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp623;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_BATCH,WriteF" +
                        "romAnotherOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values.OPLOCK_LEVEL_BATCH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(1)), out temp622, out temp623);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp622, temp623);
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS923();
                goto label383;
            }
            if ((temp631 == 3)) {
                this.Manager.Comment("reaching state \'S982\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S983\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S984\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp624;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp625;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp624, out temp625);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp624, temp625);
                this.Manager.Comment("reaching state \'S985\'");
                int temp630 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977RequestOplockAndOperateFileRequestChecker1)));
                if ((temp630 == 0)) {
                    this.Manager.Comment("reaching state \'S986\'");
                    int temp626 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakNotificationChecker1)));
                    if ((temp626 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS987();
                        goto label378;
                    }
                    if ((temp626 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS987();
                        goto label378;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S990\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S991\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker1)));
                    }
                label378:
;
                    goto label382;
                }
                if ((temp630 == 1)) {
                    this.Manager.Comment("reaching state \'S992\'");
                    int temp629 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakNotificationChecker3)));
                    if ((temp629 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS993();
                        goto label381;
                    }
                    if ((temp629 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS993();
                        goto label381;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
                    this.Manager.Comment("reaching state \'S996\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S997\'");
                    int temp628 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker5)));
                    if ((temp628 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS13();
                        goto label380;
                    }
                    if ((temp628 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS14();
                        goto label380;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker5)));
                label380:
;
                label381:
;
                    goto label382;
                }
                throw new InvalidOperationException("never reached");
            label382:
;
                goto label383;
            }
            throw new InvalidOperationException("never reached");
        label383:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S978");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S978");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S978");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S978");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S985");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S985");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S986");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS987() {
            this.Manager.Comment("reaching state \'S987\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S988\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S989\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S989");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S989");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S989");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S986");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S991");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S991");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S991");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S985");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S985");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S992");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS993() {
            this.Manager.Comment("reaching state \'S993\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S994\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S995\'");
            int temp627 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker3)));
            if ((temp627 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label379;
            }
            if ((temp627 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label379;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker3)));
        label379:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S995");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S995");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S995");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S995");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S995");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S995");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S992");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S997");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S997");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S997");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS977OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_PARAMETER,oplockLevel1,OP" +
                    "LOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of OplockBreakResponse, state S997");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S997");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S997");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_PARAMETER."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S998
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OplockOnShareWithoutForceLevel2OrSOFS)]
        public void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998() {
            this.Manager.BeginTest("OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998");
            this.Manager.Comment("reaching state \'S998\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp632;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IOplockAdapterInstance.ReadConfig(out temp632);
            this.Manager.AddReturn(ReadConfigInfo, null, temp632);
            this.Manager.Comment("reaching state \'S999\'");
            int temp645 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998ReadConfigChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998ReadConfigChecker1)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998ReadConfigChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998ReadConfigChecker3)));
            if ((temp645 == 0)) {
                this.Manager.Comment("reaching state \'S1000\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOC" +
                        "K,NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1001\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1002\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp633;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp634;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp633, out temp634);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp633, temp634);
                this.Manager.Comment("reaching state \'S1003\'");
                int temp637 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998RequestOplockAndOperateFileRequestChecker)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998RequestOplockAndOperateFileRequestChecker1)));
                if ((temp637 == 0)) {
                    this.Manager.Comment("reaching state \'S1004\'");
                    int temp635 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker1)));
                    if ((temp635 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1005();
                        goto label384;
                    }
                    if ((temp635 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1005();
                        goto label384;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S1009\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1010\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker1))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1011();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker1)));
                    }
                label384:
;
                    goto label386;
                }
                if ((temp637 == 1)) {
                    this.Manager.Comment("reaching state \'S1012\'");
                    int temp636 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker2)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker3)));
                    if ((temp636 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1013();
                        goto label385;
                    }
                    if ((temp636 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1013();
                        goto label385;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                            "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
                    this.Manager.Comment("reaching state \'S1017\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1018\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker3))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker3)));
                    }
                label385:
;
                    goto label386;
                }
                throw new InvalidOperationException("never reached");
            label386:
;
                goto label392;
            }
            if ((temp645 == 1)) {
                this.Manager.Comment("reaching state \'S1019\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,NO_SMB2_SHAREFLAG_FORCE_LEVELII_OPLOCK" +
                        ",NO_STYPE_CLUSTER_SOFS)\'");
                this.IOplockAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.ModelShareType)(0)));
                this.Manager.Comment("reaching state \'S1020\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1021\'");
                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values temp638;
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig temp639;
                this.Manager.Comment("executing step \'call RequestOplockAndOperateFileRequest(OPLOCK_LEVEL_II,CreateAno" +
                        "therOpen,out _,out _)\'");
                this.IOplockAdapterInstance.RequestOplockAndOperateFileRequest(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.RequestedOplockLevel_Values)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockFileOperation)(0)), out temp638, out temp639);
                this.Manager.AddReturn(RequestOplockAndOperateFileRequestInfo, null, temp638, temp639);
                this.Manager.Comment("reaching state \'S1022\'");
                int temp644 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998RequestOplockAndOperateFileRequestChecker2)), new ExpectedReturn(OplockOnShareWithoutForceLevel2OrSOFSTestCase.RequestOplockAndOperateFileRequestInfo, null, new RequestOplockAndOperateFileRequestDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998RequestOplockAndOperateFileRequestChecker3)));
                if ((temp644 == 0)) {
                    this.Manager.Comment("reaching state \'S1023\'");
                    int temp640 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker4)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker5)));
                    if ((temp640 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS907();
                        goto label387;
                    }
                    if ((temp640 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS907();
                        goto label387;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S1024\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1025\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker4))) != -1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS19();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker4)));
                    }
                label387:
;
                    goto label391;
                }
                if ((temp644 == 1)) {
                    this.Manager.Comment("reaching state \'S1026\'");
                    int temp643 = this.Manager.ExpectEvent(this.ProceedControlTimeout, false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakNotificationInfo, null, new OplockBreakNotificationDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker7)));
                    if ((temp643 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1027();
                        goto label390;
                    }
                    if ((temp643 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1027();
                        goto label390;
                    }
                    this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                            "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
                    this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
                    this.Manager.Comment("reaching state \'S1031\'");
                    this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
                    this.Manager.Comment("reaching state \'S1032\'");
                    int temp642 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker9)));
                    if ((temp642 == 0)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS13();
                        goto label389;
                    }
                    if ((temp642 == 1)) {
                        OplockOnShareWithoutForceLevel2OrSOFSTestCaseS14();
                        goto label389;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker8)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker9)));
                label389:
;
                label390:
;
                    goto label391;
                }
                throw new InvalidOperationException("never reached");
            label391:
;
                goto label392;
            }
            if ((temp645 == 2)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS112();
                goto label392;
            }
            if ((temp645 == 3)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS131();
                goto label392;
            }
            throw new InvalidOperationException("never reached");
        label392:
;
            this.Manager.EndTest();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S999");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998RequestOplockAndOperateFileRequestChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1003");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1003");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1004");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1005() {
            this.Manager.Comment("reaching state \'S1005\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionNotFound,Pe" +
                    "rsistentMatchesDurableFileId,OPLOCK_LEVEL_NONE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)));
            this.Manager.Comment("reaching state \'S1006\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1007\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1008();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1007");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1007");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1007");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1004");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1010");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1010");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1010");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.oplockLevelOnOpen, "v4 == oplockLevelOnOpen");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998RequestOplockAndOperateFileRequestChecker1(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1003");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1003");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1012");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1013() {
            this.Manager.Comment("reaching state \'S1013\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_LEASE)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_LEASE);
            this.Manager.Comment("reaching state \'S1014\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1015\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker2))) != -1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1016();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker2)));
            }
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1015");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1015");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1015");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the OplockLevel in the acknowledgment is SMB2_OPLOCK_LEVEL_LEASE, t" +
                    "he server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<350> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1012");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_FILE_CLOSED,oplockLevel1,oplockLe" +
                    "velOnOpen)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of OplockBreakResponse, state S1018");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1018");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevelOnOpen, (System.Int32)oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1018");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. "", ""[TestTag] InvalidIdentifier"", ""[TestInfo] Open is not found.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.oplockLevelOnOpen, "v1 == oplockLevelOnOpen");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Next, the server MUST locate the open on which the client is acknowledging an oplock break by performing a lookup in Session.OpenTable using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED. """);
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] Open is not found.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S999");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998RequestOplockAndOperateFileRequestChecker2(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out OPLOCK_LEVEL_NONE,o" +
                    "ut c1]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1022");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1022");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'grantedOplockLevel\'");
            this.grantedOplockLevel.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker4(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1023");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker5(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1023");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1025");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1025");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(0)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1025");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is None."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is None.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998RequestOplockAndOperateFileRequestChecker3(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockLevel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return RequestOplockAndOperateFileRequest/[out grantedOplockLevel," +
                    "out c1]\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockLevel, (System.Int32)grantedOplockLevel, "grantedOplockLevel of RequestOplockAndOperateFileRequest, state S1022");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c1, c, "c of RequestOplockAndOperateFileRequest, state S1022");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_L" +
                        "EVEL_NONE.\", \"[TestInfo] Open.OplockState is set to None.\", \"[TestInfo] Open.Opl" +
                        "ockState is set to Held.\"");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.grantedOplockLevel.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(grantedOplockLevel == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.grantedOplockLevel, "v1 == grantedOplockLevel");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v2, this.c1, "v2 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v2.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v2.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to None.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Held.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker6(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_NONE)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(0)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1026");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS1027() {
            this.Manager.Comment("reaching state \'S1027\'");
            this.Manager.Comment("executing step \'call OplockBreakAcknowledgementRequest(VolatilePortionFound,Persi" +
                    "stentMatchesDurableFileId,OPLOCK_LEVEL_II)\'");
            this.IOplockAdapterInstance.OplockBreakAcknowledgementRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockVolatilePortion)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockPersistentPortion)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S1028\'");
            this.Manager.Comment("checking step \'return OplockBreakAcknowledgementRequest\'");
            this.Manager.Comment("reaching state \'S1029\'");
            int temp641 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker7)));
            if ((temp641 == 0)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label388;
            }
            if ((temp641 == 1)) {
                OplockOnShareWithoutForceLevel2OrSOFSTestCaseS10();
                goto label388;
            }
            if ((temp641 == 2)) {
                this.Manager.Comment("reaching state \'S1030\'");
                goto label388;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker5)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker6)), new ExpectedEvent(OplockOnShareWithoutForceLevel2OrSOFSTestCase.OplockBreakResponseInfo, null, new OplockBreakResponseDelegate1(this.OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker7)));
        label388:
;
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1029");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1029");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1029");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store, as described in section 3.3.4.6, with a new level SMB2_OPLOCK_LEVEL_NONE in an implementation-specific manner,<352> and set Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE and Open.OplockState to None.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(status,oplockLevel1,OPLOCK_LEVEL_BATCH)\'" +
                    "");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OplockBreakResponse, state S1029");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1029");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1029");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SMB2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response with the error code received."", ""[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockState is set to None""");
                throw;
            }
            this.Manager.Assert(((~(System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0))))) == 0) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v5, this.status, "v5 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates an error, set the Open.OplockLevel to SM" +
                    "B2_OPLOCK_LEVEL_NONE, the Open.OplockState to None, and send the error response " +
                    "with the error code received.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to SMB2_OPLOCK_LEVEL_NONE, and Open.OplockSta" +
                    "te is set to None\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v5\'");
            this.v5.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_SUCCESS,OPLOCK_LEVEL_II,OPLOCK_LE" +
                    "VEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OplockBreakResponse, state S1029");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values)(1)), oplockLevel, "oplockLevel of OplockBreakResponse, state S1029");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1029");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Breaking."", ""[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request received from the object store as described in section 3.3.4.6, with a new level received in OplockLevel in an implementation-specific manner.<353>"", ""[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Open.OplockState as follows:"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_OPLOCK_LEVEL_II and Open.OplockState to Held."", ""[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is set to None"", ""[MS-SMB2] The server then MUST construct an oplock break response using the syntax specified in section 2.2.25 with the following value:"", ""[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel."", ""[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Breaking.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is Breaking, complete the oplock break request rec" +
                    "eived from the object store as described in section 3.3.4.6, with a new level re" +
                    "ceived in OplockLevel in an implementation-specific manner.<353>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the object store indicates success, update Open.OplockLevel and Ope" +
                    "n.OplockState as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II, set Open.OplockLevel to SMB2_O" +
                    "PLOCK_LEVEL_II and Open.OplockState to Held.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is set to OPLOCK_LEVEL_II, and Open.OplockState is s" +
                    "et to None\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct an oplock break response using the synt" +
                    "ax specified in section 2.2.25 with the following value:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] OplockLevel MUST be set to Open.OplockLevel.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OPLOCK_LEVEL_II.\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakNotificationChecker7(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values acceptableAckOplockLevel) {
            this.Manager.Comment("checking step \'event OplockBreakNotification(OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Notification_Packet_OplockLevel_Values)(1)), acceptableAckOplockLevel, "acceptableAckOplockLevel of OplockBreakNotification, state S1026");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or SMB2_OPLOCK_LEVEL_II."", ""[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find an entry whose Open.LocalOpen matches the one provided in the oplock break. "", ""[MS-SMB2] If no entry is found, the break indication MUST be ignored and the server MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new oplock level."", ""[TestInfo] Open should not be NULL."", ""[TestInfo] Open.OplockState is set to Breaking.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.6: The new oplock level MUST be either SMB2_OPLOCK_LEVEL_NONE or" +
                    " SMB2_OPLOCK_LEVEL_II.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the open by walking the GlobalOpenTable to find" +
                    " an entry whose Open.LocalOpen matches the one provided in the oplock break. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If no entry is found, the break indication MUST be ignored and the ser" +
                    "ver MUST complete the oplock break call with SMB2_OPLOCK_LEVEL_NONE as the new o" +
                    "plock level.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open should not be NULL.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is set to Breaking.\"");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_OPLOCK_PROTOCOL,oplockLev" +
                    "el1,OPLOCK_LEVEL_II)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_OPLOCK_PROTOCOL, status, "status of OplockBreakResponse, state S1032");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1032");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)), oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1032");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(1))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 1");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockLevel is SMB2_OPLOCK_LEVEL_II, and if OplockLevel is not" +
                    " SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_OPLOCK_PROTOCOL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998OplockBreakResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OPLOCK_BREAK_Response_OplockLevel_Values oplockLevel, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values oplockLevelOnOpen) {
            this.Manager.Comment("checking step \'event OplockBreakResponse(STATUS_INVALID_DEVICE_STATE,oplockLevel1" +
                    ",OPLOCK_LEVEL_BATCH)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_DEVICE_STATE, status, "status of OplockBreakResponse, state S1032");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.oplockLevel1, (System.Int32)oplockLevel, "oplockLevel of OplockBreakResponse, state S1032");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH, oplockLevelOnOpen, "oplockLevelOnOpen of OplockBreakResponse, state S1032");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment"", ""[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the server MUST do the following:"", ""[TestInfo] Open.OplockState is Held."", ""[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgment, and send an error response with STATUS_INVALID_DEVICE_STATE."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((byte)(((int)(((byte)(this.grantedOplockLevel.Value)))))))))), ((object)(9))), "Fail to check the assumption : (byte)(byte)grantedOplockLevel == 9");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.oplockLevel1, "v3 == oplockLevel1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.22.1   Processing an Oplock Acknowledgment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If OplockLevel is SMB2_OPLOCK_LEVEL_II or SMB2_OPLOCK_LEVEL_NONE, the " +
                    "server MUST do the following:\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OplockState is Held.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.OplockState is not Breaking, stop processing the acknowledgmen" +
                    "t, and send an error response with STATUS_INVALID_DEVICE_STATE.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'oplockLevel1\'");
            this.oplockLevel1.Unbind();
            this.Manager.Comment("Unbinding variable \'oplockLevelOnOpen\'");
            this.oplockLevelOnOpen.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S999");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void OplockOnShareWithoutForceLevel2OrSOFSTestCaseS998ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.c, c, "c of ReadConfig, state S999");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Oplock.OplockConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
    }
}
