// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BreakReadHandleLeaseV2TestCase : PtfTestClassBase {
        
        public BreakReadHandleLeaseV2TestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c);
        
        public delegate void LeaseBreakResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState);
        
        public delegate void OnLeaseBreakNotificationDelegate1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState);
        
        public delegate void CreateResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig).MakeByRefType());
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo OnLeaseBreakNotificationInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "OnLeaseBreakNotification");
        
        static System.Reflection.EventInfo LeaseBreakResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "LeaseBreakResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter ILeasingAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> c1;
        
        private IVariable<int> leaseFlags;
        
        private IVariable<int> leaseState;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> v;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> v1;
        
        private IVariable<int> v2;
        
        private IVariable<int> v3;
        
        private IVariable<int> v4;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ILeasingAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter))));
            this.Manager.Subscribe(CreateResponseInfo, this.ILeasingAdapterInstance);
            this.Manager.Subscribe(LeaseBreakResponseInfo, this.ILeasingAdapterInstance);
            this.Manager.Subscribe(OnLeaseBreakNotificationInfo, this.ILeasingAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("c1");
            this.leaseFlags = this.Manager.CreateVariable<int>("leaseFlags");
            this.leaseState = this.Manager.CreateVariable<int>("leaseState");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("v");
            this.v1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<int>("v3");
            this.v4 = this.Manager.CreateVariable<int>("v4");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS0() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS0ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS0ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS0ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS0ReadConfigChecker3)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S6\'");
                int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker2)));
                if ((temp7 == 0)) {
                    this.Manager.Comment("reaching state \'S31\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp1;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp1);
                    this.Manager.Comment("reaching state \'S32\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp1, "c of FileOperationToBreakLeaseRequest, state S32");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S33\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S34\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S35\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp2;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp2);
                    this.Manager.Comment("reaching state \'S36\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp2, "c of FileOperationToBreakLeaseRequest, state S36");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                                "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                                "ns. Before processing one of the following operations, the underlying object sto" +
                                "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                                " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                                "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                                "e incompatible with opens from different ClientIds or local applications as desc" +
                                "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                                " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                                "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                                "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                                "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                                "d Lease.Version is 2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                            " from different ClientIds or local applications as described in [MS-FSA] section" +
                            " 2.1.5.1.2.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
                    this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS13();
                    goto label1;
                }
                if ((temp7 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label1;
                }
                if ((temp7 == 2)) {
                    this.Manager.Comment("reaching state \'S7\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp5;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RENAMEED,SameClientId,Smb30" +
                            ",out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RENAMEED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp5);
                    this.Manager.Comment("reaching state \'S8\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp5, "c of FileOperationToBreakLeaseRequest, state S8");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S9\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S10\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S11\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp6;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                            "ient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp6);
                    this.Manager.Comment("reaching state \'S12\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp6, "c of FileOperationToBreakLeaseRequest, state S12");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                                "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                                "ns. Before processing one of the following operations, the underlying object sto" +
                                "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                                " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                                "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                                "e incompatible with opens from different ClientIds or local applications as desc" +
                                "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                                " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                                "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                                "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                                "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                                "d Lease.Version is 2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                            " from different ClientIds or local applications as described in [MS-FSA] section" +
                            " 2.1.5.1.2.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
                    this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS13();
                    goto label1;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker2)));
            label1:
;
                goto label5;
            }
            if ((temp17 == 1)) {
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S42\'");
                int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker5)));
                if ((temp16 == 0)) {
                    this.Manager.Comment("reaching state \'S43\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp8;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp8);
                    this.Manager.Comment("reaching state \'S44\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp8, "c of FileOperationToBreakLeaseRequest, state S44");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S45\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S46\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S47\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp9;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp9);
                    this.Manager.Comment("reaching state \'S48\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp9, "c of FileOperationToBreakLeaseRequest, state S48");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                                "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                                "ns. Before processing one of the following operations, the underlying object sto" +
                                "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                                " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                                "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                                "e incompatible with opens from different ClientIds or local applications as desc" +
                                "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                                " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                                "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                                "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                                "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                                "d Lease.Version is 2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                            " from different ClientIds or local applications as described in [MS-FSA] section" +
                            " 2.1.5.1.2.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
                    this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS49();
                    goto label4;
                }
                if ((temp16 == 1)) {
                    this.Manager.Comment("reaching state \'S67\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp12;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RENAMEED,SameClientId,Smb30" +
                            ",out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RENAMEED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp12);
                    this.Manager.Comment("reaching state \'S68\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp12, "c of FileOperationToBreakLeaseRequest, state S68");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S69\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S70\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S71\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp13;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                            "ient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp13);
                    this.Manager.Comment("reaching state \'S72\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp13, "c of FileOperationToBreakLeaseRequest, state S72");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                                "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                                "ns. Before processing one of the following operations, the underlying object sto" +
                                "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                                " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                                "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                                "e incompatible with opens from different ClientIds or local applications as desc" +
                                "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                                " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                                "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                                "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                                "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                                "d Lease.Version is 2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                            " from different ClientIds or local applications as described in [MS-FSA] section" +
                            " 2.1.5.1.2.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
                    this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS73();
                    goto label4;
                }
                if ((temp16 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label4;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker5)));
            label4:
;
                goto label5;
            }
            if ((temp17 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label5;
            }
            if ((temp17 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS13() {
            this.Manager.Comment("reaching state \'S13\'");
            int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker2)));
            if ((temp4 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S16\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S17\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S18\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S19\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp3;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp3);
                    this.Manager.Comment("reaching state \'S20\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp3, "c of FileOperationToBreakLeaseRequest, state S20");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker)));
                }
                goto label0;
            }
            if ((temp4 == 1)) {
                BreakReadHandleLeaseV2TestCaseS25();
                goto label0;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker2)));
        label0:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S16");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S16");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS21() {
            this.Manager.Comment("reaching state \'S21\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S24\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker1)));
            }
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(3,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 3, newEpoch, "newEpoch of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S21");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S27\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S30\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker1)));
            }
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S27");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS37() {
            this.Manager.Comment("reaching state \'S37\'");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS49() {
            this.Manager.Comment("reaching state \'S49\'");
            int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker5)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S52\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S53\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S54\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S55\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp10;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp10);
                    this.Manager.Comment("reaching state \'S56\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp10, "c of FileOperationToBreakLeaseRequest, state S56");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker2)));
                }
                goto label2;
            }
            if ((temp11 == 1)) {
                BreakReadHandleLeaseV2TestCaseS61();
                goto label2;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker5)));
        label2:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S52");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS57() {
            this.Manager.Comment("reaching state \'S57\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker4))) != -1)) {
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S60\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker4)));
            }
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker4(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(3,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 3, newEpoch, "newEpoch of OnLeaseBreakNotification, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S57");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S57");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker5(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S49");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS61() {
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S63\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S66\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker3)));
            }
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S63");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS73() {
            this.Manager.Comment("reaching state \'S73\'");
            int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker6)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker7)));
            if ((temp15 == 0)) {
                BreakReadHandleLeaseV2TestCaseS61();
                goto label3;
            }
            if ((temp15 == 1)) {
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S75\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S76\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker4))) != -1)) {
                    this.Manager.Comment("reaching state \'S77\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S78\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S79\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp14;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp14);
                    this.Manager.Comment("reaching state \'S80\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp14, "c of FileOperationToBreakLeaseRequest, state S80");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker4)));
                }
                goto label3;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker6)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker7)));
        label3:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker6(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0OnLeaseBreakNotificationChecker7(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S73");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0LeaseBreakResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S76");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S76");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS81() {
            this.Manager.Comment("reaching state \'S81\'");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS82() {
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S82\'.");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS83() {
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S83\'.");
        }
        #endregion
        
        #region Test Starting in S135
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS135() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS135");
            this.Manager.Comment("reaching state \'S135\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp18;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp18);
            this.Manager.AddReturn(ReadConfigInfo, null, temp18);
            this.Manager.Comment("reaching state \'S136\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS135ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS135ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS135ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS135ReadConfigChecker3)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S141\'");
                int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker2)));
                if ((temp23 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label7;
                }
                if ((temp23 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS142();
                    goto label7;
                }
                if ((temp23 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS142();
                    goto label7;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker2)));
            label7:
;
                goto label10;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S160\'");
                int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker5)));
                if ((temp28 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS161();
                    goto label9;
                }
                if ((temp28 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS161();
                    goto label9;
                }
                if ((temp28 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label9;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker5)));
            label9:
;
                goto label10;
            }
            if ((temp29 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label10;
            }
            if ((temp29 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S136");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS115() {
            this.Manager.Comment("reaching state \'S115\'");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS142() {
            this.Manager.Comment("reaching state \'S142\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp19;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp19);
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp19, "c of FileOperationToBreakLeaseRequest, state S143");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S146\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp20;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp20);
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp20, "c of FileOperationToBreakLeaseRequest, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS148();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS148() {
            this.Manager.Comment("reaching state \'S148\'");
            int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker1)));
            if ((temp22 == 0)) {
                BreakReadHandleLeaseV2TestCaseS109();
                goto label6;
            }
            if ((temp22 == 1)) {
                this.Manager.Comment("reaching state \'S149\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S151\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S152\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S153\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S154\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp21;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp21);
                    this.Manager.Comment("reaching state \'S155\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp21, "c of FileOperationToBreakLeaseRequest, state S155");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135LeaseBreakResponseChecker1)));
                }
                goto label6;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker1)));
        label6:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS109() {
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S110\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S111\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135LeaseBreakResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S114\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135LeaseBreakResponseChecker)));
            }
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S111");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S148");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S151");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS105() {
            this.Manager.Comment("reaching state \'S105\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S108\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker2)));
            }
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(3,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 3, newEpoch, "newEpoch of OnLeaseBreakNotification, state S105");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S105");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S105");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S105");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S136");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS161() {
            this.Manager.Comment("reaching state \'S161\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp24;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp24);
            this.Manager.Comment("reaching state \'S162\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp24, "c of FileOperationToBreakLeaseRequest, state S162");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S163\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S164\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S165\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp25;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp25);
            this.Manager.Comment("reaching state \'S166\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp25, "c of FileOperationToBreakLeaseRequest, state S166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS167();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS167() {
            this.Manager.Comment("reaching state \'S167\'");
            int temp27 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker4)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S170\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135LeaseBreakResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S171\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S172\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S173\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp26;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp26);
                    this.Manager.Comment("reaching state \'S174\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp26, "c of FileOperationToBreakLeaseRequest, state S174");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS135LeaseBreakResponseChecker2)));
                }
                goto label8;
            }
            if ((temp27 == 1)) {
                BreakReadHandleLeaseV2TestCaseS25();
                goto label8;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker4)));
        label8:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135LeaseBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S170");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S170");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135OnLeaseBreakNotificationChecker4(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S167");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S160");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S160");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S136");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS135ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S136");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S175
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS175() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS175");
            this.Manager.Comment("reaching state \'S175\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp30;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp30);
            this.Manager.AddReturn(ReadConfigInfo, null, temp30);
            this.Manager.Comment("reaching state \'S176\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS175ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS175ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS175ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS175ReadConfigChecker3)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S177\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S181\'");
                int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker2)));
                if ((temp35 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS182();
                    goto label12;
                }
                if ((temp35 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS182();
                    goto label12;
                }
                if ((temp35 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label12;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker2)));
            label12:
;
                goto label15;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S200\'");
                int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker5)));
                if ((temp40 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS201();
                    goto label14;
                }
                if ((temp40 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS201();
                    goto label14;
                }
                if ((temp40 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label14;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker5)));
            label14:
;
                goto label15;
            }
            if ((temp41 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label15;
            }
            if ((temp41 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S176");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS182() {
            this.Manager.Comment("reaching state \'S182\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp31;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp31);
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp31, "c of FileOperationToBreakLeaseRequest, state S183");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S186\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp32;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp32);
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp32, "c of FileOperationToBreakLeaseRequest, state S187");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS188();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS188() {
            this.Manager.Comment("reaching state \'S188\'");
            int temp34 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker1)));
            if ((temp34 == 0)) {
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S191\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S192\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S193\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S194\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp33;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp33);
                    this.Manager.Comment("reaching state \'S195\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp33, "c of FileOperationToBreakLeaseRequest, state S195");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175LeaseBreakResponseChecker)));
                }
                goto label11;
            }
            if ((temp34 == 1)) {
                BreakReadHandleLeaseV2TestCaseS61();
                goto label11;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker1)));
        label11:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S191");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S188");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S181");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S176");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S200");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS201() {
            this.Manager.Comment("reaching state \'S201\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp36;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp36);
            this.Manager.Comment("reaching state \'S202\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp36, "c of FileOperationToBreakLeaseRequest, state S202");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S204\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S205\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp37;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp37);
            this.Manager.Comment("reaching state \'S206\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp37, "c of FileOperationToBreakLeaseRequest, state S206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS207();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS207() {
            this.Manager.Comment("reaching state \'S207\'");
            int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker3)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S210\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S211\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S212\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S213\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp38;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp38);
                    this.Manager.Comment("reaching state \'S214\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp38, "c of FileOperationToBreakLeaseRequest, state S214");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS175LeaseBreakResponseChecker1)));
                }
                goto label13;
            }
            if ((temp39 == 1)) {
                BreakReadHandleLeaseV2TestCaseS25();
                goto label13;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker3)));
        label13:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S210");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S210");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S200");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S200");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S176");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS175ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S176");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S215
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS215() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS215");
            this.Manager.Comment("reaching state \'S215\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp42;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp42);
            this.Manager.AddReturn(ReadConfigInfo, null, temp42);
            this.Manager.Comment("reaching state \'S216\'");
            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS215ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS215ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS215ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS215ReadConfigChecker3)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S218\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S220\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S221\'");
                int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker2)));
                if ((temp47 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS222();
                    goto label17;
                }
                if ((temp47 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS222();
                    goto label17;
                }
                if ((temp47 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label17;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker2)));
            label17:
;
                goto label20;
            }
            if ((temp53 == 1)) {
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S240\'");
                int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker5)));
                if ((temp52 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS241();
                    goto label19;
                }
                if ((temp52 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS241();
                    goto label19;
                }
                if ((temp52 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label19;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker5)));
            label19:
;
                goto label20;
            }
            if ((temp53 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label20;
            }
            if ((temp53 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS222() {
            this.Manager.Comment("reaching state \'S222\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp43;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp43);
            this.Manager.Comment("reaching state \'S223\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp43, "c of FileOperationToBreakLeaseRequest, state S223");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S224\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S225\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S226\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp44;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp44);
            this.Manager.Comment("reaching state \'S227\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp44, "c of FileOperationToBreakLeaseRequest, state S227");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS228();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS228() {
            this.Manager.Comment("reaching state \'S228\'");
            int temp46 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker1)));
            if ((temp46 == 0)) {
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S231\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S232\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S233\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S234\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp45;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp45);
                    this.Manager.Comment("reaching state \'S235\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp45, "c of FileOperationToBreakLeaseRequest, state S235");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215LeaseBreakResponseChecker)));
                }
                goto label16;
            }
            if ((temp46 == 1)) {
                BreakReadHandleLeaseV2TestCaseS61();
                goto label16;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker1)));
        label16:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S228");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S231");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S231");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S228");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S228");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS241() {
            this.Manager.Comment("reaching state \'S241\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp48;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp48);
            this.Manager.Comment("reaching state \'S242\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp48, "c of FileOperationToBreakLeaseRequest, state S242");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S244\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S245\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp49;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp49);
            this.Manager.Comment("reaching state \'S246\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp49, "c of FileOperationToBreakLeaseRequest, state S246");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS127();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS127() {
            this.Manager.Comment("reaching state \'S127\'");
            int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker3)));
            if ((temp51 == 0)) {
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S130\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S131\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S132\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S133\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp50;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp50);
                    this.Manager.Comment("reaching state \'S134\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp50, "c of FileOperationToBreakLeaseRequest, state S134");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS215LeaseBreakResponseChecker1)));
                }
                goto label18;
            }
            if ((temp51 == 1)) {
                BreakReadHandleLeaseV2TestCaseS25();
                goto label18;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker3)));
        label18:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S130");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S127");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S216");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS215ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S247
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS247() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS247");
            this.Manager.Comment("reaching state \'S247\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp54;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp54);
            this.Manager.AddReturn(ReadConfigInfo, null, temp54);
            this.Manager.Comment("reaching state \'S248\'");
            int temp63 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS247ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS247ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS247ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS247ReadConfigChecker3)));
            if ((temp63 == 0)) {
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S253\'");
                int temp59 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker2)));
                if ((temp59 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS254();
                    goto label22;
                }
                if ((temp59 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS254();
                    goto label22;
                }
                if ((temp59 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label22;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker2)));
            label22:
;
                goto label24;
            }
            if ((temp63 == 1)) {
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S270\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S271\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S272\'");
                int temp62 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker5)));
                if ((temp62 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS273();
                    goto label23;
                }
                if ((temp62 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS273();
                    goto label23;
                }
                if ((temp62 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label23;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker5)));
            label23:
;
                goto label24;
            }
            if ((temp63 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label24;
            }
            if ((temp63 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label24;
            }
            throw new InvalidOperationException("never reached");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S248");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S253");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S253");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS254() {
            this.Manager.Comment("reaching state \'S254\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp55;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp55);
            this.Manager.Comment("reaching state \'S255\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp55, "c of FileOperationToBreakLeaseRequest, state S255");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S256\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S257\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S258\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp56;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp56);
            this.Manager.Comment("reaching state \'S259\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp56, "c of FileOperationToBreakLeaseRequest, state S259");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS260();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS260() {
            this.Manager.Comment("reaching state \'S260\'");
            int temp58 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS247OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS247OnLeaseBreakNotificationChecker1)));
            if ((temp58 == 0)) {
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S262\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S263\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S264\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S265\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S266\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp57;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                            "mb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp57);
                    this.Manager.Comment("reaching state \'S267\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp57, "c of FileOperationToBreakLeaseRequest, state S267");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS247LeaseBreakResponseChecker)));
                }
                goto label21;
            }
            if ((temp58 == 1)) {
                BreakReadHandleLeaseV2TestCaseS61();
                goto label21;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS247OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS247OnLeaseBreakNotificationChecker1)));
        label21:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S260");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S260");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S263");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S263");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S260");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S260");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S253");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S253");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S253");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S253");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S253");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S248");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S272");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S272");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S272");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S272");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S272");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS273() {
            this.Manager.Comment("reaching state \'S273\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp60;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp60);
            this.Manager.Comment("reaching state \'S274\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp60, "c of FileOperationToBreakLeaseRequest, state S274");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S275\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S276\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S277\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp61;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp61);
            this.Manager.Comment("reaching state \'S278\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp61, "c of FileOperationToBreakLeaseRequest, state S278");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS167();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S272");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S272");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S272");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S272");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S272");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S272");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S272");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S272");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S272");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S272");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S248");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS247ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S248");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S279
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS279() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS279");
            this.Manager.Comment("reaching state \'S279\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp64;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp64);
            this.Manager.AddReturn(ReadConfigInfo, null, temp64);
            this.Manager.Comment("reaching state \'S280\'");
            int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS279ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS279ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS279ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS279ReadConfigChecker3)));
            if ((temp75 == 0)) {
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S284\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S285\'");
                int temp69 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker2)));
                if ((temp69 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS286();
                    goto label26;
                }
                if ((temp69 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS286();
                    goto label26;
                }
                if ((temp69 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label26;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker2)));
            label26:
;
                goto label29;
            }
            if ((temp75 == 1)) {
                this.Manager.Comment("reaching state \'S300\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S301\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S302\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S304\'");
                int temp74 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker5)));
                if ((temp74 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS305();
                    goto label28;
                }
                if ((temp74 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS305();
                    goto label28;
                }
                if ((temp74 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label28;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker5)));
            label28:
;
                goto label29;
            }
            if ((temp75 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label29;
            }
            if ((temp75 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S280");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S285");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S285");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS286() {
            this.Manager.Comment("reaching state \'S286\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp65;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp65);
            this.Manager.Comment("reaching state \'S287\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp65, "c of FileOperationToBreakLeaseRequest, state S287");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S288\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S289\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S290\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp66;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp66);
            this.Manager.Comment("reaching state \'S291\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp66, "c of FileOperationToBreakLeaseRequest, state S291");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS292();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS292() {
            this.Manager.Comment("reaching state \'S292\'");
            int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker1)));
            if ((temp68 == 0)) {
                this.Manager.Comment("reaching state \'S293\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S295\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S296\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S297\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S298\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp67;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp67);
                    this.Manager.Comment("reaching state \'S299\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp67, "c of FileOperationToBreakLeaseRequest, state S299");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279LeaseBreakResponseChecker)));
                }
                goto label25;
            }
            if ((temp68 == 1)) {
                BreakReadHandleLeaseV2TestCaseS61();
                goto label25;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker1)));
        label25:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S292");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S292");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S292");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S292");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S295");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S292");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S292");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S292");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S292");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S285");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S285");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S285");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S285");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S285");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S285");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S280");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S304");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S304");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS305() {
            this.Manager.Comment("reaching state \'S305\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp70;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp70);
            this.Manager.Comment("reaching state \'S306\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp70, "c of FileOperationToBreakLeaseRequest, state S306");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S307\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S308\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S309\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp71;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp71);
            this.Manager.Comment("reaching state \'S310\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp71, "c of FileOperationToBreakLeaseRequest, state S310");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS311();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS311() {
            this.Manager.Comment("reaching state \'S311\'");
            int temp73 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker3)));
            if ((temp73 == 0)) {
                BreakReadHandleLeaseV2TestCaseS25();
                goto label27;
            }
            if ((temp73 == 1)) {
                this.Manager.Comment("reaching state \'S312\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S313\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S314\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S315\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S316\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S317\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp72;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                            "mb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp72);
                    this.Manager.Comment("reaching state \'S318\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp72, "c of FileOperationToBreakLeaseRequest, state S318");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS279LeaseBreakResponseChecker1)));
                }
                goto label27;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker3)));
        label27:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S311");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S311");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S311");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S311");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S311");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S311");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S311");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S311");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S314");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S314");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S304");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S304");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S304");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S304");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S304");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S280");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS279ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S280");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S319
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS319() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS319");
            this.Manager.Comment("reaching state \'S319\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp76;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp76);
            this.Manager.AddReturn(ReadConfigInfo, null, temp76);
            this.Manager.Comment("reaching state \'S320\'");
            int temp87 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS319ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS319ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS319ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS319ReadConfigChecker3)));
            if ((temp87 == 0)) {
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S322\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S323\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S324\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S325\'");
                int temp81 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker2)));
                if ((temp81 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS326();
                    goto label31;
                }
                if ((temp81 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS326();
                    goto label31;
                }
                if ((temp81 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label31;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker2)));
            label31:
;
                goto label34;
            }
            if ((temp87 == 1)) {
                this.Manager.Comment("reaching state \'S340\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S341\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S344\'");
                int temp86 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker5)));
                if ((temp86 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS345();
                    goto label33;
                }
                if ((temp86 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS345();
                    goto label33;
                }
                if ((temp86 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label33;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker5)));
            label33:
;
                goto label34;
            }
            if ((temp87 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label34;
            }
            if ((temp87 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label34;
            }
            throw new InvalidOperationException("never reached");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S320");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S325");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S325");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S325");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S325");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S325");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS326() {
            this.Manager.Comment("reaching state \'S326\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp77;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp77);
            this.Manager.Comment("reaching state \'S327\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp77, "c of FileOperationToBreakLeaseRequest, state S327");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S328\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S329\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S330\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp78;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp78);
            this.Manager.Comment("reaching state \'S331\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp78, "c of FileOperationToBreakLeaseRequest, state S331");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS332();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS332() {
            this.Manager.Comment("reaching state \'S332\'");
            int temp80 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker1)));
            if ((temp80 == 0)) {
                this.Manager.Comment("reaching state \'S333\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S334\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S335\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S336\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S337\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S338\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp79;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp79);
                    this.Manager.Comment("reaching state \'S339\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp79, "c of FileOperationToBreakLeaseRequest, state S339");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319LeaseBreakResponseChecker)));
                }
                goto label30;
            }
            if ((temp80 == 1)) {
                BreakReadHandleLeaseV2TestCaseS61();
                goto label30;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker1)));
        label30:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S332");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S332");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S332");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S332");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S335");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S335");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S332");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S332");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S332");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S332");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S325");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S325");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S325");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S325");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S325");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S325");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S325");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S325");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S325");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S325");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S320");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S344");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S344");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S344");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S344");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS345() {
            this.Manager.Comment("reaching state \'S345\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp82;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp82);
            this.Manager.Comment("reaching state \'S346\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp82, "c of FileOperationToBreakLeaseRequest, state S346");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S347\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S348\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S349\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp83;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp83);
            this.Manager.Comment("reaching state \'S350\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp83, "c of FileOperationToBreakLeaseRequest, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS351();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS351() {
            this.Manager.Comment("reaching state \'S351\'");
            int temp85 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker3)));
            if ((temp85 == 0)) {
                BreakReadHandleLeaseV2TestCaseS25();
                goto label32;
            }
            if ((temp85 == 1)) {
                this.Manager.Comment("reaching state \'S352\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S353\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S354\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S355\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S356\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S357\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp84;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp84);
                    this.Manager.Comment("reaching state \'S358\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp84, "c of FileOperationToBreakLeaseRequest, state S358");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS319LeaseBreakResponseChecker1)));
                }
                goto label32;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker3)));
        label32:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S351");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S351");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S351");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S351");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S354");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S354");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S344");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S344");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S344");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S344");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S344");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S344");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S344");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S344");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S320");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS319ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S320");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S359
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS359() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS359");
            this.Manager.Comment("reaching state \'S359\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp88;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp88);
            this.Manager.AddReturn(ReadConfigInfo, null, temp88);
            this.Manager.Comment("reaching state \'S360\'");
            int temp99 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS359ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS359ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS359ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS359ReadConfigChecker3)));
            if ((temp99 == 0)) {
                this.Manager.Comment("reaching state \'S361\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S362\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S363\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S364\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S365\'");
                int temp93 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker2)));
                if ((temp93 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label36;
                }
                if ((temp93 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS366();
                    goto label36;
                }
                if ((temp93 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS366();
                    goto label36;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker2)));
            label36:
;
                goto label39;
            }
            if ((temp99 == 1)) {
                this.Manager.Comment("reaching state \'S380\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S381\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S384\'");
                int temp98 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker5)));
                if ((temp98 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label38;
                }
                if ((temp98 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS385();
                    goto label38;
                }
                if ((temp98 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS385();
                    goto label38;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker5)));
            label38:
;
                goto label39;
            }
            if ((temp99 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label39;
            }
            if ((temp99 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S360");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S365");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S365");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S365");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S365");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S365");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S365");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S365");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S365");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S365");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S365");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS366() {
            this.Manager.Comment("reaching state \'S366\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp89;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp89);
            this.Manager.Comment("reaching state \'S367\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp89, "c of FileOperationToBreakLeaseRequest, state S367");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S368\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S369\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S370\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp90;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp90);
            this.Manager.Comment("reaching state \'S371\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp90, "c of FileOperationToBreakLeaseRequest, state S371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS372();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS372() {
            this.Manager.Comment("reaching state \'S372\'");
            int temp92 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker1)));
            if ((temp92 == 0)) {
                BreakReadHandleLeaseV2TestCaseS109();
                goto label35;
            }
            if ((temp92 == 1)) {
                this.Manager.Comment("reaching state \'S373\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S374\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S375\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S376\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S377\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S378\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp91;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp91);
                    this.Manager.Comment("reaching state \'S379\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp91, "c of FileOperationToBreakLeaseRequest, state S379");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359LeaseBreakResponseChecker)));
                }
                goto label35;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker1)));
        label35:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S372");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S372");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S372");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S372");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S372");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S372");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S372");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S372");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S375");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S375");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S365");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S365");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S365");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S365");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S365");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S360");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S384");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S384");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S384");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S384");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S384");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S384");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S384");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S384");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S384");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S384");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS385() {
            this.Manager.Comment("reaching state \'S385\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp94;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp94);
            this.Manager.Comment("reaching state \'S386\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp94, "c of FileOperationToBreakLeaseRequest, state S386");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S387\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S388\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S389\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp95;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp95);
            this.Manager.Comment("reaching state \'S390\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp95, "c of FileOperationToBreakLeaseRequest, state S390");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS391();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS391() {
            this.Manager.Comment("reaching state \'S391\'");
            int temp97 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker3)));
            if ((temp97 == 0)) {
                BreakReadHandleLeaseV2TestCaseS25();
                goto label37;
            }
            if ((temp97 == 1)) {
                this.Manager.Comment("reaching state \'S392\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S393\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S394\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S395\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S396\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S397\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp96;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp96);
                    this.Manager.Comment("reaching state \'S398\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp96, "c of FileOperationToBreakLeaseRequest, state S398");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS359LeaseBreakResponseChecker1)));
                }
                goto label37;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker3)));
        label37:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S391");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S391");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S391");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S391");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S391");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S391");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S394");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S384");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S384");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S384");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S384");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S384");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S360");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS359ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S360");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S399
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS399() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS399");
            this.Manager.Comment("reaching state \'S399\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp100;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp100);
            this.Manager.AddReturn(ReadConfigInfo, null, temp100);
            this.Manager.Comment("reaching state \'S400\'");
            int temp111 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS399ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS399ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS399ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS399ReadConfigChecker3)));
            if ((temp111 == 0)) {
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S402\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S403\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S405\'");
                int temp105 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker2)));
                if ((temp105 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label41;
                }
                if ((temp105 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS406();
                    goto label41;
                }
                if ((temp105 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS406();
                    goto label41;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker2)));
            label41:
;
                goto label44;
            }
            if ((temp111 == 1)) {
                this.Manager.Comment("reaching state \'S420\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S421\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S422\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S423\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S424\'");
                int temp110 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker5)));
                if ((temp110 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label43;
                }
                if ((temp110 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS425();
                    goto label43;
                }
                if ((temp110 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS425();
                    goto label43;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker5)));
            label43:
;
                goto label44;
            }
            if ((temp111 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label44;
            }
            if ((temp111 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label44;
            }
            throw new InvalidOperationException("never reached");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S400");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S405");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S405");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S405");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S405");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS406() {
            this.Manager.Comment("reaching state \'S406\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp101;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp101);
            this.Manager.Comment("reaching state \'S407\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp101, "c of FileOperationToBreakLeaseRequest, state S407");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S408\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S409\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S410\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp102;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp102);
            this.Manager.Comment("reaching state \'S411\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp102, "c of FileOperationToBreakLeaseRequest, state S411");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS412();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS412() {
            this.Manager.Comment("reaching state \'S412\'");
            int temp104 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker1)));
            if ((temp104 == 0)) {
                BreakReadHandleLeaseV2TestCaseS109();
                goto label40;
            }
            if ((temp104 == 1)) {
                this.Manager.Comment("reaching state \'S413\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S414\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S415\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S416\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S417\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S418\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp103;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                            "mb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp103);
                    this.Manager.Comment("reaching state \'S419\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp103, "c of FileOperationToBreakLeaseRequest, state S419");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399LeaseBreakResponseChecker)));
                }
                goto label40;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker1)));
        label40:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S412");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S412");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S412");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S412");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S412");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S412");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S412");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S412");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S415");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S415");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S405");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S405");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S405");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S400");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S424");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S424");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S424");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S424");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S424");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S424");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S424");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S424");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S424");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S424");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS425() {
            this.Manager.Comment("reaching state \'S425\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp106;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp106);
            this.Manager.Comment("reaching state \'S426\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp106, "c of FileOperationToBreakLeaseRequest, state S426");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S427\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S428\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S429\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp107;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp107);
            this.Manager.Comment("reaching state \'S430\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp107, "c of FileOperationToBreakLeaseRequest, state S430");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS431();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS431() {
            this.Manager.Comment("reaching state \'S431\'");
            int temp109 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker3)));
            if ((temp109 == 0)) {
                BreakReadHandleLeaseV2TestCaseS25();
                goto label42;
            }
            if ((temp109 == 1)) {
                this.Manager.Comment("reaching state \'S432\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S433\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S434\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S435\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S436\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S437\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp108;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp108);
                    this.Manager.Comment("reaching state \'S438\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp108, "c of FileOperationToBreakLeaseRequest, state S438");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS399LeaseBreakResponseChecker1)));
                }
                goto label42;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker3)));
        label42:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S431");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S431");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S431");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S431");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S431");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S431");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S431");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S431");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S434");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S434");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S424");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S424");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S424");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S424");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S424");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S400");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS399ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S400");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S439
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS439() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS439");
            this.Manager.Comment("reaching state \'S439\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp112;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp112);
            this.Manager.AddReturn(ReadConfigInfo, null, temp112);
            this.Manager.Comment("reaching state \'S440\'");
            int temp122 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS439ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS439ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS439ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS439ReadConfigChecker3)));
            if ((temp122 == 0)) {
                this.Manager.Comment("reaching state \'S441\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S442\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S443\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S444\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S445\'");
                int temp117 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker2)));
                if ((temp117 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label46;
                }
                if ((temp117 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS446();
                    goto label46;
                }
                if ((temp117 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS446();
                    goto label46;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker2)));
            label46:
;
                goto label49;
            }
            if ((temp122 == 1)) {
                this.Manager.Comment("reaching state \'S460\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S461\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S462\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S463\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S464\'");
                int temp121 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker5)));
                if ((temp121 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label48;
                }
                if ((temp121 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS465();
                    goto label48;
                }
                if ((temp121 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS465();
                    goto label48;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker5)));
            label48:
;
                goto label49;
            }
            if ((temp122 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label49;
            }
            if ((temp122 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S440");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S445");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S445");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S445");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S445");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S445");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S445");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S445");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S445");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S445");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S445");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS446() {
            this.Manager.Comment("reaching state \'S446\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp113;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp113);
            this.Manager.Comment("reaching state \'S447\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp113, "c of FileOperationToBreakLeaseRequest, state S447");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S448\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S449\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S450\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp114;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp114);
            this.Manager.Comment("reaching state \'S451\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp114, "c of FileOperationToBreakLeaseRequest, state S451");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS452();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS452() {
            this.Manager.Comment("reaching state \'S452\'");
            int temp116 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker1)));
            if ((temp116 == 0)) {
                BreakReadHandleLeaseV2TestCaseS109();
                goto label45;
            }
            if ((temp116 == 1)) {
                this.Manager.Comment("reaching state \'S453\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S454\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S455\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S456\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S457\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S458\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp115;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp115);
                    this.Manager.Comment("reaching state \'S459\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp115, "c of FileOperationToBreakLeaseRequest, state S459");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439LeaseBreakResponseChecker)));
                }
                goto label45;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker1)));
        label45:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S452");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S452");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S452");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S452");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S452");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S452");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S452");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S452");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S455");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S455");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S445");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S445");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S445");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S445");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S445");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S440");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S464");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S464");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S464");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S464");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS465() {
            this.Manager.Comment("reaching state \'S465\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp118;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp118);
            this.Manager.Comment("reaching state \'S466\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp118, "c of FileOperationToBreakLeaseRequest, state S466");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S467\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S468\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S469\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp119;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(DELETED,SameClientGuidDiffe" +
                    "rentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.DELETED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp119);
            this.Manager.Comment("reaching state \'S470\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp119, "c of FileOperationToBreakLeaseRequest, state S470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS471();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS471() {
            this.Manager.Comment("reaching state \'S471\'");
            int temp120 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker3)));
            if ((temp120 == 0)) {
                BreakReadHandleLeaseV2TestCaseS25();
                goto label47;
            }
            if ((temp120 == 1)) {
                this.Manager.Comment("reaching state \'S472\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S473\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S474\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S475\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S476\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S477\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS439LeaseBreakResponseChecker1)));
                }
                goto label47;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker3)));
        label47:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S471");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S471");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S471");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S471");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S471");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S471");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S471");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S471");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S474");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S474");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S464");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S440");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS439ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S440");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S478
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS478() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS478");
            this.Manager.Comment("reaching state \'S478\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp123;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp123);
            this.Manager.AddReturn(ReadConfigInfo, null, temp123);
            this.Manager.Comment("reaching state \'S479\'");
            int temp132 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS478ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS478ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS478ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS478ReadConfigChecker3)));
            if ((temp132 == 0)) {
                this.Manager.Comment("reaching state \'S480\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S481\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S482\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S483\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S484\'");
                int temp128 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker2)));
                if ((temp128 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label51;
                }
                if ((temp128 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS485();
                    goto label51;
                }
                if ((temp128 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS485();
                    goto label51;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker2)));
            label51:
;
                goto label53;
            }
            if ((temp132 == 1)) {
                this.Manager.Comment("reaching state \'S499\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S500\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S501\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S502\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S503\'");
                int temp131 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker5)));
                if ((temp131 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label52;
                }
                if ((temp131 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS504();
                    goto label52;
                }
                if ((temp131 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS504();
                    goto label52;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker5)));
            label52:
;
                goto label53;
            }
            if ((temp132 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label53;
            }
            if ((temp132 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S479");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S484");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S484");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S484");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S484");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S484");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S484");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S484");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S484");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S484");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S484");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS485() {
            this.Manager.Comment("reaching state \'S485\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp124;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp124);
            this.Manager.Comment("reaching state \'S486\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp124, "c of FileOperationToBreakLeaseRequest, state S486");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S487\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S488\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S489\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp125;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp125);
            this.Manager.Comment("reaching state \'S490\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp125, "c of FileOperationToBreakLeaseRequest, state S490");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS491();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS491() {
            this.Manager.Comment("reaching state \'S491\'");
            int temp127 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS478OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS478OnLeaseBreakNotificationChecker1)));
            if ((temp127 == 0)) {
                BreakReadHandleLeaseV2TestCaseS109();
                goto label50;
            }
            if ((temp127 == 1)) {
                this.Manager.Comment("reaching state \'S492\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S493\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S494\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S495\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S496\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S497\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp126;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                            "fferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp126);
                    this.Manager.Comment("reaching state \'S498\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp126, "c of FileOperationToBreakLeaseRequest, state S498");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS478LeaseBreakResponseChecker)));
                }
                goto label50;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS478OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS478OnLeaseBreakNotificationChecker1)));
        label50:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S491");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S491");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S491");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S491");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S491");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S491");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S491");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S491");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S494");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S494");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S484");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S484");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S484");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S484");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S484");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S479");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S503");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S503");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S503");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S503");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S503");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S503");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S503");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S503");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S503");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S503");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS504() {
            this.Manager.Comment("reaching state \'S504\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp129;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp129);
            this.Manager.Comment("reaching state \'S505\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp129, "c of FileOperationToBreakLeaseRequest, state S505");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S506\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S507\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S508\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp130;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(DELETED,SameClientId,Smb30," +
                    "out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.DELETED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp130);
            this.Manager.Comment("reaching state \'S509\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp130, "c of FileOperationToBreakLeaseRequest, state S509");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S510\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S511\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S512\'");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S503");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S503");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S503");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S503");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S503");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S479");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS478ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S479");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S513
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS513() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS513");
            this.Manager.Comment("reaching state \'S513\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp133;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp133);
            this.Manager.AddReturn(ReadConfigInfo, null, temp133);
            this.Manager.Comment("reaching state \'S514\'");
            int temp140 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS513ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS513ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS513ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS513ReadConfigChecker3)));
            if ((temp140 == 0)) {
                this.Manager.Comment("reaching state \'S515\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S516\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S517\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S519\'");
                int temp136 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker2)));
                if ((temp136 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label54;
                }
                if ((temp136 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS520();
                    goto label54;
                }
                if ((temp136 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS520();
                    goto label54;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker2)));
            label54:
;
                goto label56;
            }
            if ((temp140 == 1)) {
                this.Manager.Comment("reaching state \'S526\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S527\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S528\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S529\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S530\'");
                int temp139 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker5)));
                if ((temp139 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label55;
                }
                if ((temp139 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS531();
                    goto label55;
                }
                if ((temp139 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS531();
                    goto label55;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker5)));
            label55:
;
                goto label56;
            }
            if ((temp140 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label56;
            }
            if ((temp140 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label56;
            }
            throw new InvalidOperationException("never reached");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS513ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S519");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S519");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S519");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S519");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S519");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S519");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S519");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S519");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S519");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S519");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS520() {
            this.Manager.Comment("reaching state \'S520\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp134;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp134);
            this.Manager.Comment("reaching state \'S521\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp134, "c of FileOperationToBreakLeaseRequest, state S521");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S522\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S523\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S524\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp135;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp135);
            this.Manager.Comment("reaching state \'S525\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp135, "c of FileOperationToBreakLeaseRequest, state S525");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS148();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S519");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S519");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S519");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S519");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S519");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS513ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S530");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S530");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S530");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S530");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S530");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S530");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S530");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S530");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S530");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S530");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS531() {
            this.Manager.Comment("reaching state \'S531\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp137;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp137);
            this.Manager.Comment("reaching state \'S532\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp137, "c of FileOperationToBreakLeaseRequest, state S532");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S533\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S534\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S535\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp138;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION_WITH" +
                    "_OVERWRITE,SecondClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION_WITH_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp138);
            this.Manager.Comment("reaching state \'S536\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp138, "c of FileOperationToBreakLeaseRequest, state S536");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS13();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS513CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S530");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S530");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S530");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S530");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S530");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS513ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S514");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS513ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S537
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS537() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS537");
            this.Manager.Comment("reaching state \'S537\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp141;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp141);
            this.Manager.AddReturn(ReadConfigInfo, null, temp141);
            this.Manager.Comment("reaching state \'S538\'");
            int temp148 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS537ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS537ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS537ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS537ReadConfigChecker3)));
            if ((temp148 == 0)) {
                this.Manager.Comment("reaching state \'S539\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S540\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S541\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S542\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S543\'");
                int temp144 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker2)));
                if ((temp144 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label57;
                }
                if ((temp144 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS544();
                    goto label57;
                }
                if ((temp144 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS544();
                    goto label57;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker2)));
            label57:
;
                goto label59;
            }
            if ((temp148 == 1)) {
                this.Manager.Comment("reaching state \'S553\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S554\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S555\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S556\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S557\'");
                int temp147 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker5)));
                if ((temp147 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label58;
                }
                if ((temp147 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS558();
                    goto label58;
                }
                if ((temp147 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS558();
                    goto label58;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker5)));
            label58:
;
                goto label59;
            }
            if ((temp148 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label59;
            }
            if ((temp148 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS537ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S538");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S543");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S543");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S543");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S543");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S543");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S543");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS544() {
            this.Manager.Comment("reaching state \'S544\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp142;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp142);
            this.Manager.Comment("reaching state \'S545\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp142, "c of FileOperationToBreakLeaseRequest, state S545");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S546\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S547\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S548\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp143;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(DELETED,SameClientId,Smb302" +
                    ",out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.DELETED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp143);
            this.Manager.Comment("reaching state \'S549\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp143, "c of FileOperationToBreakLeaseRequest, state S549");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S550\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S551\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S552\'");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S543");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S543");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S543");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S543");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS537ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S538");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S557");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S557");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S557");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S557");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS558() {
            this.Manager.Comment("reaching state \'S558\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp145;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp145);
            this.Manager.Comment("reaching state \'S559\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp145, "c of FileOperationToBreakLeaseRequest, state S559");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S560\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S561\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S562\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp146;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RENAMEED,SecondClient,Smb20" +
                    "02,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RENAMEED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp146);
            this.Manager.Comment("reaching state \'S563\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp146, "c of FileOperationToBreakLeaseRequest, state S563");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS311();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS537CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S557");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS537ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S538");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS537ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S538");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S564
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS564() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS564");
            this.Manager.Comment("reaching state \'S564\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp149;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp149);
            this.Manager.AddReturn(ReadConfigInfo, null, temp149);
            this.Manager.Comment("reaching state \'S565\'");
            int temp157 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS564ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS564ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS564ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS564ReadConfigChecker3)));
            if ((temp157 == 0)) {
                this.Manager.Comment("reaching state \'S566\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S567\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S568\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S569\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S570\'");
                int temp153 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker2)));
                if ((temp153 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label61;
                }
                if ((temp153 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS571();
                    goto label61;
                }
                if ((temp153 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS571();
                    goto label61;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker2)));
            label61:
;
                goto label63;
            }
            if ((temp157 == 1)) {
                this.Manager.Comment("reaching state \'S584\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S585\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S586\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S587\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S588\'");
                int temp156 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker5)));
                if ((temp156 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label62;
                }
                if ((temp156 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS589();
                    goto label62;
                }
                if ((temp156 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS589();
                    goto label62;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker5)));
            label62:
;
                goto label63;
            }
            if ((temp157 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label63;
            }
            if ((temp157 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S565");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S570");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S570");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S570");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S570");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S570");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S570");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S570");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S570");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S570");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S570");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS571() {
            this.Manager.Comment("reaching state \'S571\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp150;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp150);
            this.Manager.Comment("reaching state \'S572\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp150, "c of FileOperationToBreakLeaseRequest, state S572");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S573\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S574\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S575\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp151;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(DELETED,SameClientGuidDiffe" +
                    "rentLeaseKey,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.DELETED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp151);
            this.Manager.Comment("reaching state \'S576\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp151, "c of FileOperationToBreakLeaseRequest, state S576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS577();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS577() {
            this.Manager.Comment("reaching state \'S577\'");
            int temp152 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS564OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS564OnLeaseBreakNotificationChecker1)));
            if ((temp152 == 0)) {
                BreakReadHandleLeaseV2TestCaseS109();
                goto label60;
            }
            if ((temp152 == 1)) {
                this.Manager.Comment("reaching state \'S578\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S579\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S580\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S581\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S582\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S583\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS564LeaseBreakResponseChecker)));
                }
                goto label60;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS564OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS564OnLeaseBreakNotificationChecker1)));
        label60:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S577");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S577");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S577");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S577");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S577");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S577");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S577");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S577");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S580");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S580");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S570");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S570");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S570");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S570");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S570");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S565");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S588");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S588");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S588");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S588");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S588");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S588");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S588");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S588");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S588");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S588");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS589() {
            this.Manager.Comment("reaching state \'S589\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp154;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp154);
            this.Manager.Comment("reaching state \'S590\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp154, "c of FileOperationToBreakLeaseRequest, state S590");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S591\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S592\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S593\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp155;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientGuidDifferentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp155);
            this.Manager.Comment("reaching state \'S594\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp155, "c of FileOperationToBreakLeaseRequest, state S594");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS351();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S588");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S588");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S588");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S588");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S588");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S565");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS564ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S565");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S595
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS595() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS595");
            this.Manager.Comment("reaching state \'S595\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp158;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp158);
            this.Manager.AddReturn(ReadConfigInfo, null, temp158);
            this.Manager.Comment("reaching state \'S596\'");
            int temp165 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS595ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS595ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS595ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS595ReadConfigChecker3)));
            if ((temp165 == 0)) {
                this.Manager.Comment("reaching state \'S597\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S598\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S599\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S600\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S601\'");
                int temp161 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker2)));
                if ((temp161 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label64;
                }
                if ((temp161 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS602();
                    goto label64;
                }
                if ((temp161 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS602();
                    goto label64;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker2)));
            label64:
;
                goto label66;
            }
            if ((temp165 == 1)) {
                this.Manager.Comment("reaching state \'S608\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S609\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S610\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S611\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S612\'");
                int temp164 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker5)));
                if ((temp164 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label65;
                }
                if ((temp164 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS613();
                    goto label65;
                }
                if ((temp164 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS613();
                    goto label65;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker5)));
            label65:
;
                goto label66;
            }
            if ((temp165 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label66;
            }
            if ((temp165 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label66;
            }
            throw new InvalidOperationException("never reached");
        label66:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS595ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S596");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S601");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S601");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S601");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S601");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S601");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S601");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S601");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S601");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S601");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S601");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS602() {
            this.Manager.Comment("reaching state \'S602\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp159;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp159);
            this.Manager.Comment("reaching state \'S603\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp159, "c of FileOperationToBreakLeaseRequest, state S603");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S604\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S605\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S606\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp160;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION_WITH" +
                    "_OVERWRITE,SecondClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION_WITH_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp160);
            this.Manager.Comment("reaching state \'S607\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp160, "c of FileOperationToBreakLeaseRequest, state S607");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS372();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S601");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S601");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S601");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S601");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S601");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS595ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S596");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S612");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S612");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S612");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S612");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S612");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S612");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S612");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S612");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS613() {
            this.Manager.Comment("reaching state \'S613\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp162;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp162);
            this.Manager.Comment("reaching state \'S614\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp162, "c of FileOperationToBreakLeaseRequest, state S614");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S615\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S616\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S617\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp163;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RENAMEED,SameClientGuidDiff" +
                    "erentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RENAMEED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp163);
            this.Manager.Comment("reaching state \'S618\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp163, "c of FileOperationToBreakLeaseRequest, state S618");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS391();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS595CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S612");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S612");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S612");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S612");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S612");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS595ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S596");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS595ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S596");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S619
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS619() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS619");
            this.Manager.Comment("reaching state \'S619\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp166;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp166);
            this.Manager.AddReturn(ReadConfigInfo, null, temp166);
            this.Manager.Comment("reaching state \'S620\'");
            int temp173 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS619ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS619ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS619ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS619ReadConfigChecker3)));
            if ((temp173 == 0)) {
                this.Manager.Comment("reaching state \'S621\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S622\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S623\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S624\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S625\'");
                int temp169 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker2)));
                if ((temp169 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label67;
                }
                if ((temp169 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS626();
                    goto label67;
                }
                if ((temp169 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS626();
                    goto label67;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker2)));
            label67:
;
                goto label69;
            }
            if ((temp173 == 1)) {
                this.Manager.Comment("reaching state \'S632\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S633\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S634\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S635\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S636\'");
                int temp172 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker5)));
                if ((temp172 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label68;
                }
                if ((temp172 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS637();
                    goto label68;
                }
                if ((temp172 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS637();
                    goto label68;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker5)));
            label68:
;
                goto label69;
            }
            if ((temp173 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label69;
            }
            if ((temp173 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label69;
            }
            throw new InvalidOperationException("never reached");
        label69:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS619ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S620");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S625");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S625");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S625");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S625");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S625");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S625");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S625");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S625");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S625");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S625");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS626() {
            this.Manager.Comment("reaching state \'S626\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp167;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp167);
            this.Manager.Comment("reaching state \'S627\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp167, "c of FileOperationToBreakLeaseRequest, state S627");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S628\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S629\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S630\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp168;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RENAMEED,SecondClient,Smb20" +
                    "02,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RENAMEED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp168);
            this.Manager.Comment("reaching state \'S631\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp168, "c of FileOperationToBreakLeaseRequest, state S631");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS412();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S625");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S625");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S625");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S625");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S625");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS619ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S620");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S636");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S636");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S636");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S636");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S636");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S636");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S636");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S636");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S636");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S636");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS637() {
            this.Manager.Comment("reaching state \'S637\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp170;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp170);
            this.Manager.Comment("reaching state \'S638\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp170, "c of FileOperationToBreakLeaseRequest, state S638");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S639\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S640\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S641\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp171;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION_WITH" +
                    "_OVERWRITE,SameClientGuidDifferentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION_WITH_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp171);
            this.Manager.Comment("reaching state \'S642\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp171, "c of FileOperationToBreakLeaseRequest, state S642");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS431();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS619CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S636");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S636");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S636");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S636");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S636");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS619ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S620");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS619ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S620");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S643
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS643() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS643");
            this.Manager.Comment("reaching state \'S643\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp174;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp174);
            this.Manager.AddReturn(ReadConfigInfo, null, temp174);
            this.Manager.Comment("reaching state \'S644\'");
            int temp181 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS643ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS643ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS643ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS643ReadConfigChecker3)));
            if ((temp181 == 0)) {
                this.Manager.Comment("reaching state \'S645\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S646\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S647\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S648\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S649\'");
                int temp177 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker2)));
                if ((temp177 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label70;
                }
                if ((temp177 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS650();
                    goto label70;
                }
                if ((temp177 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS650();
                    goto label70;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker2)));
            label70:
;
                goto label72;
            }
            if ((temp181 == 1)) {
                this.Manager.Comment("reaching state \'S656\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S657\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S658\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S659\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S660\'");
                int temp180 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker5)));
                if ((temp180 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label71;
                }
                if ((temp180 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS661();
                    goto label71;
                }
                if ((temp180 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS661();
                    goto label71;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker5)));
            label71:
;
                goto label72;
            }
            if ((temp181 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label72;
            }
            if ((temp181 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label72;
            }
            throw new InvalidOperationException("never reached");
        label72:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS643ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S644");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S649");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S649");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S649");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S649");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS650() {
            this.Manager.Comment("reaching state \'S650\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp175;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp175);
            this.Manager.Comment("reaching state \'S651\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp175, "c of FileOperationToBreakLeaseRequest, state S651");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S652\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S653\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S654\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp176;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientGuidDifferentLeaseKey,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp176);
            this.Manager.Comment("reaching state \'S655\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp176, "c of FileOperationToBreakLeaseRequest, state S655");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS452();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S649");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S649");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S649");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS643ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S644");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S660");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S660");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S660");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S660");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S660");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S660");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S660");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S660");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S660");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S660");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS661() {
            this.Manager.Comment("reaching state \'S661\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp178;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp178);
            this.Manager.Comment("reaching state \'S662\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp178, "c of FileOperationToBreakLeaseRequest, state S662");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S663\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S664\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S665\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp179;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SameClie" +
                    "ntId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp179);
            this.Manager.Comment("reaching state \'S666\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp179, "c of FileOperationToBreakLeaseRequest, state S666");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] Lease.Breaking is set to TRUE."", ""[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. "", ""[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is 2.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS13();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS643CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S660");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S660");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S660");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S660");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S660");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS643ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S644");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS643ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S644");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S667
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS667() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS667");
            this.Manager.Comment("reaching state \'S667\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp182;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp182);
            this.Manager.AddReturn(ReadConfigInfo, null, temp182);
            this.Manager.Comment("reaching state \'S668\'");
            int temp189 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS667ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS667ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS667ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS667ReadConfigChecker3)));
            if ((temp189 == 0)) {
                this.Manager.Comment("reaching state \'S669\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S670\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S671\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S672\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S673\'");
                int temp185 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker2)));
                if ((temp185 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label73;
                }
                if ((temp185 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS674();
                    goto label73;
                }
                if ((temp185 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS674();
                    goto label73;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker2)));
            label73:
;
                goto label75;
            }
            if ((temp189 == 1)) {
                this.Manager.Comment("reaching state \'S680\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S681\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S682\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S683\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S684\'");
                int temp188 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker5)));
                if ((temp188 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label74;
                }
                if ((temp188 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS685();
                    goto label74;
                }
                if ((temp188 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS685();
                    goto label74;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker5)));
            label74:
;
                goto label75;
            }
            if ((temp189 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label75;
            }
            if ((temp189 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS667ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S668");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S673");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S673");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S673");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S673");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S673");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S673");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S673");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS674() {
            this.Manager.Comment("reaching state \'S674\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp183;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp183);
            this.Manager.Comment("reaching state \'S675\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp183, "c of FileOperationToBreakLeaseRequest, state S675");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S676\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S677\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S678\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp184;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RENAMEED,SameClientGuidDiff" +
                    "erentLeaseKey,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RENAMEED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp184);
            this.Manager.Comment("reaching state \'S679\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp184, "c of FileOperationToBreakLeaseRequest, state S679");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS491();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S673");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S673");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S673");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS667ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S668");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S684");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S684");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S684");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S684");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S684");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S684");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S684");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S684");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S684");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S684");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS685() {
            this.Manager.Comment("reaching state \'S685\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp186;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp186);
            this.Manager.Comment("reaching state \'S686\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp186, "c of FileOperationToBreakLeaseRequest, state S686");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S687\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S688\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S689\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp187;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SameClie" +
                    "ntGuidDifferentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp187);
            this.Manager.Comment("reaching state \'S690\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp187, "c of FileOperationToBreakLeaseRequest, state S690");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS207();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS667CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S684");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S684");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S684");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S684");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S684");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS667ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S668");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS667ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S668");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S691
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS691() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS691");
            this.Manager.Comment("reaching state \'S691\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp190;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp190);
            this.Manager.AddReturn(ReadConfigInfo, null, temp190);
            this.Manager.Comment("reaching state \'S692\'");
            int temp199 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS691ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS691ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS691ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS691ReadConfigChecker3)));
            if ((temp199 == 0)) {
                this.Manager.Comment("reaching state \'S693\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S694\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S695\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S696\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S697\'");
                int temp195 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker2)));
                if ((temp195 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label77;
                }
                if ((temp195 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS698();
                    goto label77;
                }
                if ((temp195 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS698();
                    goto label77;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker2)));
            label77:
;
                goto label79;
            }
            if ((temp199 == 1)) {
                this.Manager.Comment("reaching state \'S712\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S713\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S714\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S715\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S716\'");
                int temp198 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker5)));
                if ((temp198 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label78;
                }
                if ((temp198 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS717();
                    goto label78;
                }
                if ((temp198 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS717();
                    goto label78;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker5)));
            label78:
;
                goto label79;
            }
            if ((temp199 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label79;
            }
            if ((temp199 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label79;
            }
            throw new InvalidOperationException("never reached");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S692");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S697");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S697");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S697");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S697");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S697");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S697");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S697");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S697");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S697");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S697");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS698() {
            this.Manager.Comment("reaching state \'S698\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp191;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp191);
            this.Manager.Comment("reaching state \'S699\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp191, "c of FileOperationToBreakLeaseRequest, state S699");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S700\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S701\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S702\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp192;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION_WITH" +
                    "_OVERWRITE,SameClientGuidDifferentLeaseKey,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION_WITH_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp192);
            this.Manager.Comment("reaching state \'S703\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp192, "c of FileOperationToBreakLeaseRequest, state S703");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS704();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS704() {
            this.Manager.Comment("reaching state \'S704\'");
            int temp194 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS691OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS691OnLeaseBreakNotificationChecker1)));
            if ((temp194 == 0)) {
                BreakReadHandleLeaseV2TestCaseS109();
                goto label76;
            }
            if ((temp194 == 1)) {
                this.Manager.Comment("reaching state \'S705\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S706\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S707\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S708\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S709\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S710\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp193;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                            "fferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp193);
                    this.Manager.Comment("reaching state \'S711\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp193, "c of FileOperationToBreakLeaseRequest, state S711");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS691LeaseBreakResponseChecker)));
                }
                goto label76;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS691OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS691OnLeaseBreakNotificationChecker1)));
        label76:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S704");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S704");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S704");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S704");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S704");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S704");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S704");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S704");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S707");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S697");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S697");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S697");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S697");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S697");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S692");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S716");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S716");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S716");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S716");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S716");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS717() {
            this.Manager.Comment("reaching state \'S717\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp196;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION_WITH" +
                    "_OVERWRITE,SameClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION_WITH_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp196);
            this.Manager.Comment("reaching state \'S718\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp196, "c of FileOperationToBreakLeaseRequest, state S718");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S719\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S720\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S721\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp197;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(DELETED,SecondClient,Smb200" +
                    "2,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.DELETED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp197);
            this.Manager.Comment("reaching state \'S722\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp197, "c of FileOperationToBreakLeaseRequest, state S722");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS471();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S716");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S716");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S692");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS691ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S692");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S723
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS723() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS723");
            this.Manager.Comment("reaching state \'S723\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp200;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp200);
            this.Manager.AddReturn(ReadConfigInfo, null, temp200);
            this.Manager.Comment("reaching state \'S724\'");
            int temp205 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS723ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS723ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS723ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS723ReadConfigChecker3)));
            if ((temp205 == 0)) {
                this.Manager.Comment("reaching state \'S725\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S726\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S727\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S728\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S729\'");
                int temp203 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker2)));
                if ((temp203 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label80;
                }
                if ((temp203 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS730();
                    goto label80;
                }
                if ((temp203 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS730();
                    goto label80;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker2)));
            label80:
;
                goto label82;
            }
            if ((temp205 == 1)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label82;
            }
            if ((temp205 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label82;
            }
            if ((temp205 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label82;
            }
            throw new InvalidOperationException("never reached");
        label82:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS723ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S724");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S729");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S729");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S729");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S729");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S729");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S729");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S729");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S729");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S729");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S729");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS730() {
            this.Manager.Comment("reaching state \'S730\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp201;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp201);
            this.Manager.Comment("reaching state \'S731\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp201, "c of FileOperationToBreakLeaseRequest, state S731");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S732\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S733\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S734\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp202;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SameClie" +
                    "ntId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp202);
            this.Manager.Comment("reaching state \'S735\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp202, "c of FileOperationToBreakLeaseRequest, state S735");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] Lease.Breaking is set to TRUE."", ""[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. "", ""[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is 2.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS704();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S729");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S729");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S729");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S729");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S729");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS723ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S724");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS736() {
            this.Manager.Comment("reaching state \'S736\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
            this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
            this.Manager.Comment("reaching state \'S737\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S738\'");
            this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                    "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
            this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S739\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S740\'");
            int temp204 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker5)));
            if ((temp204 == 0)) {
                BreakReadHandleLeaseV2TestCaseS37();
                goto label81;
            }
            if ((temp204 == 1)) {
                BreakReadHandleLeaseV2TestCaseS741();
                goto label81;
            }
            if ((temp204 == 2)) {
                BreakReadHandleLeaseV2TestCaseS741();
                goto label81;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker5)));
        label81:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S740");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S740");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S740");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S740");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S740");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S740");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S740");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S740");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S740");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S740");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS741() {
            this.Manager.Comment("reaching state \'S741\'");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS723CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S740");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S740");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S740");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S740");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S740");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS723ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S724");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS723ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S724");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S742
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS742() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS742");
            this.Manager.Comment("reaching state \'S742\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp206;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp206);
            this.Manager.AddReturn(ReadConfigInfo, null, temp206);
            this.Manager.Comment("reaching state \'S743\'");
            int temp212 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS742ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS742ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS742ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS742ReadConfigChecker3)));
            if ((temp212 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label85;
            }
            if ((temp212 == 1)) {
                this.Manager.Comment("reaching state \'S744\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S745\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S746\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S747\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S748\'");
                int temp211 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS742CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS742CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS742CreateResponseChecker2)));
                if ((temp211 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label84;
                }
                if ((temp211 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS749();
                    goto label84;
                }
                if ((temp211 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS749();
                    goto label84;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS742CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS742CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS742CreateResponseChecker2)));
            label84:
;
                goto label85;
            }
            if ((temp212 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label85;
            }
            if ((temp212 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label85;
            }
            throw new InvalidOperationException("never reached");
        label85:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS742ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S743");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS742ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S743");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS742CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S748");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S748");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S748");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S748");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S748");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS742CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S748");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S748");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S748");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S748");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S748");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS749() {
            this.Manager.Comment("reaching state \'S749\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp207;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp207);
            this.Manager.Comment("reaching state \'S750\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp207, "c of FileOperationToBreakLeaseRequest, state S750");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S751\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S752\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S753\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp208;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp208);
            this.Manager.Comment("reaching state \'S754\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp208, "c of FileOperationToBreakLeaseRequest, state S754");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS755();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS755() {
            this.Manager.Comment("reaching state \'S755\'");
            int temp210 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS742OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS742OnLeaseBreakNotificationChecker1)));
            if ((temp210 == 0)) {
                BreakReadHandleLeaseV2TestCaseS109();
                goto label83;
            }
            if ((temp210 == 1)) {
                this.Manager.Comment("reaching state \'S756\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S757\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S758\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS742LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S759\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S760\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S761\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp209;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp209);
                    this.Manager.Comment("reaching state \'S762\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp209, "c of FileOperationToBreakLeaseRequest, state S762");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS742LeaseBreakResponseChecker)));
                }
                goto label83;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS742OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS742OnLeaseBreakNotificationChecker1)));
        label83:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS742OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S755");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S755");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S755");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S755");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS742OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S755");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S755");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S755");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S755");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS742LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S758");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S758");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS742CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S748");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S748");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S748");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S748");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S748");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS742ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S743");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS742ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S743");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S763
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS763() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS763");
            this.Manager.Comment("reaching state \'S763\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp213;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp213);
            this.Manager.AddReturn(ReadConfigInfo, null, temp213);
            this.Manager.Comment("reaching state \'S764\'");
            int temp217 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS763ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS763ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS763ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS763ReadConfigChecker3)));
            if ((temp217 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label87;
            }
            if ((temp217 == 1)) {
                this.Manager.Comment("reaching state \'S765\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S766\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S767\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S768\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S769\'");
                int temp216 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS763CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS763CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS763CreateResponseChecker2)));
                if ((temp216 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label86;
                }
                if ((temp216 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS770();
                    goto label86;
                }
                if ((temp216 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS770();
                    goto label86;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS763CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS763CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS763CreateResponseChecker2)));
            label86:
;
                goto label87;
            }
            if ((temp217 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label87;
            }
            if ((temp217 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label87;
            }
            throw new InvalidOperationException("never reached");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS763ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S764");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS763ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S764");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS763CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S769");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S769");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S769");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S769");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S769");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS763CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S769");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S769");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S769");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S769");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S769");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS770() {
            this.Manager.Comment("reaching state \'S770\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp214;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp214);
            this.Manager.Comment("reaching state \'S771\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp214, "c of FileOperationToBreakLeaseRequest, state S771");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S772\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S773\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S774\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp215;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp215);
            this.Manager.Comment("reaching state \'S775\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp215, "c of FileOperationToBreakLeaseRequest, state S775");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS755();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS763CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S769");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S769");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S769");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S769");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S769");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS763ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S764");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS763ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S764");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S776
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS776() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS776");
            this.Manager.Comment("reaching state \'S776\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp218;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp218);
            this.Manager.AddReturn(ReadConfigInfo, null, temp218);
            this.Manager.Comment("reaching state \'S777\'");
            int temp222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS776ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS776ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS776ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS776ReadConfigChecker3)));
            if ((temp222 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label89;
            }
            if ((temp222 == 1)) {
                this.Manager.Comment("reaching state \'S778\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S779\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S780\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S781\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S782\'");
                int temp221 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS776CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS776CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS776CreateResponseChecker2)));
                if ((temp221 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label88;
                }
                if ((temp221 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS783();
                    goto label88;
                }
                if ((temp221 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS783();
                    goto label88;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS776CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS776CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS776CreateResponseChecker2)));
            label88:
;
                goto label89;
            }
            if ((temp222 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label89;
            }
            if ((temp222 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label89;
            }
            throw new InvalidOperationException("never reached");
        label89:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS776ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S777");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS776ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S777");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS776CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S782");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S782");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S782");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S782");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S782");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS776CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S782");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S782");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S782");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S782");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S782");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS783() {
            this.Manager.Comment("reaching state \'S783\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp219;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION_WITH" +
                    "_OVERWRITE,SameClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION_WITH_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp219);
            this.Manager.Comment("reaching state \'S784\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp219, "c of FileOperationToBreakLeaseRequest, state S784");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S785\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S786\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S787\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp220;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(DELETED,SecondClient,Smb200" +
                    "2,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.DELETED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp220);
            this.Manager.Comment("reaching state \'S788\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp220, "c of FileOperationToBreakLeaseRequest, state S788");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS577();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS776CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S782");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S782");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S782");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S782");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S782");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS776ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S777");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS776ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S777");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S789
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS789() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS789");
            this.Manager.Comment("reaching state \'S789\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp223;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp223);
            this.Manager.AddReturn(ReadConfigInfo, null, temp223);
            this.Manager.Comment("reaching state \'S790\'");
            int temp227 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS789ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS789ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS789ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS789ReadConfigChecker3)));
            if ((temp227 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label91;
            }
            if ((temp227 == 1)) {
                this.Manager.Comment("reaching state \'S791\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S792\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S793\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S794\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S795\'");
                int temp226 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS789CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS789CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS789CreateResponseChecker2)));
                if ((temp226 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS796();
                    goto label90;
                }
                if ((temp226 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS796();
                    goto label90;
                }
                if ((temp226 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label90;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS789CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS789CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS789CreateResponseChecker2)));
            label90:
;
                goto label91;
            }
            if ((temp227 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label91;
            }
            if ((temp227 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label91;
            }
            throw new InvalidOperationException("never reached");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS789ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S790");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS789ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S790");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS789CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S795");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S795");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S795");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S795");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S795");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS796() {
            this.Manager.Comment("reaching state \'S796\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp224;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp224);
            this.Manager.Comment("reaching state \'S797\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp224, "c of FileOperationToBreakLeaseRequest, state S797");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S798\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S799\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S800\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp225;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp225);
            this.Manager.Comment("reaching state \'S801\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp225, "c of FileOperationToBreakLeaseRequest, state S801");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS188();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS789CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S795");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S795");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S795");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S795");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S795");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS789CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S795");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S795");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S795");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S795");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S795");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS789ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S790");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS789ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S790");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S802
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS802() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS802");
            this.Manager.Comment("reaching state \'S802\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp228;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp228);
            this.Manager.AddReturn(ReadConfigInfo, null, temp228);
            this.Manager.Comment("reaching state \'S803\'");
            int temp234 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS802ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS802ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS802ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS802ReadConfigChecker3)));
            if ((temp234 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label94;
            }
            if ((temp234 == 1)) {
                this.Manager.Comment("reaching state \'S804\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S805\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S806\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S807\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S808\'");
                int temp233 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS802CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS802CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS802CreateResponseChecker2)));
                if ((temp233 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS809();
                    goto label93;
                }
                if ((temp233 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS809();
                    goto label93;
                }
                if ((temp233 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label93;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS802CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS802CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS802CreateResponseChecker2)));
            label93:
;
                goto label94;
            }
            if ((temp234 == 2)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label94;
            }
            if ((temp234 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label94;
            }
            throw new InvalidOperationException("never reached");
        label94:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS802ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S803");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS802ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S803");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS802CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S808");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S808");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S808");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S808");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S808");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS809() {
            this.Manager.Comment("reaching state \'S809\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp229;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp229);
            this.Manager.Comment("reaching state \'S810\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp229, "c of FileOperationToBreakLeaseRequest, state S810");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S811\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S812\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S813\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp230;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp230);
            this.Manager.Comment("reaching state \'S814\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp230, "c of FileOperationToBreakLeaseRequest, state S814");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS815();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS815() {
            this.Manager.Comment("reaching state \'S815\'");
            int temp232 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS802OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS802OnLeaseBreakNotificationChecker1)));
            if ((temp232 == 0)) {
                BreakReadHandleLeaseV2TestCaseS61();
                goto label92;
            }
            if ((temp232 == 1)) {
                this.Manager.Comment("reaching state \'S816\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S817\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S818\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS802LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S819\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S820\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S821\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp231;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp231);
                    this.Manager.Comment("reaching state \'S822\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp231, "c of FileOperationToBreakLeaseRequest, state S822");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS57();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS802LeaseBreakResponseChecker)));
                }
                goto label92;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS802OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS802OnLeaseBreakNotificationChecker1)));
        label92:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS802OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S815");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S815");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S815");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S815");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS802OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S815");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S815");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S815");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S815");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS802LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S818");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S818");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS802CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S808");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S808");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S808");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S808");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S808");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS802CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S808");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S808");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S808");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S808");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S808");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS802ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S803");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS802ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S803");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S823
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS823() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS823");
            this.Manager.Comment("reaching state \'S823\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp235;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp235);
            this.Manager.AddReturn(ReadConfigInfo, null, temp235);
            this.Manager.Comment("reaching state \'S824\'");
            int temp240 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS823ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS823ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS823ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS823ReadConfigChecker3)));
            if ((temp240 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label97;
            }
            if ((temp240 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label97;
            }
            if ((temp240 == 2)) {
                this.Manager.Comment("reaching state \'S825\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S826\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S827\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S828\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S829\'");
                int temp239 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS823CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS823CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS823CreateResponseChecker2)));
                if ((temp239 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label96;
                }
                if ((temp239 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS830();
                    goto label96;
                }
                if ((temp239 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS830();
                    goto label96;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS823CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS823CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS823CreateResponseChecker2)));
            label96:
;
                goto label97;
            }
            if ((temp240 == 3)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label97;
            }
            throw new InvalidOperationException("never reached");
        label97:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS823ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S824");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS823ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S824");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS823ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S824");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS823CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S829");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S829");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S829");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S829");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S829");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS823CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S829");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S829");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S829");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S829");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S829");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS830() {
            this.Manager.Comment("reaching state \'S830\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp236;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp236);
            this.Manager.Comment("reaching state \'S831\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp236, "c of FileOperationToBreakLeaseRequest, state S831");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S832\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S833\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S834\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp237;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(DELETED,SecondClient,Smb200" +
                    "2,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.DELETED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp237);
            this.Manager.Comment("reaching state \'S835\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp237, "c of FileOperationToBreakLeaseRequest, state S835");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS836();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS836() {
            this.Manager.Comment("reaching state \'S836\'");
            int temp238 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS823OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS823OnLeaseBreakNotificationChecker1)));
            if ((temp238 == 0)) {
                BreakReadHandleLeaseV2TestCaseS61();
                goto label95;
            }
            if ((temp238 == 1)) {
                this.Manager.Comment("reaching state \'S837\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S838\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S839\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS823LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S840\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S841\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S842\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS823LeaseBreakResponseChecker)));
                }
                goto label95;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS823OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS823OnLeaseBreakNotificationChecker1)));
        label95:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS823OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S836");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S836");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S836");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S836");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS823OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S836");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S836");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S836");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S836");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS823LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S839");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S839");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS823CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S829");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S829");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S829");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S829");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S829");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS823ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S824");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS84() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS84");
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp241;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp241);
            this.Manager.AddReturn(ReadConfigInfo, null, temp241);
            this.Manager.Comment("reaching state \'S85\'");
            int temp250 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS84ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS84ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS84ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS84ReadConfigChecker3)));
            if ((temp250 == 0)) {
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S120\'");
                int temp244 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker2)));
                if ((temp244 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS121();
                    goto label98;
                }
                if ((temp244 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS121();
                    goto label98;
                }
                if ((temp244 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS37();
                    goto label98;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker2)));
            label98:
;
                goto label101;
            }
            if ((temp250 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label101;
            }
            if ((temp250 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label101;
            }
            if ((temp250 == 3)) {
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S89\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S90\'");
                int temp249 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker5)));
                if ((temp249 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label100;
                }
                if ((temp249 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS91();
                    goto label100;
                }
                if ((temp249 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS91();
                    goto label100;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker3)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker4)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker5)));
            label100:
;
                goto label101;
            }
            throw new InvalidOperationException("never reached");
        label101:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S85");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS121() {
            this.Manager.Comment("reaching state \'S121\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp242;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp242);
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp242, "c of FileOperationToBreakLeaseRequest, state S122");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S125\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp243;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp243);
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp243, "c of FileOperationToBreakLeaseRequest, state S126");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                    "d \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 768");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS127();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S85");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S85");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S85");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S90");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S90");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S90");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S90");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS91() {
            this.Manager.Comment("reaching state \'S91\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp245;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb302,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp245);
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp245, "c of FileOperationToBreakLeaseRequest, state S92");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S95\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp246;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Seco" +
                    "ndClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp246);
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp246, "c of FileOperationToBreakLeaseRequest, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS97();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS97() {
            this.Manager.Comment("reaching state \'S97\'");
            int temp248 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS84OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS84OnLeaseBreakNotificationChecker1)));
            if ((temp248 == 0)) {
                BreakReadHandleLeaseV2TestCaseS109();
                goto label99;
            }
            if ((temp248 == 1)) {
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S99\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S100\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S101\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S102\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S103\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp247;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp247);
                    this.Manager.Comment("reaching state \'S104\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp247, "c of FileOperationToBreakLeaseRequest, state S104");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 cl" +
                                "ients to delay closing handles it holds open, or to defer sending opens. Before " +
                                "processing one of the following operations, the underlying object store MUST req" +
                                "uest that the server revoke HANDLE caching, and the object store MUST wait for a" +
                                "cknowledgment before proceeding with the operation:\", \"[MS-SMB2] 3.3.4.7: If the" +
                                " server implements the SMB 3.x dialect family and Lease.Version is 2, the server" +
                                " MUST set NewEpoch to Lease.Epoch + 1. \", \"[TestInfo] The server implements the " +
                                "SMB 3.x dialect family and Lease.Version is 2.\", \"[TestInfo] Lease state is set " +
                                "to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS105();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS84LeaseBreakResponseChecker)));
                }
                goto label99;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS84OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadHandleLeaseV2TestCaseS84OnLeaseBreakNotificationChecker1)));
        label99:
;
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(2,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,3,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 2, newEpoch, "newEpoch of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S97");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S100");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S100");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS84CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S90");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S843
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS843() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS843");
            this.Manager.Comment("reaching state \'S843\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp251;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp251);
            this.Manager.AddReturn(ReadConfigInfo, null, temp251);
            this.Manager.Comment("reaching state \'S844\'");
            int temp255 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS843ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS843ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS843ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS843ReadConfigChecker3)));
            if ((temp255 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label103;
            }
            if ((temp255 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label103;
            }
            if ((temp255 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label103;
            }
            if ((temp255 == 3)) {
                this.Manager.Comment("reaching state \'S845\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S846\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S847\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S848\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S849\'");
                int temp254 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS843CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS843CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS843CreateResponseChecker2)));
                if ((temp254 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label102;
                }
                if ((temp254 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS850();
                    goto label102;
                }
                if ((temp254 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS850();
                    goto label102;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS843CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS843CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS843CreateResponseChecker2)));
            label102:
;
                goto label103;
            }
            throw new InvalidOperationException("never reached");
        label103:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS843ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S844");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS843ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S844");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS843ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S844");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS843ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S844");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS843CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S849");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S849");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S849");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S849");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S849");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS843CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S849");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S849");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S849");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S849");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S849");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS850() {
            this.Manager.Comment("reaching state \'S850\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp252;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp252);
            this.Manager.Comment("reaching state \'S851\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp252, "c of FileOperationToBreakLeaseRequest, state S851");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S852\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S853\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S854\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp253;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(DELETED,SameClientId,Smb30," +
                    "out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.DELETED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp253);
            this.Manager.Comment("reaching state \'S855\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp253, "c of FileOperationToBreakLeaseRequest, state S855");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S856\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S857\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S858\'");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS843CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S849");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S849");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S849");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S849");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S849");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S859
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS859() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS859");
            this.Manager.Comment("reaching state \'S859\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp256;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp256);
            this.Manager.AddReturn(ReadConfigInfo, null, temp256);
            this.Manager.Comment("reaching state \'S860\'");
            int temp260 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS859ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS859ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS859ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS859ReadConfigChecker3)));
            if ((temp260 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label105;
            }
            if ((temp260 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label105;
            }
            if ((temp260 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label105;
            }
            if ((temp260 == 3)) {
                this.Manager.Comment("reaching state \'S861\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S862\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S863\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S864\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S865\'");
                int temp259 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS859CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS859CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS859CreateResponseChecker2)));
                if ((temp259 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label104;
                }
                if ((temp259 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS866();
                    goto label104;
                }
                if ((temp259 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS866();
                    goto label104;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS859CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS859CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS859CreateResponseChecker2)));
            label104:
;
                goto label105;
            }
            throw new InvalidOperationException("never reached");
        label105:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS859ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S860");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS859ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S860");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS859ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S860");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS859ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S860");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS859CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S865");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S865");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S865");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S865");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S865");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS859CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S865");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S865");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S865");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S865");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S865");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS866() {
            this.Manager.Comment("reaching state \'S866\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp257;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp257);
            this.Manager.Comment("reaching state \'S867\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp257, "c of FileOperationToBreakLeaseRequest, state S867");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S868\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S869\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S870\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp258;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION_WITH" +
                    "_OVERWRITE,SecondClient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION_WITH_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp258);
            this.Manager.Comment("reaching state \'S871\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp258, "c of FileOperationToBreakLeaseRequest, state S871");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS228();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS859CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S865");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S865");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S865");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S865");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S865");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S872
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS872() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS872");
            this.Manager.Comment("reaching state \'S872\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp261;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp261);
            this.Manager.AddReturn(ReadConfigInfo, null, temp261);
            this.Manager.Comment("reaching state \'S873\'");
            int temp265 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS872ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS872ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS872ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS872ReadConfigChecker3)));
            if ((temp265 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label107;
            }
            if ((temp265 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label107;
            }
            if ((temp265 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label107;
            }
            if ((temp265 == 3)) {
                this.Manager.Comment("reaching state \'S874\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S875\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S876\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S877\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S878\'");
                int temp264 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS872CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS872CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS872CreateResponseChecker2)));
                if ((temp264 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label106;
                }
                if ((temp264 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS879();
                    goto label106;
                }
                if ((temp264 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS879();
                    goto label106;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS872CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS872CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS872CreateResponseChecker2)));
            label106:
;
                goto label107;
            }
            throw new InvalidOperationException("never reached");
        label107:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS872ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S873");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS872ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S873");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS872ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S873");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS872ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S873");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS872CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S878");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S878");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S878");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S878");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S878");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS872CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S878");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S878");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S878");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S878");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S878");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS879() {
            this.Manager.Comment("reaching state \'S879\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp262;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp262);
            this.Manager.Comment("reaching state \'S880\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp262, "c of FileOperationToBreakLeaseRequest, state S880");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S881\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S882\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S883\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp263;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RENAMEED,SecondClient,Smb20" +
                    "02,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RENAMEED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp263);
            this.Manager.Comment("reaching state \'S884\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp263, "c of FileOperationToBreakLeaseRequest, state S884");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS260();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS872CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S878");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S878");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S878");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S878");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S878");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S885
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS885() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS885");
            this.Manager.Comment("reaching state \'S885\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp266;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp266);
            this.Manager.AddReturn(ReadConfigInfo, null, temp266);
            this.Manager.Comment("reaching state \'S886\'");
            int temp270 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS885ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS885ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS885ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS885ReadConfigChecker3)));
            if ((temp270 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label109;
            }
            if ((temp270 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label109;
            }
            if ((temp270 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label109;
            }
            if ((temp270 == 3)) {
                this.Manager.Comment("reaching state \'S887\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S888\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S889\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S890\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S891\'");
                int temp269 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS885CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS885CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS885CreateResponseChecker2)));
                if ((temp269 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label108;
                }
                if ((temp269 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS892();
                    goto label108;
                }
                if ((temp269 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS892();
                    goto label108;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS885CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS885CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS885CreateResponseChecker2)));
            label108:
;
                goto label109;
            }
            throw new InvalidOperationException("never reached");
        label109:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS885ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S886");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS885ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S886");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS885ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S886");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS885ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S886");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS885CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S891");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S891");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS885CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S891");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S891");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S891");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S891");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS892() {
            this.Manager.Comment("reaching state \'S892\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp267;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp267);
            this.Manager.Comment("reaching state \'S893\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp267, "c of FileOperationToBreakLeaseRequest, state S893");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S894\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S895\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S896\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp268;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientGuidDifferentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp268);
            this.Manager.Comment("reaching state \'S897\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp268, "c of FileOperationToBreakLeaseRequest, state S897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS292();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS885CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S891");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S891");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S891");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S891");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S898
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS898() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS898");
            this.Manager.Comment("reaching state \'S898\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp271;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp271);
            this.Manager.AddReturn(ReadConfigInfo, null, temp271);
            this.Manager.Comment("reaching state \'S899\'");
            int temp275 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS898ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS898ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS898ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS898ReadConfigChecker3)));
            if ((temp275 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label111;
            }
            if ((temp275 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label111;
            }
            if ((temp275 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label111;
            }
            if ((temp275 == 3)) {
                this.Manager.Comment("reaching state \'S900\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S901\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S902\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S903\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S904\'");
                int temp274 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS898CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS898CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS898CreateResponseChecker2)));
                if ((temp274 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label110;
                }
                if ((temp274 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS905();
                    goto label110;
                }
                if ((temp274 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS905();
                    goto label110;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS898CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS898CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS898CreateResponseChecker2)));
            label110:
;
                goto label111;
            }
            throw new InvalidOperationException("never reached");
        label111:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS898ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S899");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS898ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S899");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS898ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S899");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS898ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S899");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS898CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S904");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S904");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S904");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS898CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S904");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S904");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS905() {
            this.Manager.Comment("reaching state \'S905\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp272;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp272);
            this.Manager.Comment("reaching state \'S906\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp272, "c of FileOperationToBreakLeaseRequest, state S906");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S907\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S908\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S909\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp273;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RENAMEED,SameClientGuidDiff" +
                    "erentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RENAMEED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp273);
            this.Manager.Comment("reaching state \'S910\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp273, "c of FileOperationToBreakLeaseRequest, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS73();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS898CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S904");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S904");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S911
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS911() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS911");
            this.Manager.Comment("reaching state \'S911\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp276;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp276);
            this.Manager.AddReturn(ReadConfigInfo, null, temp276);
            this.Manager.Comment("reaching state \'S912\'");
            int temp280 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS911ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS911ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS911ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS911ReadConfigChecker3)));
            if ((temp280 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label113;
            }
            if ((temp280 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label113;
            }
            if ((temp280 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label113;
            }
            if ((temp280 == 3)) {
                this.Manager.Comment("reaching state \'S913\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S914\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S915\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S916\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S917\'");
                int temp279 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS911CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS911CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS911CreateResponseChecker2)));
                if ((temp279 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label112;
                }
                if ((temp279 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS918();
                    goto label112;
                }
                if ((temp279 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS918();
                    goto label112;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS911CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS911CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS911CreateResponseChecker2)));
            label112:
;
                goto label113;
            }
            throw new InvalidOperationException("never reached");
        label113:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS911ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S912");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS911ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S912");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS911ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S912");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS911ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S912");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS911CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S917");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S917");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S917");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S917");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S917");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS911CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S917");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S917");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S917");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S917");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S917");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS918() {
            this.Manager.Comment("reaching state \'S918\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp277;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp277);
            this.Manager.Comment("reaching state \'S919\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp277, "c of FileOperationToBreakLeaseRequest, state S919");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S920\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S921\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S922\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp278;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION_WITH" +
                    "_OVERWRITE,SameClientGuidDifferentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION_WITH_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp278);
            this.Manager.Comment("reaching state \'S923\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp278, "c of FileOperationToBreakLeaseRequest, state S923");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS332();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS911CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S917");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S917");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S917");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S917");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S917");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S924
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS924() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS924");
            this.Manager.Comment("reaching state \'S924\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp281;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp281);
            this.Manager.AddReturn(ReadConfigInfo, null, temp281);
            this.Manager.Comment("reaching state \'S925\'");
            int temp285 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS924ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS924ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS924ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS924ReadConfigChecker3)));
            if ((temp285 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label115;
            }
            if ((temp285 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label115;
            }
            if ((temp285 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label115;
            }
            if ((temp285 == 3)) {
                this.Manager.Comment("reaching state \'S926\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S927\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S928\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S929\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S930\'");
                int temp284 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS924CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS924CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS924CreateResponseChecker2)));
                if ((temp284 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label114;
                }
                if ((temp284 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS931();
                    goto label114;
                }
                if ((temp284 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS931();
                    goto label114;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS924CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS924CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS924CreateResponseChecker2)));
            label114:
;
                goto label115;
            }
            throw new InvalidOperationException("never reached");
        label115:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS924ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S925");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS924ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S925");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS924ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S925");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS924ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S925");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS924CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S930");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S930");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S930");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S930");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S930");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS924CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S930");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S930");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S930");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S930");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S930");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS931() {
            this.Manager.Comment("reaching state \'S931\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp282;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp282);
            this.Manager.Comment("reaching state \'S932\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp282, "c of FileOperationToBreakLeaseRequest, state S932");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S933\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S934\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S935\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp283;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                    "ient,Smb2002,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp283);
            this.Manager.Comment("reaching state \'S936\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp283, "c of FileOperationToBreakLeaseRequest, state S936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS49();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS924CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S930");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S930");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S930");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S930");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S930");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S937
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS937() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS937");
            this.Manager.Comment("reaching state \'S937\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp286;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp286);
            this.Manager.AddReturn(ReadConfigInfo, null, temp286);
            this.Manager.Comment("reaching state \'S938\'");
            int temp290 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS937ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS937ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS937ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS937ReadConfigChecker3)));
            if ((temp290 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label117;
            }
            if ((temp290 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label117;
            }
            if ((temp290 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label117;
            }
            if ((temp290 == 3)) {
                this.Manager.Comment("reaching state \'S939\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S940\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S941\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S942\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S943\'");
                int temp289 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS937CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS937CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS937CreateResponseChecker2)));
                if ((temp289 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label116;
                }
                if ((temp289 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS944();
                    goto label116;
                }
                if ((temp289 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS944();
                    goto label116;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS937CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS937CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS937CreateResponseChecker2)));
            label116:
;
                goto label117;
            }
            throw new InvalidOperationException("never reached");
        label117:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS937ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S938");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS937ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S938");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS937ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S938");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS937ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S938");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS937CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S943");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S943");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S943");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS937CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S943");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S943");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS944() {
            this.Manager.Comment("reaching state \'S944\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp287;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp287);
            this.Manager.Comment("reaching state \'S945\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp287, "c of FileOperationToBreakLeaseRequest, state S945");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S946\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S947\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S948\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp288;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SameClie" +
                    "ntId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp288);
            this.Manager.Comment("reaching state \'S949\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp288, "c of FileOperationToBreakLeaseRequest, state S949");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] Lease.Breaking is set to TRUE."", ""[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. "", ""[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is 2.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS815();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS937CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S943");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S943");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S943");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S950
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS950() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS950");
            this.Manager.Comment("reaching state \'S950\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp291;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp291);
            this.Manager.AddReturn(ReadConfigInfo, null, temp291);
            this.Manager.Comment("reaching state \'S951\'");
            int temp295 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS950ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS950ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS950ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS950ReadConfigChecker3)));
            if ((temp295 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label119;
            }
            if ((temp295 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label119;
            }
            if ((temp295 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label119;
            }
            if ((temp295 == 3)) {
                this.Manager.Comment("reaching state \'S952\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S953\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S954\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S955\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S956\'");
                int temp294 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS950CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS950CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS950CreateResponseChecker2)));
                if ((temp294 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label118;
                }
                if ((temp294 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS957();
                    goto label118;
                }
                if ((temp294 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS957();
                    goto label118;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS950CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS950CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS950CreateResponseChecker2)));
            label118:
;
                goto label119;
            }
            throw new InvalidOperationException("never reached");
        label119:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS950ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S951");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS950ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S951");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS950ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S951");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS950ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S951");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS950CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S956");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S956");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S956");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S956");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S956");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS950CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S956");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S956");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S956");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S956");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S956");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS957() {
            this.Manager.Comment("reaching state \'S957\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp292;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                    "ClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp292);
            this.Manager.Comment("reaching state \'S958\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp292, "c of FileOperationToBreakLeaseRequest, state S958");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S959\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S960\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S961\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp293;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SameClie" +
                    "ntGuidDifferentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp293);
            this.Manager.Comment("reaching state \'S962\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp293, "c of FileOperationToBreakLeaseRequest, state S962");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS49();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS950CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S956");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S956");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S956");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S956");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S956");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S963
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS963() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS963");
            this.Manager.Comment("reaching state \'S963\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp296;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp296);
            this.Manager.AddReturn(ReadConfigInfo, null, temp296);
            this.Manager.Comment("reaching state \'S964\'");
            int temp300 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS963ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS963ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS963ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS963ReadConfigChecker3)));
            if ((temp300 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label121;
            }
            if ((temp300 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label121;
            }
            if ((temp300 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label121;
            }
            if ((temp300 == 3)) {
                this.Manager.Comment("reaching state \'S965\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S966\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S967\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S968\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S969\'");
                int temp299 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS963CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS963CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS963CreateResponseChecker2)));
                if ((temp299 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS81();
                    goto label120;
                }
                if ((temp299 == 1)) {
                    BreakReadHandleLeaseV2TestCaseS970();
                    goto label120;
                }
                if ((temp299 == 2)) {
                    BreakReadHandleLeaseV2TestCaseS970();
                    goto label120;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS963CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS963CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS963CreateResponseChecker2)));
            label120:
;
                goto label121;
            }
            throw new InvalidOperationException("never reached");
        label121:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS963ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S964");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS963ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S964");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS963ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S964");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS963ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S964");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS963CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S969");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S969");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S969");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S969");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S969");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS963CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S969");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S969");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S969");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S969");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S969");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS970() {
            this.Manager.Comment("reaching state \'S970\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp297;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION_WITH" +
                    "_OVERWRITE,SameClientId,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION_WITH_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp297);
            this.Manager.Comment("reaching state \'S971\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), temp297, "c of FileOperationToBreakLeaseRequest, state S971");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("reaching state \'S972\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S973\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S974\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp298;
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(DELETED,SameClientGuidDiffe" +
                    "rentLeaseKey,Smb30,out _)\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.DELETED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp298);
            this.Manager.Comment("reaching state \'S975\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), temp298, "c of FileOperationToBreakLeaseRequest, state S975");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                        "ient to cache data read from the object. Before processing one of the following " +
                        "operations from a client with a different ClientId, the object store MUST reques" +
                        "t that the server revoke READ caching. The object store is not required to wait " +
                        "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                        "writes and byte-range locks on an object. Before processing one of the following" +
                        " operations, the underlying object store MUST request that the server revoke WRI" +
                        "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                        "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                        "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                        "ns. Before processing one of the following operations, the underlying object sto" +
                        "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                        " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                        "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                        "e incompatible with opens from different ClientIds or local applications as desc" +
                        "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                        " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                        "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                        "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                        "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                        "d Lease.Version is 2.\"");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            this.c.Value.IsLeasingSupported,
                            this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                    "ed \r\n");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
            this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                    " from different ClientIds or local applications as described in [MS-FSA] section" +
                    " 2.1.5.1.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
            this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                    ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                    " 2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            BreakReadHandleLeaseV2TestCaseS836();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS963CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S969");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S969");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S969");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S969");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S969");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S976
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV2)]
        public void BreakReadHandleLeaseV2TestCaseS976() {
            this.Manager.BeginTest("BreakReadHandleLeaseV2TestCaseS976");
            this.Manager.Comment("reaching state \'S976\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp301;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp301);
            this.Manager.AddReturn(ReadConfigInfo, null, temp301);
            this.Manager.Comment("reaching state \'S977\'");
            int temp307 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS976ReadConfigChecker)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS976ReadConfigChecker1)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS976ReadConfigChecker2)), new ExpectedReturn(BreakReadHandleLeaseV2TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadHandleLeaseV2TestCaseS976ReadConfigChecker3)));
            if ((temp307 == 0)) {
                BreakReadHandleLeaseV2TestCaseS736();
                goto label123;
            }
            if ((temp307 == 1)) {
                BreakReadHandleLeaseV2TestCaseS82();
                goto label123;
            }
            if ((temp307 == 2)) {
                BreakReadHandleLeaseV2TestCaseS83();
                goto label123;
            }
            if ((temp307 == 3)) {
                this.Manager.Comment("reaching state \'S978\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S979\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S980\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV2,ValidLeaseKey,3," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 3u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S981\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S982\'");
                int temp306 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS976CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS976CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS976CreateResponseChecker2)));
                if ((temp306 == 0)) {
                    BreakReadHandleLeaseV2TestCaseS115();
                    goto label122;
                }
                if ((temp306 == 1)) {
                    this.Manager.Comment("reaching state \'S983\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp302;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_SHARING_VIOLATION,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_SHARING_VIOLATION, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp302);
                    this.Manager.Comment("reaching state \'S984\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp302, "c of FileOperationToBreakLeaseRequest, state S984");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S985\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S986\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S987\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp303;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SameClie" +
                            "ntGuidDifferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp303);
                    this.Manager.Comment("reaching state \'S988\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp303, "c of FileOperationToBreakLeaseRequest, state S988");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                                "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                                "ns. Before processing one of the following operations, the underlying object sto" +
                                "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                                " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                                "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                                "e incompatible with opens from different ClientIds or local applications as desc" +
                                "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                                " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                                "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                                "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                                "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                                "d Lease.Version is 2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                            " from different ClientIds or local applications as described in [MS-FSA] section" +
                            " 2.1.5.1.2.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
                    this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS755();
                    goto label122;
                }
                if ((temp306 == 2)) {
                    this.Manager.Comment("reaching state \'S989\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp304;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RENAMEED,SameClientId,Smb30" +
                            "2,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RENAMEED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp304);
                    this.Manager.Comment("reaching state \'S990\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp304, "c of FileOperationToBreakLeaseRequest, state S990");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    this.Manager.Comment("reaching state \'S991\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S992\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S993\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp305;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(PARENT_DIR_RENAMED,SecondCl" +
                            "ient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.PARENT_DIR_RENAMED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp305);
                    this.Manager.Comment("reaching state \'S994\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp305, "c of FileOperationToBreakLeaseRequest, state S994");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache " +
                                "writes and byte-range locks on an object. Before processing one of the following" +
                                " operations, the underlying object store MUST request that the server revoke WRI" +
                                "TE caching, and the object store MUST wait for acknowledgment from the server be" +
                                "fore proceeding with the operation:\", \"[MS-SMB2] HANDLE caching permits one or m" +
                                "ore SMB2 clients to delay closing handles it holds open, or to defer sending ope" +
                                "ns. Before processing one of the following operations, the underlying object sto" +
                                "re MUST request that the server revoke HANDLE caching, and the object store MUST" +
                                " wait for acknowledgment before proceeding with the operation:\", \"[MS-SMB2] HAND" +
                                "LE caching on a file:\", \"[MS-SMB2] \tA file is opened with an access or share mod" +
                                "e incompatible with opens from different ClientIds or local applications as desc" +
                                "ribed in [MS-FSA] section 2.1.5.1.2.\", \"[MS-SMB2] \tThe parent directory is being" +
                                " renamed.\", \"[TestInfo] HANDLE caching lease state is broken.\", \"[TestInfo] Leas" +
                                "e.Breaking is set to TRUE.\", \"[MS-SMB2] 3.3.4.7: If the server implements the SM" +
                                "B 3.x dialect family and Lease.Version is 2, the server MUST set NewEpoch to Lea" +
                                "se.Epoch + 1. \", \"[TestInfo] The server implements the SMB 3.x dialect family an" +
                                "d Lease.Version is 2.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v1.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] HANDLE caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA file is opened with an access or share mode incompatible with opens" +
                            " from different ClientIds or local applications as described in [MS-FSA] section" +
                            " 2.1.5.1.2.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe parent directory is being renamed.\"");
                    this.Manager.Checkpoint("\"[TestInfo] HANDLE caching lease state is broken.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: If the server implements the SMB 3.x dialect family and Lease" +
                            ".Version is 2, the server MUST set NewEpoch to Lease.Epoch + 1. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The server implements the SMB 3.x dialect family and Lease.Version is" +
                            " 2.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v1\'");
                    this.v1.Unbind();
                    BreakReadHandleLeaseV2TestCaseS97();
                    goto label122;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS976CreateResponseChecker)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS976CreateResponseChecker1)), new ExpectedEvent(BreakReadHandleLeaseV2TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadHandleLeaseV2TestCaseS976CreateResponseChecker2)));
            label122:
;
                goto label123;
            }
            throw new InvalidOperationException("never reached");
        label123:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS976ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S977");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS976ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S977");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS976ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S977");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS976ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S977");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadHandleLeaseV2TestCaseS976CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S982");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S982");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S982");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v1.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseState, "v3 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.leaseFlags, "v4 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS976CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,S" +
                    "MB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S982");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, leaseFlags, "leaseFlags of CreateResponse, state S982");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void BreakReadHandleLeaseV2TestCaseS976CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,3,L" +
                    "EASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S982");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 3u, leaseState, "leaseState of CreateResponse, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), leaseFlags, "leaseFlags of CreateResponse, state S982");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect belongs to the ""3.x"" dialect family, and the DataLength field equals 0x34, the server MUST attempt to acquire a lease on the open from the underlying object store, as described in section 3.3.5.9.11."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state."", ""[TestInfo] Lease.Epoch is incremented by 1."", ""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response."", ""[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v1.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v1.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect belongs to the \"3.x\" dialect family, and the Da" +
                    "taLength field equals 0x34, the server MUST attempt to acquire a lease on the op" +
                    "en from the underlying object store, as described in section 3.3.5.9.11.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state.<271> If the object store succeeds this request, Lease.LeaseState MUST be set to the new caching state.""");
            this.Manager.Checkpoint("\"[TestInfo] Lease.Epoch is incremented by 1.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.11: If SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set in the Flags field of the request, ParentLeaseKey MUST be set to the ParentLeaseKey in the request and SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit MUST be set in the Flags field of the response.""");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET bit is set.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
    }
}
