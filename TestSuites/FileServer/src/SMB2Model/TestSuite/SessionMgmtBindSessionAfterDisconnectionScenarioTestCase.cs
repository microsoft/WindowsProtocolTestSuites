// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SessionMgmtBindSessionAfterDisconnectionScenarioTestCase : PtfTestClassBase {
        
        public SessionMgmtBindSessionAfterDisconnectionScenarioTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c);
        
        public delegate void SessionSetupResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c);
        
        public delegate void TerminateConnectionDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig).MakeByRefType());
        
        static System.Reflection.EventInfo SessionSetupResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter), "SessionSetupResponse");
        
        static System.Reflection.MethodBase TerminateConnectionInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter), "TerminateConnection", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId));
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter ISessionMgmtAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig> c1;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig> v;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig> v1;
        
        private IVariable<int> v2;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ISessionMgmtAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ISessionMgmtAdapter))));
            this.Manager.Subscribe(SessionSetupResponseInfo, this.ISessionMgmtAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>("c1");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>("v");
            this.v1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0ReadConfigChecker3)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S6\'");
                int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker3)));
                if ((temp3 == 0)) {
                    this.Manager.Comment("reaching state \'S23\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S24\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S25\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S26\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S27\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S28\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S29\'");
                    int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker2)));
                    if ((temp1 == 0)) {
                        this.Manager.Comment("reaching state \'S30\'");
                        goto label0;
                    }
                    if ((temp1 == 1)) {
                        this.Manager.Comment("reaching state \'S31\'");
                        goto label0;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker2)));
                label0:
;
                    goto label2;
                }
                if ((temp3 == 1)) {
                    this.Manager.Comment("reaching state \'S7\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S8\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S9\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S10\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S11\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S12\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S13\'");
                    int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker9)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker12)));
                    if ((temp2 == 0)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS14();
                        goto label1;
                    }
                    if ((temp2 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS15();
                        goto label1;
                    }
                    if ((temp2 == 2)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS16();
                        goto label1;
                    }
                    if ((temp2 == 3)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS17();
                        goto label1;
                    }
                    if ((temp2 == 4)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS18();
                        goto label1;
                    }
                    if ((temp2 == 5)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS19();
                        goto label1;
                    }
                    if ((temp2 == 6)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS20();
                        goto label1;
                    }
                    if ((temp2 == 7)) {
                        this.Manager.Comment("reaching state \'S21\'");
                        goto label1;
                    }
                    if ((temp2 == 8)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS22();
                        goto label1;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker9)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker12)));
                label1:
;
                    goto label2;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker3)));
            label2:
;
                goto label10;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S36\'");
                int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker23)));
                if ((temp6 == 0)) {
                    this.Manager.Comment("reaching state \'S37\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S38\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S39\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S40\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S41\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S42\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S43\'");
                    int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker14)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker15)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker17)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker18)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker19)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker20)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker21)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker22)));
                    if ((temp4 == 0)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS44();
                        goto label3;
                    }
                    if ((temp4 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS45();
                        goto label3;
                    }
                    if ((temp4 == 2)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS46();
                        goto label3;
                    }
                    if ((temp4 == 3)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS47();
                        goto label3;
                    }
                    if ((temp4 == 4)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS48();
                        goto label3;
                    }
                    if ((temp4 == 5)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS49();
                        goto label3;
                    }
                    if ((temp4 == 6)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS50();
                        goto label3;
                    }
                    if ((temp4 == 7)) {
                        this.Manager.Comment("reaching state \'S51\'");
                        goto label3;
                    }
                    if ((temp4 == 8)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS52();
                        goto label3;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker14)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker15)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker17)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker18)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker19)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker20)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker21)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker22)));
                label3:
;
                    goto label5;
                }
                if ((temp6 == 1)) {
                    this.Manager.Comment("reaching state \'S53\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS54();
                    goto label5;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker23)));
            label5:
;
                goto label10;
            }
            if ((temp11 == 2)) {
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S69\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S70\'");
                int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker30)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker33)));
                if ((temp8 == 0)) {
                    this.Manager.Comment("reaching state \'S71\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS72();
                    goto label7;
                }
                if ((temp8 == 1)) {
                    this.Manager.Comment("reaching state \'S80\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS72();
                    goto label7;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker30)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker33)));
            label7:
;
                goto label10;
            }
            if ((temp11 == 3)) {
                this.Manager.Comment("reaching state \'S81\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S82\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S83\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S84\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S85\'");
                int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker34)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker37)));
                if ((temp10 == 0)) {
                    this.Manager.Comment("reaching state \'S86\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS87();
                    goto label9;
                }
                if ((temp10 == 1)) {
                    this.Manager.Comment("reaching state \'S95\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS87();
                    goto label9;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker34)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker37)));
            label9:
;
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S29");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S29");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S29");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S29");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S29");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S29");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. "", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in GlobalSessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the request is for binding the session, the server MUST look up the" +
                    " session in the GlobalSessionTable using the SessionId in the SMB2 header of the" +
                    " request. \"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in GlobalSessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_" +
                    "FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS14() {
            this.Manager.Comment("reaching state \'S14\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_" +
                    "FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS15() {
            this.Manager.Comment("reaching state \'S15\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FL" +
                    "AG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS16() {
            this.Manager.Comment("reaching state \'S16\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BIND" +
                    "ING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS17() {
            this.Manager.Comment("reaching state \'S17\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_F" +
                    "LAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS18() {
            this.Manager.Comment("reaching state \'S18\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS19() {
            this.Manager.Comment("reaching state \'S19\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS20() {
            this.Manager.Comment("reaching state \'S20\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BIN" +
                    "DING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS22() {
            this.Manager.Comment("reaching state \'S22\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S36");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S36");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_F" +
                    "LAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS44() {
            this.Manager.Comment("reaching state \'S44\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS45() {
            this.Manager.Comment("reaching state \'S45\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS46() {
            this.Manager.Comment("reaching state \'S46\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BIN" +
                    "DING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS47() {
            this.Manager.Comment("reaching state \'S47\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_" +
                    "FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS48() {
            this.Manager.Comment("reaching state \'S48\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS49() {
            this.Manager.Comment("reaching state \'S49\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BI" +
                    "NDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS50() {
            this.Manager.Comment("reaching state \'S50\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS52() {
            this.Manager.Comment("reaching state \'S52\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S36");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S36");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS54() {
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                    "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S59\'");
            int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker24)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker25)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker26)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker27)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker28)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker29)));
            if ((temp5 == 0)) {
                this.Manager.Comment("reaching state \'S60\'");
                goto label4;
            }
            if ((temp5 == 1)) {
                this.Manager.Comment("reaching state \'S61\'");
                goto label4;
            }
            if ((temp5 == 2)) {
                this.Manager.Comment("reaching state \'S62\'");
                goto label4;
            }
            if ((temp5 == 3)) {
                this.Manager.Comment("reaching state \'S63\'");
                goto label4;
            }
            if ((temp5 == 4)) {
                this.Manager.Comment("reaching state \'S64\'");
                goto label4;
            }
            if ((temp5 == 5)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS65();
                goto label4;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker24)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker25)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker26)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker27)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker28)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker29)));
        label4:
;
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_" +
                    "FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker28(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BI" +
                    "NDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker29(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S59");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 4. If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE,and the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server MUST perform the following:The server MUST look up the session in GlobalSessionTable using the SessionId from the SMB2 header."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is TRUE, and the SMB2_SESSION_FLAG_BINDING bit is set"", ""[MS-SMB2] If the session is not found, the server MUST fail the session setup request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The SessionId cannot be found in GlobalSessionTable"", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: 4. If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE,and the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server MUST perform the following:The server MUST look up the session in GlobalSessionTable using the SessionId from the SMB2 header.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is TRUE, and the S" +
                    "MB2_SESSION_FLAG_BINDING bit is set\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server MUST fail the session setup re" +
                    "quest with STATUS_USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId cannot be found in GlobalSessionTable\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS65() {
            this.Manager.Comment("reaching state \'S65\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker30(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S70");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS72() {
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0TerminateConnectionChecker1)));
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S74\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                    "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S77\'");
            int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker31)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker32)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S78\'");
                goto label6;
            }
            if ((temp7 == 1)) {
                this.Manager.Comment("reaching state \'S79\'");
                goto label6;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker31)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker32)));
        label6:
;
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker31(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S77");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S77");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S77");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, the server MUST look up the session in Connection.SessionTable using the SessionId from the SMB2 header.If the session is not found, the server MUST fail the session setup request with STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found using the SessionId of the request"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))))), ((object)(768)))) 
                            == false), "Fail to check the assumption : !((ushort)c.MaxSmbVersionSupported == 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))))), ((object)(770)))) 
                            == false), "Fail to check the assumption : !((ushort)c.MaxSmbVersionSupported == 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: Otherwise, the server MUST look up the session in Connection." +
                    "SessionTable using the SessionId from the SMB2 header.If the session is not foun" +
                    "d, the server MUST fail the session setup request with STATUS_USER_SESSION_DELET" +
                    "ED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found using the SessionId of the request\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker32(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S77");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S77");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S77");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker33(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S70");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker34(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S85");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS87() {
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0TerminateConnectionChecker2)));
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                    "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S92\'");
            int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker35)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker36)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S93\'");
                goto label8;
            }
            if ((temp9 == 1)) {
                this.Manager.Comment("reaching state \'S94\'");
                goto label8;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker35)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker36)));
        label8:
;
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0TerminateConnectionChecker2() {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker35(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S92");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, the server MUST look up the session in Connection.SessionTable using the SessionId from the SMB2 header.If the session is not found, the server MUST fail the session setup request with STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found using the SessionId of the request"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))))), ((object)(768)))) 
                            == false), "Fail to check the assumption : !((ushort)c.MaxSmbVersionSupported == 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))))), ((object)(770)))) 
                            == false), "Fail to check the assumption : !((ushort)c.MaxSmbVersionSupported == 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: Otherwise, the server MUST look up the session in Connection." +
                    "SessionTable using the SessionId from the SMB2 header.If the session is not foun" +
                    "d, the server MUST fail the session setup request with STATUS_USER_SESSION_DELET" +
                    "ED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found using the SessionId of the request\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker36(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S92");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS0SessionSetupResponseChecker37(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S85");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S155
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155");
            this.Manager.Comment("reaching state \'S155\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp12;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp12);
            this.Manager.AddReturn(ReadConfigInfo, null, temp12);
            this.Manager.Comment("reaching state \'S156\'");
            int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155ReadConfigChecker3)));
            if ((temp21 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112();
                goto label19;
            }
            if ((temp21 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS140();
                goto label19;
            }
            if ((temp21 == 2)) {
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S161\'");
                int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker9)));
                if ((temp17 == 0)) {
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS131();
                    goto label15;
                }
                if ((temp17 == 1)) {
                    this.Manager.Comment("reaching state \'S162\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S163\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S164\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S165\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S166\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S167\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S168\'");
                    int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker11)));
                    if ((temp16 == 0)) {
                        this.Manager.Comment("reaching state \'S169\'");
                        goto label14;
                    }
                    if ((temp16 == 1)) {
                        this.Manager.Comment("reaching state \'S170\'");
                        goto label14;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker11)));
                label14:
;
                    goto label15;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker9)));
            label15:
;
                goto label19;
            }
            if ((temp21 == 3)) {
                this.Manager.Comment("reaching state \'S171\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S175\'");
                int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker12)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker15)));
                if ((temp20 == 0)) {
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS111();
                    goto label18;
                }
                if ((temp20 == 1)) {
                    this.Manager.Comment("reaching state \'S176\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S177\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S178\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S179\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S180\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S181\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S182\'");
                    int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker17)));
                    if ((temp19 == 0)) {
                        this.Manager.Comment("reaching state \'S183\'");
                        goto label17;
                    }
                    if ((temp19 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS184();
                        goto label17;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker17)));
                label17:
;
                    goto label18;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker12)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker15)));
            label18:
;
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S156");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112() {
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S114\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                    "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S116\'");
            int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker2)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                        ". \"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                        "e freed.\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.AddReturn(TerminateConnectionInfo, null);
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS118();
                goto label11;
            }
            if ((temp13 == 1)) {
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                        ". \"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                        "e freed.\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.AddReturn(TerminateConnectionInfo, null);
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS118();
                goto label11;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker2)));
        label11:
;
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S116");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S116");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS118() {
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                    "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S123\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S124\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker1)));
            }
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S116");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S116");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S156");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS140() {
            this.Manager.Comment("reaching state \'S140\'");
            this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S142\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                    "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S144\'");
            int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker6)));
            if ((temp15 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS145();
                goto label13;
            }
            if ((temp15 == 1)) {
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                        ". \"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                        "e freed.\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.AddReturn(TerminateConnectionInfo, null);
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS146();
                goto label13;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker6)));
        label13:
;
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S144");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS145() {
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
            this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                    ". \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                    "e freed.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.AddReturn(TerminateConnectionInfo, null);
            SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS146();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS146() {
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155TerminateConnectionChecker1)));
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                    "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S151\'");
            int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker5)));
            if ((temp14 == 0)) {
                this.Manager.Comment("reaching state \'S152\'");
                goto label12;
            }
            if ((temp14 == 1)) {
                this.Manager.Comment("reaching state \'S153\'");
                goto label12;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker5)));
        label12:
;
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S151");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S151");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. "", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in GlobalSessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the request is for binding the session, the server MUST look up the" +
                    " session in the GlobalSessionTable using the SessionId in the SMB2 header of the" +
                    " request. \"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in GlobalSessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S144");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S156");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS131() {
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
            this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                    ". \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                    "e freed.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.AddReturn(TerminateConnectionInfo, null);
            SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS132();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS132() {
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155TerminateConnectionChecker2)));
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                    "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S136\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S137\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker8))) != -1)) {
                this.Manager.Comment("reaching state \'S138\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker8)));
            }
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155TerminateConnectionChecker2() {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S137");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S161");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S168");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, the server MUST look up the session in Connection.SessionTable using the SessionId from the SMB2 header.If the session is not found, the server MUST fail the session setup request with STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found using the SessionId of the request"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))))), ((object)(768)))) 
                            == false), "Fail to check the assumption : !((ushort)c.MaxSmbVersionSupported == 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))))), ((object)(770)))) 
                            == false), "Fail to check the assumption : !((ushort)c.MaxSmbVersionSupported == 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: Otherwise, the server MUST look up the session in Connection." +
                    "SessionTable using the SessionId from the SMB2 header.If the session is not foun" +
                    "d, the server MUST fail the session setup request with STATUS_USER_SESSION_DELET" +
                    "ED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found using the SessionId of the request\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S168");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S156");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S175");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS111() {
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
            this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                    ". \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                    "e freed.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.AddReturn(TerminateConnectionInfo, null);
            SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS104();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS104() {
            this.Manager.Comment("reaching state \'S104\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155TerminateConnectionChecker3)));
            this.Manager.Comment("reaching state \'S105\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S106\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                    "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S108\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S109\'");
            int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker14)));
            if ((temp18 == 0)) {
                this.Manager.Comment("reaching state \'S110\'");
                goto label16;
            }
            if ((temp18 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS65();
                goto label16;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker14)));
        label16:
;
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155TerminateConnectionChecker3() {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S109");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S109");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S109");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S109");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S109");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S109");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. "", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in GlobalSessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the request is for binding the session, the server MUST look up the" +
                    " session in the GlobalSessionTable using the SessionId in the SMB2 header of the" +
                    " request. \"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in GlobalSessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S175");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S182");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS155SessionSetupResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S182");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. "", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in GlobalSessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the request is for binding the session, the server MUST look up the" +
                    " session in the GlobalSessionTable using the SessionId in the SMB2 header of the" +
                    " request. \"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in GlobalSessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS184() {
            this.Manager.Comment("reaching state \'S184\'");
        }
        #endregion
        
        #region Test Starting in S185
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185");
            this.Manager.Comment("reaching state \'S185\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp22;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp22);
            this.Manager.AddReturn(ReadConfigInfo, null, temp22);
            this.Manager.Comment("reaching state \'S186\'");
            int temp26 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185ReadConfigChecker3)));
            if ((temp26 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112();
                goto label23;
            }
            if ((temp26 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS140();
                goto label23;
            }
            if ((temp26 == 2)) {
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S188\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S191\'");
                int temp24 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker3)));
                if ((temp24 == 0)) {
                    this.Manager.Comment("reaching state \'S192\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S193\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S194\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S195\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S196\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S197\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S198\'");
                    int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker2)));
                    if ((temp23 == 0)) {
                        this.Manager.Comment("reaching state \'S199\'");
                        goto label20;
                    }
                    if ((temp23 == 1)) {
                        this.Manager.Comment("reaching state \'S200\'");
                        goto label20;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker2)));
                label20:
;
                    goto label21;
                }
                if ((temp24 == 1)) {
                    this.Manager.Comment("reaching state \'S201\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S202\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S203\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S204\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S205\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S206\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S207\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker4))) != -1)) {
                        this.Manager.Comment("reaching state \'S208\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker4)));
                    }
                    goto label21;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker3)));
            label21:
;
                goto label23;
            }
            if ((temp26 == 3)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS98();
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S191");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S191");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S198");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S198");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, the server MUST look up the session in Connection.SessionTable using the SessionId from the SMB2 header.If the session is not found, the server MUST fail the session setup request with STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found using the SessionId of the request"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))))), ((object)(768)))) 
                            == false), "Fail to check the assumption : !((ushort)c.MaxSmbVersionSupported == 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))))), ((object)(770)))) 
                            == false), "Fail to check the assumption : !((ushort)c.MaxSmbVersionSupported == 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: Otherwise, the server MUST look up the session in Connection." +
                    "SessionTable using the SessionId from the SMB2 header.If the session is not foun" +
                    "d, the server MUST fail the session setup request with STATUS_USER_SESSION_DELET" +
                    "ED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found using the SessionId of the request\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S198");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S198");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S191");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S191");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S207");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S186");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS98() {
            this.Manager.Comment("reaching state \'S98\'");
            this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S100\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                    "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S102\'");
            int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker6)));
            if ((temp25 == 0)) {
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                        ". \"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                        "e freed.\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.AddReturn(TerminateConnectionInfo, null);
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS104();
                goto label22;
            }
            if ((temp25 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS111();
                goto label22;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker6)));
        label22:
;
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S102");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S102");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S102");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS185SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S102");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S102");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S102");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S209
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209");
            this.Manager.Comment("reaching state \'S209\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp27;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp27);
            this.Manager.AddReturn(ReadConfigInfo, null, temp27);
            this.Manager.Comment("reaching state \'S210\'");
            int temp31 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209ReadConfigChecker3)));
            if ((temp31 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112();
                goto label27;
            }
            if ((temp31 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS126();
                goto label27;
            }
            if ((temp31 == 2)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS140();
                goto label27;
            }
            if ((temp31 == 3)) {
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S214\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S215\'");
                int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker3)));
                if ((temp30 == 0)) {
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS111();
                    goto label26;
                }
                if ((temp30 == 1)) {
                    this.Manager.Comment("reaching state \'S216\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S217\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S218\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S219\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S220\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S221\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S222\'");
                    int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker5)));
                    if ((temp29 == 0)) {
                        this.Manager.Comment("reaching state \'S223\'");
                        goto label25;
                    }
                    if ((temp29 == 1)) {
                        this.Manager.Comment("reaching state \'S224\'");
                        goto label25;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker5)));
                label25:
;
                    goto label26;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker3)));
            label26:
;
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S210");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S210");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS126() {
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                    "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S130\'");
            int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker1)));
            if ((temp28 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS131();
                goto label24;
            }
            if ((temp28 == 1)) {
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                        ". \"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                        "e freed.\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.AddReturn(TerminateConnectionInfo, null);
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS132();
                goto label24;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker1)));
        label24:
;
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S130");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S130");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S210");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S210");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S215");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S215");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S215");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S215");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S222");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S222");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS209SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S222");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S222");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. "", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in GlobalSessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the request is for binding the session, the server MUST look up the" +
                    " session in the GlobalSessionTable using the SessionId in the SMB2 header of the" +
                    " request. \"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in GlobalSessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S225
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225");
            this.Manager.Comment("reaching state \'S225\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp32;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp32);
            this.Manager.AddReturn(ReadConfigInfo, null, temp32);
            this.Manager.Comment("reaching state \'S226\'");
            int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225ReadConfigChecker3)));
            if ((temp37 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112();
                goto label32;
            }
            if ((temp37 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS126();
                goto label32;
            }
            if ((temp37 == 2)) {
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S231\'");
                int temp34 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker1)));
                if ((temp34 == 0)) {
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS111();
                    goto label29;
                }
                if ((temp34 == 1)) {
                    this.Manager.Comment("reaching state \'S232\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S233\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S234\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S235\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S236\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S237\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S238\'");
                    int temp33 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker3)));
                    if ((temp33 == 0)) {
                        this.Manager.Comment("reaching state \'S239\'");
                        goto label28;
                    }
                    if ((temp33 == 1)) {
                        this.Manager.Comment("reaching state \'S240\'");
                        goto label28;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker3)));
                label28:
;
                    goto label29;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker1)));
            label29:
;
                goto label32;
            }
            if ((temp37 == 3)) {
                this.Manager.Comment("reaching state \'S241\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S242\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S243\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S245\'");
                int temp36 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker5)));
                if ((temp36 == 0)) {
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS145();
                    goto label31;
                }
                if ((temp36 == 1)) {
                    this.Manager.Comment("reaching state \'S246\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S247\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S248\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S249\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S250\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S251\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S252\'");
                    int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker7)));
                    if ((temp35 == 0)) {
                        this.Manager.Comment("reaching state \'S253\'");
                        goto label30;
                    }
                    if ((temp35 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS254();
                        goto label30;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker7)));
                label30:
;
                    goto label31;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker5)));
            label31:
;
                goto label32;
            }
            throw new InvalidOperationException("never reached");
        label32:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S231");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S231");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S231");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S231");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S231");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S231");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S238");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S238");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. "", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in GlobalSessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the request is for binding the session, the server MUST look up the" +
                    " session in the GlobalSessionTable using the SessionId in the SMB2 header of the" +
                    " request. \"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in GlobalSessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S245");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S245");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S245");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S245");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S245");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S245");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S252");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS225SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S252");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. "", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in GlobalSessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the request is for binding the session, the server MUST look up the" +
                    " session in the GlobalSessionTable using the SessionId in the SMB2 header of the" +
                    " request. \"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in GlobalSessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS254() {
            this.Manager.Comment("reaching state \'S254\'");
        }
        #endregion
        
        #region Test Starting in S255
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255");
            this.Manager.Comment("reaching state \'S255\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp38;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp38);
            this.Manager.AddReturn(ReadConfigInfo, null, temp38);
            this.Manager.Comment("reaching state \'S256\'");
            int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255ReadConfigChecker3)));
            if ((temp43 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112();
                goto label37;
            }
            if ((temp43 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS126();
                goto label37;
            }
            if ((temp43 == 2)) {
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S261\'");
                int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker1)));
                if ((temp40 == 0)) {
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS111();
                    goto label34;
                }
                if ((temp40 == 1)) {
                    this.Manager.Comment("reaching state \'S262\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S263\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S264\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S265\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S266\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S267\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S268\'");
                    int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker7)));
                    if ((temp39 == 0)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS184();
                        goto label33;
                    }
                    if ((temp39 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS269();
                        goto label33;
                    }
                    if ((temp39 == 2)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS270();
                        goto label33;
                    }
                    if ((temp39 == 3)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS271();
                        goto label33;
                    }
                    if ((temp39 == 4)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS272();
                        goto label33;
                    }
                    if ((temp39 == 5)) {
                        this.Manager.Comment("reaching state \'S273\'");
                        goto label33;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker7)));
                label33:
;
                    goto label34;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker1)));
            label34:
;
                goto label37;
            }
            if ((temp43 == 3)) {
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S276\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S277\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S278\'");
                int temp42 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker9)));
                if ((temp42 == 0)) {
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS145();
                    goto label36;
                }
                if ((temp42 == 1)) {
                    this.Manager.Comment("reaching state \'S279\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS280();
                    goto label36;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker9)));
            label36:
;
                goto label37;
            }
            throw new InvalidOperationException("never reached");
        label37:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S256");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S256");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S256");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S261");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S261");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S268");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 4. If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE,and the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server MUST perform the following:The server MUST look up the session in GlobalSessionTable using the SessionId from the SMB2 header."", ""[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is TRUE, and the SMB2_SESSION_FLAG_BINDING bit is set"", ""[MS-SMB2] If the session is not found, the server MUST fail the session setup request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The SessionId cannot be found in GlobalSessionTable"", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: 4. If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE,and the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server MUST perform the following:The server MUST look up the session in GlobalSessionTable using the SessionId from the SMB2 header.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is TRUE, and the " +
                    "SMB2_SESSION_FLAG_BINDING bit is set\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server MUST fail the session setup re" +
                    "quest with STATUS_USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId cannot be found in GlobalSessionTable\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S268");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT pla" +
                    "tform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS269() {
            this.Manager.Comment("reaching state \'S269\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S268");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT pla" +
                    "tform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSI" +
                    "ON_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS270() {
            this.Manager.Comment("reaching state \'S270\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S268");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT pla" +
                    "tform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSI" +
                    "ON_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS271() {
            this.Manager.Comment("reaching state \'S271\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S268");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT pla" +
                    "tform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_B" +
                    "INDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS272() {
            this.Manager.Comment("reaching state \'S272\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S268");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S268");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S256");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S278");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S278");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S278");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S278");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S278");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S278");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS280() {
            this.Manager.Comment("reaching state \'S280\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255TerminateConnectionChecker)));
            this.Manager.Comment("reaching state \'S281\'");
            this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
            this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S282\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S283\'");
            this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                    "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
            this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
            this.Manager.Comment("reaching state \'S284\'");
            this.Manager.Comment("checking step \'return SessionSetupRequest\'");
            this.Manager.Comment("reaching state \'S285\'");
            int temp41 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker11)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S286\'");
                goto label35;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S287\'");
                goto label35;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker11)));
        label35:
;
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'return TerminateConnection\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S285");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S285");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS255SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S285");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S285");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. "", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in GlobalSessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the request is for binding the session, the server MUST look up the" +
                    " session in the GlobalSessionTable using the SessionId in the SMB2 header of the" +
                    " request. \"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in GlobalSessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S288
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288");
            this.Manager.Comment("reaching state \'S288\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp44;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp44);
            this.Manager.AddReturn(ReadConfigInfo, null, temp44);
            this.Manager.Comment("reaching state \'S289\'");
            int temp48 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288ReadConfigChecker3)));
            if ((temp48 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112();
                goto label41;
            }
            if ((temp48 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS126();
                goto label41;
            }
            if ((temp48 == 2)) {
                this.Manager.Comment("reaching state \'S290\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S292\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S293\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S294\'");
                int temp45 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker1)));
                if ((temp45 == 0)) {
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS111();
                    goto label38;
                }
                if ((temp45 == 1)) {
                    this.Manager.Comment("reaching state \'S295\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS54();
                    goto label38;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker1)));
            label38:
;
                goto label41;
            }
            if ((temp48 == 3)) {
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S298\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S299\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S300\'");
                int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker3)));
                if ((temp47 == 0)) {
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS145();
                    goto label40;
                }
                if ((temp47 == 1)) {
                    this.Manager.Comment("reaching state \'S301\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S302\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S303\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S304\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S305\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S306\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S307\'");
                    int temp46 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker9)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker12)));
                    if ((temp46 == 0)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS308();
                        goto label39;
                    }
                    if ((temp46 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS309();
                        goto label39;
                    }
                    if ((temp46 == 2)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS310();
                        goto label39;
                    }
                    if ((temp46 == 3)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS311();
                        goto label39;
                    }
                    if ((temp46 == 4)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS312();
                        goto label39;
                    }
                    if ((temp46 == 5)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS313();
                        goto label39;
                    }
                    if ((temp46 == 6)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS314();
                        goto label39;
                    }
                    if ((temp46 == 7)) {
                        this.Manager.Comment("reaching state \'S315\'");
                        goto label39;
                    }
                    if ((temp46 == 8)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS316();
                        goto label39;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker9)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker12)));
                label39:
;
                    goto label40;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker3)));
            label40:
;
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S289");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S289");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S289");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S294");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S294");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S294");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S294");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S294");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S294");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S289");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S300");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S300");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S300");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S300");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S300");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S300");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS308() {
            this.Manager.Comment("reaching state \'S308\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS309() {
            this.Manager.Comment("reaching state \'S309\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_" +
                    "FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS310() {
            this.Manager.Comment("reaching state \'S310\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS311() {
            this.Manager.Comment("reaching state \'S311\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSI" +
                    "ON_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS312() {
            this.Manager.Comment("reaching state \'S312\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSI" +
                    "ON_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS313() {
            this.Manager.Comment("reaching state \'S313\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_B" +
                    "INDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS314() {
            this.Manager.Comment("reaching state \'S314\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS288SessionSetupResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BI" +
                    "NDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS316() {
            this.Manager.Comment("reaching state \'S316\'");
        }
        #endregion
        
        #region Test Starting in S317
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317");
            this.Manager.Comment("reaching state \'S317\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp49;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp49);
            this.Manager.AddReturn(ReadConfigInfo, null, temp49);
            this.Manager.Comment("reaching state \'S318\'");
            int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317ReadConfigChecker3)));
            if ((temp54 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112();
                goto label46;
            }
            if ((temp54 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS126();
                goto label46;
            }
            if ((temp54 == 2)) {
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb21)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S322\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S323\'");
                int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker1)));
                if ((temp51 == 0)) {
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS111();
                    goto label43;
                }
                if ((temp51 == 1)) {
                    this.Manager.Comment("reaching state \'S324\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S325\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S326\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S327\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S328\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S329\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S330\'");
                    int temp50 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker9)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker10)));
                    if ((temp50 == 0)) {
                        this.Manager.Comment("reaching state \'S331\'");
                        goto label42;
                    }
                    if ((temp50 == 1)) {
                        this.Manager.Comment("reaching state \'S332\'");
                        goto label42;
                    }
                    if ((temp50 == 2)) {
                        this.Manager.Comment("reaching state \'S333\'");
                        goto label42;
                    }
                    if ((temp50 == 3)) {
                        this.Manager.Comment("reaching state \'S334\'");
                        goto label42;
                    }
                    if ((temp50 == 4)) {
                        this.Manager.Comment("reaching state \'S335\'");
                        goto label42;
                    }
                    if ((temp50 == 5)) {
                        this.Manager.Comment("reaching state \'S336\'");
                        goto label42;
                    }
                    if ((temp50 == 6)) {
                        this.Manager.Comment("reaching state \'S337\'");
                        goto label42;
                    }
                    if ((temp50 == 7)) {
                        this.Manager.Comment("reaching state \'S338\'");
                        goto label42;
                    }
                    if ((temp50 == 8)) {
                        this.Manager.Comment("reaching state \'S339\'");
                        goto label42;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker9)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker10)));
                label42:
;
                    goto label43;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker1)));
            label43:
;
                goto label46;
            }
            if ((temp54 == 3)) {
                this.Manager.Comment("reaching state \'S340\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S341\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S344\'");
                int temp53 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker12)));
                if ((temp53 == 0)) {
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS145();
                    goto label45;
                }
                if ((temp53 == 1)) {
                    this.Manager.Comment("reaching state \'S345\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S346\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S347\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S348\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S349\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S350\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S351\'");
                    int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker14)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker15)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker17)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker18)));
                    if ((temp52 == 0)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS254();
                        goto label44;
                    }
                    if ((temp52 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS352();
                        goto label44;
                    }
                    if ((temp52 == 2)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS353();
                        goto label44;
                    }
                    if ((temp52 == 3)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS354();
                        goto label44;
                    }
                    if ((temp52 == 4)) {
                        this.Manager.Comment("reaching state \'S355\'");
                        goto label44;
                    }
                    if ((temp52 == 5)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS356();
                        goto label44;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker14)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker15)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker17)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker18)));
                label44:
;
                    goto label45;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker12)));
            label45:
;
                goto label46;
            }
            throw new InvalidOperationException("never reached");
        label46:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S318");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S318");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S318");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S323");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S323");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSI" +
                    "ON_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSI" +
                    "ON_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESS" +
                    "ION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESS" +
                    "ION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_" +
                    "BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S330");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_B" +
                    "INDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S318");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S344");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S344");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S344");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S344");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 4. If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE,and the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server MUST perform the following:The server MUST look up the session in GlobalSessionTable using the SessionId from the SMB2 header."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is TRUE, and the SMB2_SESSION_FLAG_BINDING bit is set"", ""[MS-SMB2] If the session is not found, the server MUST fail the session setup request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The SessionId cannot be found in GlobalSessionTable"", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: 4. If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE,and the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server MUST perform the following:The server MUST look up the session in GlobalSessionTable using the SessionId from the SMB2 header.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is TRUE, and the S" +
                    "MB2_SESSION_FLAG_BINDING bit is set\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server MUST fail the session setup re" +
                    "quest with STATUS_USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId cannot be found in GlobalSessionTable\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_F" +
                    "LAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS352() {
            this.Manager.Comment("reaching state \'S352\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS353() {
            this.Manager.Comment("reaching state \'S353\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BIN" +
                    "DING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS354() {
            this.Manager.Comment("reaching state \'S354\'");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS317SessionSetupResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S351");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS356() {
            this.Manager.Comment("reaching state \'S356\'");
        }
        #endregion
        
        #region Test Starting in S357
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357");
            this.Manager.Comment("reaching state \'S357\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp55;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp55);
            this.Manager.AddReturn(ReadConfigInfo, null, temp55);
            this.Manager.Comment("reaching state \'S358\'");
            int temp62 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357ReadConfigChecker3)));
            if ((temp62 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112();
                goto label53;
            }
            if ((temp62 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS126();
                goto label53;
            }
            if ((temp62 == 2)) {
                this.Manager.Comment("reaching state \'S359\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb302)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S360\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S361\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S362\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S363\'");
                int temp58 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker3)));
                if ((temp58 == 0)) {
                    this.Manager.Comment("reaching state \'S364\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S365\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S366\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S367\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S368\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S369\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S370\'");
                    int temp56 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker2)));
                    if ((temp56 == 0)) {
                        this.Manager.Comment("reaching state \'S371\'");
                        goto label47;
                    }
                    if ((temp56 == 1)) {
                        this.Manager.Comment("reaching state \'S372\'");
                        goto label47;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker2)));
                label47:
;
                    goto label49;
                }
                if ((temp58 == 1)) {
                    this.Manager.Comment("reaching state \'S373\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S374\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S375\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S376\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S377\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S378\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S379\'");
                    int temp57 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker5)));
                    if ((temp57 == 0)) {
                        this.Manager.Comment("reaching state \'S380\'");
                        goto label48;
                    }
                    if ((temp57 == 1)) {
                        this.Manager.Comment("reaching state \'S381\'");
                        goto label48;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker5)));
                label48:
;
                    goto label49;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker3)));
            label49:
;
                goto label53;
            }
            if ((temp62 == 3)) {
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S385\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S386\'");
                int temp61 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker13)));
                if ((temp61 == 0)) {
                    this.Manager.Comment("reaching state \'S387\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S388\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S389\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb30)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S390\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S391\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S392\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S393\'");
                    int temp59 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker9)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker12)));
                    if ((temp59 == 0)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS352();
                        goto label50;
                    }
                    if ((temp59 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS353();
                        goto label50;
                    }
                    if ((temp59 == 2)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS354();
                        goto label50;
                    }
                    if ((temp59 == 3)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS356();
                        goto label50;
                    }
                    if ((temp59 == 4)) {
                        this.Manager.Comment("reaching state \'S394\'");
                        goto label50;
                    }
                    if ((temp59 == 5)) {
                        this.Manager.Comment("reaching state \'S395\'");
                        goto label50;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker9)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker12)));
                label50:
;
                    goto label52;
                }
                if ((temp61 == 1)) {
                    this.Manager.Comment("reaching state \'S396\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S397\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S398\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S399\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S400\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S401\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S402\'");
                    int temp60 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker14)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker15)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker17)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker18)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker19)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker20)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker21)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker22)));
                    if ((temp60 == 0)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS308();
                        goto label51;
                    }
                    if ((temp60 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS309();
                        goto label51;
                    }
                    if ((temp60 == 2)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS310();
                        goto label51;
                    }
                    if ((temp60 == 3)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS311();
                        goto label51;
                    }
                    if ((temp60 == 4)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS312();
                        goto label51;
                    }
                    if ((temp60 == 5)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS313();
                        goto label51;
                    }
                    if ((temp60 == 6)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS314();
                        goto label51;
                    }
                    if ((temp60 == 7)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS316();
                        goto label51;
                    }
                    if ((temp60 == 8)) {
                        this.Manager.Comment("reaching state \'S403\'");
                        goto label51;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker14)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker15)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker16)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker17)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker18)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker19)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker20)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker21)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker22)));
                label51:
;
                    goto label52;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker13)));
            label52:
;
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S358");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S358");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S358");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S363");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S363");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S363");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb302"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S370");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S370");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. "", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in GlobalSessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the request is for binding the session, the server MUST look up the" +
                    " session in the GlobalSessionTable using the SessionId in the SMB2 header of the" +
                    " request. \"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in GlobalSessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S363");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S363");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S363");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S379");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S379");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S379");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S379");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. "", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in GlobalSessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the request is for binding the session, the server MUST look up the" +
                    " session in the GlobalSessionTable using the SessionId in the SMB2 header of the" +
                    " request. \"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in GlobalSessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S358");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S386");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S386");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S386");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_F" +
                    "LAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BIN" +
                    "DING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S393");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 4. If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE,and the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server MUST perform the following:The server MUST look up the session in GlobalSessionTable using the SessionId from the SMB2 header."", ""[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is TRUE, and the SMB2_SESSION_FLAG_BINDING bit is set"", ""[MS-SMB2] If the session is not found, the server MUST fail the session setup request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The SessionId cannot be found in GlobalSessionTable"", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: 4. If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE,and the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server MUST perform the following:The server MUST look up the session in GlobalSessionTable using the SessionId from the SMB2 header.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, IsMultiChannelCapable is TRUE, and the S" +
                    "MB2_SESSION_FLAG_BINDING bit is set\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server MUST fail the session setup re" +
                    "quest with STATUS_USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId cannot be found in GlobalSessionTable\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S386");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S386");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S386");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_" +
                    "FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSI" +
                    "ON_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSI" +
                    "ON_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is False, SUT pl" +
                    "atform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_B" +
                    "INDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT platform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002, IsMultiChannelCapable is True, SUT pla" +
                    "tform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BI" +
                    "NDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS357SessionSetupResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S402");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S404
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404");
            this.Manager.Comment("reaching state \'S404\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp63;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp63);
            this.Manager.AddReturn(ReadConfigInfo, null, temp63);
            this.Manager.Comment("reaching state \'S405\'");
            int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404ReadConfigChecker3)));
            if ((temp69 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112();
                goto label59;
            }
            if ((temp69 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS126();
                goto label59;
            }
            if ((temp69 == 2)) {
                this.Manager.Comment("reaching state \'S406\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb2002)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S407\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S408\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S409\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S410\'");
                int temp66 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker7)));
                if ((temp66 == 0)) {
                    this.Manager.Comment("reaching state \'S411\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S412\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S413\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb302)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S414\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S415\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S416\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S417\'");
                    int temp64 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker6)));
                    if ((temp64 == 0)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS269();
                        goto label54;
                    }
                    if ((temp64 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS270();
                        goto label54;
                    }
                    if ((temp64 == 2)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS271();
                        goto label54;
                    }
                    if ((temp64 == 3)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS272();
                        goto label54;
                    }
                    if ((temp64 == 4)) {
                        this.Manager.Comment("reaching state \'S418\'");
                        goto label54;
                    }
                    if ((temp64 == 5)) {
                        this.Manager.Comment("reaching state \'S419\'");
                        goto label54;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker6)));
                label54:
;
                    goto label56;
                }
                if ((temp66 == 1)) {
                    this.Manager.Comment("reaching state \'S420\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S421\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S422\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S423\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S424\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S425\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S426\'");
                    int temp65 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker9)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker12)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker14)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker15)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker16)));
                    if ((temp65 == 0)) {
                        this.Manager.Comment("reaching state \'S427\'");
                        goto label55;
                    }
                    if ((temp65 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS44();
                        goto label55;
                    }
                    if ((temp65 == 2)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS45();
                        goto label55;
                    }
                    if ((temp65 == 3)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS46();
                        goto label55;
                    }
                    if ((temp65 == 4)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS47();
                        goto label55;
                    }
                    if ((temp65 == 5)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS48();
                        goto label55;
                    }
                    if ((temp65 == 6)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS49();
                        goto label55;
                    }
                    if ((temp65 == 7)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS50();
                        goto label55;
                    }
                    if ((temp65 == 8)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS52();
                        goto label55;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker9)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker10)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker12)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker13)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker14)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker15)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker16)));
                label55:
;
                    goto label56;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker7)));
            label56:
;
                goto label59;
            }
            if ((temp69 == 3)) {
                this.Manager.Comment("reaching state \'S428\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S429\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S430\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S431\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S432\'");
                int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker17)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker27)));
                if ((temp68 == 0)) {
                    this.Manager.Comment("reaching state \'S433\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S434\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S435\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S436\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S437\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S438\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S439\'");
                    int temp67 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker18)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker19)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker20)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker21)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker22)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker23)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker24)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker25)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker26)));
                    if ((temp67 == 0)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS14();
                        goto label57;
                    }
                    if ((temp67 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS15();
                        goto label57;
                    }
                    if ((temp67 == 2)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS16();
                        goto label57;
                    }
                    if ((temp67 == 3)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS17();
                        goto label57;
                    }
                    if ((temp67 == 4)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS18();
                        goto label57;
                    }
                    if ((temp67 == 5)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS19();
                        goto label57;
                    }
                    if ((temp67 == 6)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS20();
                        goto label57;
                    }
                    if ((temp67 == 7)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS22();
                        goto label57;
                    }
                    if ((temp67 == 8)) {
                        this.Manager.Comment("reaching state \'S440\'");
                        goto label57;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker18)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker19)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker20)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker21)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker22)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker23)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker24)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker25)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker26)));
                label57:
;
                    goto label58;
                }
                if ((temp68 == 1)) {
                    this.Manager.Comment("reaching state \'S441\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.AddReturn(TerminateConnectionInfo, null);
                    SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS280();
                    goto label58;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker17)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker27)));
            label58:
;
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S405");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S405");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S405");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S410");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S410");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S410");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT pla" +
                    "tform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT pla" +
                    "tform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSI" +
                    "ON_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT pla" +
                    "tform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSI" +
                    "ON_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is False, SUT pla" +
                    "tform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_B" +
                    "INDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 4. If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE,and the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server MUST perform the following:The server MUST look up the session in GlobalSessionTable using the SessionId from the SMB2 header."", ""[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is TRUE, and the SMB2_SESSION_FLAG_BINDING bit is set"", ""[MS-SMB2] If the session is not found, the server MUST fail the session setup request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The SessionId cannot be found in GlobalSessionTable"", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: 4. If Connection.Dialect belongs to the SMB 3.x dialect family, IsMultiChannelCapable is TRUE,and the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server MUST perform the following:The server MUST look up the session in GlobalSessionTable using the SessionId from the SMB2 header.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, IsMultiChannelCapable is TRUE, and the " +
                    "SMB2_SESSION_FLAG_BINDING bit is set\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server MUST fail the session setup re" +
                    "quest with STATUS_USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId cannot be found in GlobalSessionTable\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S417");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S410");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S410");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S410");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S426");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S426");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_F" +
                    "LAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S426");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S426");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S426");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BIN" +
                    "DING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S426");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_" +
                    "FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S426");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S426");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BI" +
                    "NDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S426");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S426");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S405");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S432");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S432");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S432");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S439");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_" +
                    "FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S439");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_" +
                    "FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S439");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FL" +
                    "AG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S439");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=True,Pl" +
                    "atform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BIND" +
                    "ING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S439");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008, Max Smb version supported is Smb30 and SMB2_SESSION_F" +
                    "LAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S439");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008R2, Max Smb version supported is Smb30 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S439");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2012R2, Max Smb version supported is Smb30 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S439");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb30,IsMultiChannelCapable=False,P" +
                    "latform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is NonWindows, Max Smb version supported is Smb30 and SMB2_SESSION_FLAG_BIN" +
                    "DING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S439");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S439");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS404SessionSetupResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S432");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S432");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S432");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S442
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442");
            this.Manager.Comment("reaching state \'S442\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp70;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp70);
            this.Manager.AddReturn(ReadConfigInfo, null, temp70);
            this.Manager.Comment("reaching state \'S443\'");
            int temp74 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442ReadConfigChecker3)));
            if ((temp74 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112();
                goto label63;
            }
            if ((temp74 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS126();
                goto label63;
            }
            if ((temp74 == 2)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS140();
                goto label63;
            }
            if ((temp74 == 3)) {
                this.Manager.Comment("reaching state \'S444\'");
                this.Manager.Comment("executing step \'call SetupConnection(MainConnection,Smb30)\'");
                this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S445\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S446\'");
                this.Manager.Comment("executing step \'call SessionSetupRequest(MainConnection,ZeroSessionId,ZeroSession" +
                        "Id,SignFlagNotSet,NotBinding,DefaultUser,AllowReauthentication)\'");
                this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                this.Manager.Comment("reaching state \'S447\'");
                this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                this.Manager.Comment("reaching state \'S448\'");
                int temp73 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker10)));
                if ((temp73 == 0)) {
                    this.Manager.Comment("reaching state \'S449\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S450\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S451\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb21)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S452\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S453\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagNotSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S454\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S455\'");
                    int temp71 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker9)));
                    if ((temp71 == 0)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS44();
                        goto label60;
                    }
                    if ((temp71 == 1)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS45();
                        goto label60;
                    }
                    if ((temp71 == 2)) {
                        this.Manager.Comment("reaching state \'S456\'");
                        goto label60;
                    }
                    if ((temp71 == 3)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS46();
                        goto label60;
                    }
                    if ((temp71 == 4)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS47();
                        goto label60;
                    }
                    if ((temp71 == 5)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS48();
                        goto label60;
                    }
                    if ((temp71 == 6)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS49();
                        goto label60;
                    }
                    if ((temp71 == 7)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS50();
                        goto label60;
                    }
                    if ((temp71 == 8)) {
                        SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS52();
                        goto label60;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker1)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker2)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker3)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker4)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker5)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker6)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker7)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker8)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker9)));
                label60:
;
                    goto label62;
                }
                if ((temp73 == 1)) {
                    this.Manager.Comment("reaching state \'S457\'");
                    this.Manager.Comment("executing step \'call TerminateConnection(MainConnection)\'");
                    this.ISessionMgmtAdapterInstance.TerminateConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: the Session MUST be removed from GlobalSessionTable and freed" +
                            ". \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The connection MUST be removed from ConnectionList and MUST b" +
                            "e freed.\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S458\'");
                    this.Manager.Comment("checking step \'return TerminateConnection\'");
                    this.Manager.Comment("reaching state \'S459\'");
                    this.Manager.Comment("executing step \'call SetupConnection(AlternativeConnection,Smb2002)\'");
                    this.ISessionMgmtAdapterInstance.SetupConnection(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.ConstrainedConnection is set to TRUE.\"");
                    this.Manager.Comment("reaching state \'S460\'");
                    this.Manager.Comment("checking step \'return SetupConnection\'");
                    this.Manager.Comment("reaching state \'S461\'");
                    this.Manager.Comment("executing step \'call SessionSetupRequest(AlternativeConnection,MainSessionId,Zero" +
                            "SessionId,SignFlagSet,Binding,DefaultUser,AllowReauthentication)\'");
                    this.ISessionMgmtAdapterInstance.SessionSetupRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId.MainSessionId, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSessionId)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelSigned)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelFlags)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelUser)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelAllowReauthentication)(0)));
                    this.Manager.Comment("reaching state \'S462\'");
                    this.Manager.Comment("checking step \'return SessionSetupRequest\'");
                    this.Manager.Comment("reaching state \'S463\'");
                    int temp72 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker12)));
                    if ((temp72 == 0)) {
                        this.Manager.Comment("reaching state \'S464\'");
                        goto label61;
                    }
                    if ((temp72 == 1)) {
                        this.Manager.Comment("reaching state \'S465\'");
                        goto label61;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker11)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker12)));
                label61:
;
                    goto label62;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker)), new ExpectedEvent(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.SessionSetupResponseInfo, null, new SessionSetupResponseDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker10)));
            label62:
;
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S443");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S443");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S443");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S443");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_SUCCESS,MainConnection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of SessionSetupResponse, state S448");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S448");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S448");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. "", ""[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the server MUST insert the Session into Connection.SessionTable. "", ""[TestInfo] Connection.Dialect is Smb30"", ""[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.ConstrainedConnection to FALSE."", ""[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection to FALSE"", ""[MS-SMB2] 13. Session.State MUST be set to Valid.""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Connection.Dialect belongs to the SMB 3.x dialect family, the serve" +
                    "r MUST insert the Session into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Session.IsAnonymous is FALSE, the server MUST set Connection.Constr" +
                    "ainedConnection to FALSE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Session.IsAnonymous is FALSE, so set Connection.ConstrainedConnection" +
                    " to FALSE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 13. Session.State MUST be set to Valid.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S455");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_F" +
                    "LAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S455");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S455");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the session in GlobalSessionTable using the SessionId from the SMB2 header if the SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. "", ""[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[MS-SMB2] If the session is not found, the server fails the request with STATUS_USER_SESSION_DELETED."", ""[TestInfo] The session is not found""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] <232> Section 3.3.5.5: Windows 8 and Windows Server 2012 look up the s" +
                    "ession in GlobalSessionTable using the SessionId from the SMB2 header if the SMB" +
                    "2_SESSION_FLAG_BINDING bit is set in the Flags field of the request. \"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012. The SMB2_SESSION_FLAG_BINDING " +
                    "bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the server fails the request with STATUS_" +
                    "USER_SESSION_DELETED.\"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S455");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION" +
                    "_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S455");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            true,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=True,P" +
                    "latform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(1))), "Fail to check the assumption : v1.IsMultiChannelCapable == 1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is True, SUT platf" +
                    "orm is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BIN" +
                    "DING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S455");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008, Max Smb version supported is Smb302 and SMB2_SESSION_" +
                    "FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S455");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2008R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2008R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2008R2, Max Smb version supported is Smb302 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(status,AlternativeConnection,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S455");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.NonWindows}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=NonWindows)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is NonWindows, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BI" +
                    "NDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_REQUEST_NOT_ACCEPTED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_REQUEST_NOT_ACCEPTED, status, "status of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S455");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED."", ""[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT platform is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSION_FLAG_BINDING bit is set."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsMultiChannelCapable",
                            "Platform"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                            false,
                            Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.Platform.WindowsServer2012R2}), "c == SessionMgmtConfig(MaxSmbVersionSupported=Smb302,IsMultiChannelCapable=False," +
                    "Platform=WindowsServer2012R2)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.5: Otherwise, if the server implements the SMB 3.x dialect family, and Connection.Dialect is equal to ""2.002"" or ""2.100"" or IsMultiChannelCapable is FALSE, and SMB2_SESSION_FLAG_BINDING bit is set in the Flags field of the request, the server SHOULD<225> fail the session setup request with STATUS_REQUEST_NOT_ACCEPTED.""");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21, IsMultiChannelCapable is False, SUT plat" +
                    "form is WindowsServer2012R2, Max Smb version supported is Smb302 and SMB2_SESSIO" +
                    "N_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_MORE_PROCESSING_REQUIRED,MainCon" +
                    "nection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_MORE_PROCESSING_REQUIRED, status, "status of SessionSetupResponse, state S448");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(0)), connectionId, "connectionId of SessionSetupResponse, state S448");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S448");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, the server MUST process the authentication request as specified in section 3.3.5.5.1."", ""[TestInfo] The SessionId of the SessionSetup Request is zero"", ""[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. "", ""[MS-SMB2] The other values MUST be initialized as follows:"", ""[MS-SMB2] Session.State is set to InProgress."", ""[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique Session.SessionId is assigned to serve as a lookup key in the table. "", ""[MS-SMB2] The session MUST be inserted into Connection.SessionTable. "", ""[MS-SMB2] Using this session, authentication is continued as specified in section 3.3.5.5.3."", ""[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST be set to STATUS_SUCCESS. """);
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5: 3. If SessionId in the SMB2 header of the request is zero, th" +
                    "e server MUST process the authentication request as specified in section 3.3.5.5" +
                    ".1.\"");
            this.Manager.Checkpoint("\"[TestInfo] The SessionId of the SessionSetup Request is zero\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.1: A session object MUST be allocated for this request. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The other values MUST be initialized as follows:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Session.State is set to InProgress.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into the GlobalSessionTable and a unique " +
                    "Session.SessionId is assigned to serve as a lookup key in the table. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] The session MUST be inserted into Connection.SessionTable. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] Using this session, authentication is continued as specified in sectio" +
                    "n 3.3.5.5.3.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.5.3: 1. The status code in the SMB2 header of the response MUST " +
                    "be set to STATUS_SUCCESS. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S463");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S463");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S463");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] For all other requests, the server MUST look up the session in the Connection.SessionTable using the SessionId in the SMB2 header of the request."", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in Connection.SessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : c.IsMultiChannelCapable == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v1.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] For all other requests, the server MUST look up the session in the Con" +
                    "nection.SessionTable using the SessionId in the SMB2 header of the request.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is not set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in Connection.SessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS442SessionSetupResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId connectionId, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'event SessionSetupResponse(STATUS_USER_SESSION_DELETED,Alternative" +
                    "Connection,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_USER_SESSION_DELETED, status, "status of SessionSetupResponse, state S463");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.ModelConnectionId)(1)), connectionId, "connectionId of SessionSetupResponse, state S463");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c1, c, "c of SessionSetupResponse, state S463");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set in the Flags field, the server MUST verify the signature."", ""[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Request."", ""[MS-SMB2] If the request is for binding the session, the server MUST look up the session in the GlobalSessionTable using the SessionId in the SMB2 header of the request. "", ""[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set."", ""[MS-SMB2] If the session is not found, the request MUST be failed, as specified in section Sending an Error Response (section 3.3.4.4), with the error code STATUS_USER_SESSION_DELETED. "", ""[TestInfo] The session is not found in GlobalSessionTable."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsMultiChannelCapable == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v1.Value.IsMultiChannelCapable))), ((object)(System.Convert.ToInt32(this.c.Value.IsMultiChannelCapable)))), "Fail to check the assumption : v1.IsMultiChannelCapable == c.IsMultiChannelCapabl" +
                    "e");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.4: If the SMB2 header of the request has SMB2_FLAGS_SIGNED set" +
                    " in the Flags field, the server MUST verify the signature.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_FLAGS_SIGNED is set in the SMB2 header of the SessionSetup Reque" +
                    "st.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the request is for binding the session, the server MUST look up the" +
                    " session in the GlobalSessionTable using the SessionId in the SMB2 header of the" +
                    " request. \"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_SESSION_FLAG_BINDING bit is set.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the session is not found, the request MUST be failed, as specified " +
                    "in section Sending an Error Response (section 3.3.4.4), with the error code STAT" +
                    "US_USER_SESSION_DELETED. \"");
            this.Manager.Checkpoint("\"[TestInfo] The session is not found in GlobalSessionTable.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S96
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Session)]
        public void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS96() {
            this.Manager.BeginTest("SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS96");
            this.Manager.Comment("reaching state \'S96\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig temp75;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ISessionMgmtAdapterInstance.ReadConfig(out temp75);
            this.Manager.AddReturn(ReadConfigInfo, null, temp75);
            this.Manager.Comment("reaching state \'S97\'");
            int temp76 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS96ReadConfigChecker)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS96ReadConfigChecker1)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS96ReadConfigChecker2)), new ExpectedReturn(SessionMgmtBindSessionAfterDisconnectionScenarioTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS96ReadConfigChecker3)));
            if ((temp76 == 0)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS112();
                goto label64;
            }
            if ((temp76 == 1)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS126();
                goto label64;
            }
            if ((temp76 == 2)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS140();
                goto label64;
            }
            if ((temp76 == 3)) {
                SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS98();
                goto label64;
            }
            throw new InvalidOperationException("never reached");
        label64:
;
            this.Manager.EndTest();
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS96ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S97");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS96ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S97");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsMultiChannelCapable))), ((object)(0))), "Fail to check the assumption : v.IsMultiChannelCapable == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS96ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S97");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void SessionMgmtBindSessionAfterDisconnectionScenarioTestCaseS96ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.c, c, "c of ReadConfig, state S97");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.SessionMgmt.SessionMgmtConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
    }
}
